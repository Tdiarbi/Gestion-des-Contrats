'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a été généré par un outil.
'     Version du runtime :2.0.50727.9151
'
'     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est régénéré.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("loginformDataSet13"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class loginformDataSet13
    Inherits Global.System.Data.DataSet
    
    Private tableCahier_des_charges1 As Cahier_des_charges1DataTable
    
    Private tableContrat As ContratDataTable
    
    Private tableContrat_Cadre_Client As Contrat_Cadre_ClientDataTable
    
    Private tableContrat_Cadre_Fournisseur As Contrat_Cadre_FournisseurDataTable
    
    Private tableContrat_Etranger_Client As Contrat_Etranger_ClientDataTable
    
    Private tableContrat_Etranger_Fournisseur As Contrat_Etranger_FournisseurDataTable
    
    Private tableContrat_Fournisseur As Contrat_FournisseurDataTable
    
    Private tableContrat_pour_Réviser As Contrat_pour_RéviserDataTable
    
    Private tablelogin As loginDataTable
    
    Private tablelogin_1 As login_1DataTable
    
    Private tableNote_des_Réserves_Client As Note_des_Réserves_ClientDataTable
    
    Private tableODS As ODSDataTable
    
    Private tableODS_APR_PROG As ODS_APR_PROGDataTable
    
    Private tableprojet_du_contrat As projet_du_contratDataTable
    
    Private tableProtocole_Accord_Client As Protocole_Accord_ClientDataTable
    
    Private tableProtocole_Accord_Fournisseur As Protocole_Accord_FournisseurDataTable
    
    Private tableTable_Contrat As Table_ContratDataTable
    
    Private tableValidation_contrat As Validation_contratDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Cahier_des_charges1")) Is Nothing) Then
                MyBase.Tables.Add(New Cahier_des_charges1DataTable(ds.Tables("Cahier_des_charges1")))
            End If
            If (Not (ds.Tables("Contrat")) Is Nothing) Then
                MyBase.Tables.Add(New ContratDataTable(ds.Tables("Contrat")))
            End If
            If (Not (ds.Tables("Contrat_Cadre_Client")) Is Nothing) Then
                MyBase.Tables.Add(New Contrat_Cadre_ClientDataTable(ds.Tables("Contrat_Cadre_Client")))
            End If
            If (Not (ds.Tables("Contrat_Cadre_Fournisseur")) Is Nothing) Then
                MyBase.Tables.Add(New Contrat_Cadre_FournisseurDataTable(ds.Tables("Contrat_Cadre_Fournisseur")))
            End If
            If (Not (ds.Tables("Contrat_Etranger_Client")) Is Nothing) Then
                MyBase.Tables.Add(New Contrat_Etranger_ClientDataTable(ds.Tables("Contrat_Etranger_Client")))
            End If
            If (Not (ds.Tables("Contrat_Etranger_Fournisseur")) Is Nothing) Then
                MyBase.Tables.Add(New Contrat_Etranger_FournisseurDataTable(ds.Tables("Contrat_Etranger_Fournisseur")))
            End If
            If (Not (ds.Tables("Contrat_Fournisseur")) Is Nothing) Then
                MyBase.Tables.Add(New Contrat_FournisseurDataTable(ds.Tables("Contrat_Fournisseur")))
            End If
            If (Not (ds.Tables("Contrat_pour_Réviser")) Is Nothing) Then
                MyBase.Tables.Add(New Contrat_pour_RéviserDataTable(ds.Tables("Contrat_pour_Réviser")))
            End If
            If (Not (ds.Tables("login")) Is Nothing) Then
                MyBase.Tables.Add(New loginDataTable(ds.Tables("login")))
            End If
            If (Not (ds.Tables("login_1")) Is Nothing) Then
                MyBase.Tables.Add(New login_1DataTable(ds.Tables("login_1")))
            End If
            If (Not (ds.Tables("Note_des_Réserves_Client")) Is Nothing) Then
                MyBase.Tables.Add(New Note_des_Réserves_ClientDataTable(ds.Tables("Note_des_Réserves_Client")))
            End If
            If (Not (ds.Tables("ODS")) Is Nothing) Then
                MyBase.Tables.Add(New ODSDataTable(ds.Tables("ODS")))
            End If
            If (Not (ds.Tables("ODS_APR_PROG")) Is Nothing) Then
                MyBase.Tables.Add(New ODS_APR_PROGDataTable(ds.Tables("ODS_APR_PROG")))
            End If
            If (Not (ds.Tables("projet_du_contrat")) Is Nothing) Then
                MyBase.Tables.Add(New projet_du_contratDataTable(ds.Tables("projet_du_contrat")))
            End If
            If (Not (ds.Tables("Protocole_Accord_Client")) Is Nothing) Then
                MyBase.Tables.Add(New Protocole_Accord_ClientDataTable(ds.Tables("Protocole_Accord_Client")))
            End If
            If (Not (ds.Tables("Protocole_Accord_Fournisseur")) Is Nothing) Then
                MyBase.Tables.Add(New Protocole_Accord_FournisseurDataTable(ds.Tables("Protocole_Accord_Fournisseur")))
            End If
            If (Not (ds.Tables("Table_Contrat")) Is Nothing) Then
                MyBase.Tables.Add(New Table_ContratDataTable(ds.Tables("Table_Contrat")))
            End If
            If (Not (ds.Tables("Validation_contrat")) Is Nothing) Then
                MyBase.Tables.Add(New Validation_contratDataTable(ds.Tables("Validation_contrat")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Cahier_des_charges1() As Cahier_des_charges1DataTable
        Get
            Return Me.tableCahier_des_charges1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Contrat() As ContratDataTable
        Get
            Return Me.tableContrat
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Contrat_Cadre_Client() As Contrat_Cadre_ClientDataTable
        Get
            Return Me.tableContrat_Cadre_Client
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Contrat_Cadre_Fournisseur() As Contrat_Cadre_FournisseurDataTable
        Get
            Return Me.tableContrat_Cadre_Fournisseur
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Contrat_Etranger_Client() As Contrat_Etranger_ClientDataTable
        Get
            Return Me.tableContrat_Etranger_Client
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Contrat_Etranger_Fournisseur() As Contrat_Etranger_FournisseurDataTable
        Get
            Return Me.tableContrat_Etranger_Fournisseur
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Contrat_Fournisseur() As Contrat_FournisseurDataTable
        Get
            Return Me.tableContrat_Fournisseur
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Contrat_pour_Réviser() As Contrat_pour_RéviserDataTable
        Get
            Return Me.tableContrat_pour_Réviser
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property login() As loginDataTable
        Get
            Return Me.tablelogin
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property login_1() As login_1DataTable
        Get
            Return Me.tablelogin_1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Note_des_Réserves_Client() As Note_des_Réserves_ClientDataTable
        Get
            Return Me.tableNote_des_Réserves_Client
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ODS() As ODSDataTable
        Get
            Return Me.tableODS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ODS_APR_PROG() As ODS_APR_PROGDataTable
        Get
            Return Me.tableODS_APR_PROG
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property projet_du_contrat() As projet_du_contratDataTable
        Get
            Return Me.tableprojet_du_contrat
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Protocole_Accord_Client() As Protocole_Accord_ClientDataTable
        Get
            Return Me.tableProtocole_Accord_Client
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Protocole_Accord_Fournisseur() As Protocole_Accord_FournisseurDataTable
        Get
            Return Me.tableProtocole_Accord_Fournisseur
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Table_Contrat() As Table_ContratDataTable
        Get
            Return Me.tableTable_Contrat
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Validation_contrat() As Validation_contratDataTable
        Get
            Return Me.tableValidation_contrat
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As loginformDataSet13 = CType(MyBase.Clone,loginformDataSet13)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Cahier_des_charges1")) Is Nothing) Then
                MyBase.Tables.Add(New Cahier_des_charges1DataTable(ds.Tables("Cahier_des_charges1")))
            End If
            If (Not (ds.Tables("Contrat")) Is Nothing) Then
                MyBase.Tables.Add(New ContratDataTable(ds.Tables("Contrat")))
            End If
            If (Not (ds.Tables("Contrat_Cadre_Client")) Is Nothing) Then
                MyBase.Tables.Add(New Contrat_Cadre_ClientDataTable(ds.Tables("Contrat_Cadre_Client")))
            End If
            If (Not (ds.Tables("Contrat_Cadre_Fournisseur")) Is Nothing) Then
                MyBase.Tables.Add(New Contrat_Cadre_FournisseurDataTable(ds.Tables("Contrat_Cadre_Fournisseur")))
            End If
            If (Not (ds.Tables("Contrat_Etranger_Client")) Is Nothing) Then
                MyBase.Tables.Add(New Contrat_Etranger_ClientDataTable(ds.Tables("Contrat_Etranger_Client")))
            End If
            If (Not (ds.Tables("Contrat_Etranger_Fournisseur")) Is Nothing) Then
                MyBase.Tables.Add(New Contrat_Etranger_FournisseurDataTable(ds.Tables("Contrat_Etranger_Fournisseur")))
            End If
            If (Not (ds.Tables("Contrat_Fournisseur")) Is Nothing) Then
                MyBase.Tables.Add(New Contrat_FournisseurDataTable(ds.Tables("Contrat_Fournisseur")))
            End If
            If (Not (ds.Tables("Contrat_pour_Réviser")) Is Nothing) Then
                MyBase.Tables.Add(New Contrat_pour_RéviserDataTable(ds.Tables("Contrat_pour_Réviser")))
            End If
            If (Not (ds.Tables("login")) Is Nothing) Then
                MyBase.Tables.Add(New loginDataTable(ds.Tables("login")))
            End If
            If (Not (ds.Tables("login_1")) Is Nothing) Then
                MyBase.Tables.Add(New login_1DataTable(ds.Tables("login_1")))
            End If
            If (Not (ds.Tables("Note_des_Réserves_Client")) Is Nothing) Then
                MyBase.Tables.Add(New Note_des_Réserves_ClientDataTable(ds.Tables("Note_des_Réserves_Client")))
            End If
            If (Not (ds.Tables("ODS")) Is Nothing) Then
                MyBase.Tables.Add(New ODSDataTable(ds.Tables("ODS")))
            End If
            If (Not (ds.Tables("ODS_APR_PROG")) Is Nothing) Then
                MyBase.Tables.Add(New ODS_APR_PROGDataTable(ds.Tables("ODS_APR_PROG")))
            End If
            If (Not (ds.Tables("projet_du_contrat")) Is Nothing) Then
                MyBase.Tables.Add(New projet_du_contratDataTable(ds.Tables("projet_du_contrat")))
            End If
            If (Not (ds.Tables("Protocole_Accord_Client")) Is Nothing) Then
                MyBase.Tables.Add(New Protocole_Accord_ClientDataTable(ds.Tables("Protocole_Accord_Client")))
            End If
            If (Not (ds.Tables("Protocole_Accord_Fournisseur")) Is Nothing) Then
                MyBase.Tables.Add(New Protocole_Accord_FournisseurDataTable(ds.Tables("Protocole_Accord_Fournisseur")))
            End If
            If (Not (ds.Tables("Table_Contrat")) Is Nothing) Then
                MyBase.Tables.Add(New Table_ContratDataTable(ds.Tables("Table_Contrat")))
            End If
            If (Not (ds.Tables("Validation_contrat")) Is Nothing) Then
                MyBase.Tables.Add(New Validation_contratDataTable(ds.Tables("Validation_contrat")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableCahier_des_charges1 = CType(MyBase.Tables("Cahier_des_charges1"),Cahier_des_charges1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableCahier_des_charges1) Is Nothing) Then
                Me.tableCahier_des_charges1.InitVars
            End If
        End If
        Me.tableContrat = CType(MyBase.Tables("Contrat"),ContratDataTable)
        If (initTable = true) Then
            If (Not (Me.tableContrat) Is Nothing) Then
                Me.tableContrat.InitVars
            End If
        End If
        Me.tableContrat_Cadre_Client = CType(MyBase.Tables("Contrat_Cadre_Client"),Contrat_Cadre_ClientDataTable)
        If (initTable = true) Then
            If (Not (Me.tableContrat_Cadre_Client) Is Nothing) Then
                Me.tableContrat_Cadre_Client.InitVars
            End If
        End If
        Me.tableContrat_Cadre_Fournisseur = CType(MyBase.Tables("Contrat_Cadre_Fournisseur"),Contrat_Cadre_FournisseurDataTable)
        If (initTable = true) Then
            If (Not (Me.tableContrat_Cadre_Fournisseur) Is Nothing) Then
                Me.tableContrat_Cadre_Fournisseur.InitVars
            End If
        End If
        Me.tableContrat_Etranger_Client = CType(MyBase.Tables("Contrat_Etranger_Client"),Contrat_Etranger_ClientDataTable)
        If (initTable = true) Then
            If (Not (Me.tableContrat_Etranger_Client) Is Nothing) Then
                Me.tableContrat_Etranger_Client.InitVars
            End If
        End If
        Me.tableContrat_Etranger_Fournisseur = CType(MyBase.Tables("Contrat_Etranger_Fournisseur"),Contrat_Etranger_FournisseurDataTable)
        If (initTable = true) Then
            If (Not (Me.tableContrat_Etranger_Fournisseur) Is Nothing) Then
                Me.tableContrat_Etranger_Fournisseur.InitVars
            End If
        End If
        Me.tableContrat_Fournisseur = CType(MyBase.Tables("Contrat_Fournisseur"),Contrat_FournisseurDataTable)
        If (initTable = true) Then
            If (Not (Me.tableContrat_Fournisseur) Is Nothing) Then
                Me.tableContrat_Fournisseur.InitVars
            End If
        End If
        Me.tableContrat_pour_Réviser = CType(MyBase.Tables("Contrat_pour_Réviser"),Contrat_pour_RéviserDataTable)
        If (initTable = true) Then
            If (Not (Me.tableContrat_pour_Réviser) Is Nothing) Then
                Me.tableContrat_pour_Réviser.InitVars
            End If
        End If
        Me.tablelogin = CType(MyBase.Tables("login"),loginDataTable)
        If (initTable = true) Then
            If (Not (Me.tablelogin) Is Nothing) Then
                Me.tablelogin.InitVars
            End If
        End If
        Me.tablelogin_1 = CType(MyBase.Tables("login_1"),login_1DataTable)
        If (initTable = true) Then
            If (Not (Me.tablelogin_1) Is Nothing) Then
                Me.tablelogin_1.InitVars
            End If
        End If
        Me.tableNote_des_Réserves_Client = CType(MyBase.Tables("Note_des_Réserves_Client"),Note_des_Réserves_ClientDataTable)
        If (initTable = true) Then
            If (Not (Me.tableNote_des_Réserves_Client) Is Nothing) Then
                Me.tableNote_des_Réserves_Client.InitVars
            End If
        End If
        Me.tableODS = CType(MyBase.Tables("ODS"),ODSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableODS) Is Nothing) Then
                Me.tableODS.InitVars
            End If
        End If
        Me.tableODS_APR_PROG = CType(MyBase.Tables("ODS_APR_PROG"),ODS_APR_PROGDataTable)
        If (initTable = true) Then
            If (Not (Me.tableODS_APR_PROG) Is Nothing) Then
                Me.tableODS_APR_PROG.InitVars
            End If
        End If
        Me.tableprojet_du_contrat = CType(MyBase.Tables("projet_du_contrat"),projet_du_contratDataTable)
        If (initTable = true) Then
            If (Not (Me.tableprojet_du_contrat) Is Nothing) Then
                Me.tableprojet_du_contrat.InitVars
            End If
        End If
        Me.tableProtocole_Accord_Client = CType(MyBase.Tables("Protocole_Accord_Client"),Protocole_Accord_ClientDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProtocole_Accord_Client) Is Nothing) Then
                Me.tableProtocole_Accord_Client.InitVars
            End If
        End If
        Me.tableProtocole_Accord_Fournisseur = CType(MyBase.Tables("Protocole_Accord_Fournisseur"),Protocole_Accord_FournisseurDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProtocole_Accord_Fournisseur) Is Nothing) Then
                Me.tableProtocole_Accord_Fournisseur.InitVars
            End If
        End If
        Me.tableTable_Contrat = CType(MyBase.Tables("Table_Contrat"),Table_ContratDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTable_Contrat) Is Nothing) Then
                Me.tableTable_Contrat.InitVars
            End If
        End If
        Me.tableValidation_contrat = CType(MyBase.Tables("Validation_contrat"),Validation_contratDataTable)
        If (initTable = true) Then
            If (Not (Me.tableValidation_contrat) Is Nothing) Then
                Me.tableValidation_contrat.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "loginformDataSet13"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/loginformDataSet13.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableCahier_des_charges1 = New Cahier_des_charges1DataTable
        MyBase.Tables.Add(Me.tableCahier_des_charges1)
        Me.tableContrat = New ContratDataTable
        MyBase.Tables.Add(Me.tableContrat)
        Me.tableContrat_Cadre_Client = New Contrat_Cadre_ClientDataTable
        MyBase.Tables.Add(Me.tableContrat_Cadre_Client)
        Me.tableContrat_Cadre_Fournisseur = New Contrat_Cadre_FournisseurDataTable
        MyBase.Tables.Add(Me.tableContrat_Cadre_Fournisseur)
        Me.tableContrat_Etranger_Client = New Contrat_Etranger_ClientDataTable
        MyBase.Tables.Add(Me.tableContrat_Etranger_Client)
        Me.tableContrat_Etranger_Fournisseur = New Contrat_Etranger_FournisseurDataTable
        MyBase.Tables.Add(Me.tableContrat_Etranger_Fournisseur)
        Me.tableContrat_Fournisseur = New Contrat_FournisseurDataTable
        MyBase.Tables.Add(Me.tableContrat_Fournisseur)
        Me.tableContrat_pour_Réviser = New Contrat_pour_RéviserDataTable
        MyBase.Tables.Add(Me.tableContrat_pour_Réviser)
        Me.tablelogin = New loginDataTable
        MyBase.Tables.Add(Me.tablelogin)
        Me.tablelogin_1 = New login_1DataTable
        MyBase.Tables.Add(Me.tablelogin_1)
        Me.tableNote_des_Réserves_Client = New Note_des_Réserves_ClientDataTable
        MyBase.Tables.Add(Me.tableNote_des_Réserves_Client)
        Me.tableODS = New ODSDataTable
        MyBase.Tables.Add(Me.tableODS)
        Me.tableODS_APR_PROG = New ODS_APR_PROGDataTable
        MyBase.Tables.Add(Me.tableODS_APR_PROG)
        Me.tableprojet_du_contrat = New projet_du_contratDataTable
        MyBase.Tables.Add(Me.tableprojet_du_contrat)
        Me.tableProtocole_Accord_Client = New Protocole_Accord_ClientDataTable
        MyBase.Tables.Add(Me.tableProtocole_Accord_Client)
        Me.tableProtocole_Accord_Fournisseur = New Protocole_Accord_FournisseurDataTable
        MyBase.Tables.Add(Me.tableProtocole_Accord_Fournisseur)
        Me.tableTable_Contrat = New Table_ContratDataTable
        MyBase.Tables.Add(Me.tableTable_Contrat)
        Me.tableValidation_contrat = New Validation_contratDataTable
        MyBase.Tables.Add(Me.tableValidation_contrat)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCahier_des_charges1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeContrat() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeContrat_Cadre_Client() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeContrat_Cadre_Fournisseur() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeContrat_Etranger_Client() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeContrat_Etranger_Fournisseur() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeContrat_Fournisseur() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeContrat_pour_Réviser() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializelogin() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializelogin_1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeNote_des_Réserves_Client() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeODS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeODS_APR_PROG() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeprojet_du_contrat() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProtocole_Accord_Client() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProtocole_Accord_Fournisseur() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTable_Contrat() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeValidation_contrat() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As loginformDataSet13 = New loginformDataSet13
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub Cahier_des_charges1RowChangeEventHandler(ByVal sender As Object, ByVal e As Cahier_des_charges1RowChangeEvent)
    
    Public Delegate Sub ContratRowChangeEventHandler(ByVal sender As Object, ByVal e As ContratRowChangeEvent)
    
    Public Delegate Sub Contrat_Cadre_ClientRowChangeEventHandler(ByVal sender As Object, ByVal e As Contrat_Cadre_ClientRowChangeEvent)
    
    Public Delegate Sub Contrat_Cadre_FournisseurRowChangeEventHandler(ByVal sender As Object, ByVal e As Contrat_Cadre_FournisseurRowChangeEvent)
    
    Public Delegate Sub Contrat_Etranger_ClientRowChangeEventHandler(ByVal sender As Object, ByVal e As Contrat_Etranger_ClientRowChangeEvent)
    
    Public Delegate Sub Contrat_Etranger_FournisseurRowChangeEventHandler(ByVal sender As Object, ByVal e As Contrat_Etranger_FournisseurRowChangeEvent)
    
    Public Delegate Sub Contrat_FournisseurRowChangeEventHandler(ByVal sender As Object, ByVal e As Contrat_FournisseurRowChangeEvent)
    
    Public Delegate Sub Contrat_pour_RéviserRowChangeEventHandler(ByVal sender As Object, ByVal e As Contrat_pour_RéviserRowChangeEvent)
    
    Public Delegate Sub loginRowChangeEventHandler(ByVal sender As Object, ByVal e As loginRowChangeEvent)
    
    Public Delegate Sub login_1RowChangeEventHandler(ByVal sender As Object, ByVal e As login_1RowChangeEvent)
    
    Public Delegate Sub Note_des_Réserves_ClientRowChangeEventHandler(ByVal sender As Object, ByVal e As Note_des_Réserves_ClientRowChangeEvent)
    
    Public Delegate Sub ODSRowChangeEventHandler(ByVal sender As Object, ByVal e As ODSRowChangeEvent)
    
    Public Delegate Sub ODS_APR_PROGRowChangeEventHandler(ByVal sender As Object, ByVal e As ODS_APR_PROGRowChangeEvent)
    
    Public Delegate Sub projet_du_contratRowChangeEventHandler(ByVal sender As Object, ByVal e As projet_du_contratRowChangeEvent)
    
    Public Delegate Sub Protocole_Accord_ClientRowChangeEventHandler(ByVal sender As Object, ByVal e As Protocole_Accord_ClientRowChangeEvent)
    
    Public Delegate Sub Protocole_Accord_FournisseurRowChangeEventHandler(ByVal sender As Object, ByVal e As Protocole_Accord_FournisseurRowChangeEvent)
    
    Public Delegate Sub Table_ContratRowChangeEventHandler(ByVal sender As Object, ByVal e As Table_ContratRowChangeEvent)
    
    Public Delegate Sub Validation_contratRowChangeEventHandler(ByVal sender As Object, ByVal e As Validation_contratRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Cahier_des_charges1DataTable
        Inherits Global.System.Data.TypedTableBase(Of Cahier_des_charges1Row)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnObjet_de_la_demande As Global.System.Data.DataColumn
        
        Private columnRéfferrence As Global.System.Data.DataColumn
        
        Private columnStructure As Global.System.Data.DataColumn
        
        Private columnMode_Passation As Global.System.Data.DataColumn
        
        Private columnFichier_PDF As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Cahier_des_charges1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Objet_de_la_demandeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObjet_de_la_demande
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RéfferrenceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRéfferrence
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StructureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStructure
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Mode_PassationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMode_Passation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fichier_PDFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFichier_PDF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Cahier_des_charges1Row
            Get
                Return CType(Me.Rows(index),Cahier_des_charges1Row)
            End Get
        End Property
        
        Public Event Cahier_des_charges1RowChanging As Cahier_des_charges1RowChangeEventHandler
        
        Public Event Cahier_des_charges1RowChanged As Cahier_des_charges1RowChangeEventHandler
        
        Public Event Cahier_des_charges1RowDeleting As Cahier_des_charges1RowChangeEventHandler
        
        Public Event Cahier_des_charges1RowDeleted As Cahier_des_charges1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCahier_des_charges1Row(ByVal row As Cahier_des_charges1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCahier_des_charges1Row(ByVal Objet_de_la_demande As String, ByVal Réfferrence As String, ByVal _Structure As String, ByVal Mode_Passation As String, ByVal Fichier_PDF As Object) As Cahier_des_charges1Row
            Dim rowCahier_des_charges1Row As Cahier_des_charges1Row = CType(Me.NewRow,Cahier_des_charges1Row)
            Dim columnValuesArray() As Object = New Object() {Nothing, Objet_de_la_demande, Réfferrence, _Structure, Mode_Passation, Fichier_PDF}
            rowCahier_des_charges1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowCahier_des_charges1Row)
            Return rowCahier_des_charges1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Cahier_des_charges1DataTable = CType(MyBase.Clone,Cahier_des_charges1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Cahier_des_charges1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnObjet_de_la_demande = MyBase.Columns("Objet_de_la_demande")
            Me.columnRéfferrence = MyBase.Columns("Réfferrence")
            Me.columnStructure = MyBase.Columns("Structure")
            Me.columnMode_Passation = MyBase.Columns("Mode_Passation")
            Me.columnFichier_PDF = MyBase.Columns("Fichier_PDF")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnObjet_de_la_demande = New Global.System.Data.DataColumn("Objet_de_la_demande", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObjet_de_la_demande)
            Me.columnRéfferrence = New Global.System.Data.DataColumn("Réfferrence", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRéfferrence)
            Me.columnStructure = New Global.System.Data.DataColumn("Structure", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnStructure.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "StructureColumn")
            Me.columnStructure.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnStructure")
            Me.columnStructure.ExtendedProperties.Add("Generator_UserColumnName", "Structure")
            MyBase.Columns.Add(Me.columnStructure)
            Me.columnMode_Passation = New Global.System.Data.DataColumn("Mode_Passation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMode_Passation)
            Me.columnFichier_PDF = New Global.System.Data.DataColumn("Fichier_PDF", GetType(Object), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFichier_PDF)
            Me.columnid.AutoIncrement = true
            Me.columnid.AutoIncrementSeed = -1
            Me.columnid.AutoIncrementStep = -1
            Me.columnid.AllowDBNull = false
            Me.columnid.ReadOnly = true
            Me.columnObjet_de_la_demande.MaxLength = 50
            Me.columnRéfferrence.MaxLength = 50
            Me.columnStructure.MaxLength = 50
            Me.columnMode_Passation.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCahier_des_charges1Row() As Cahier_des_charges1Row
            Return CType(Me.NewRow,Cahier_des_charges1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Cahier_des_charges1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Cahier_des_charges1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Cahier_des_charges1RowChangedEvent) Is Nothing) Then
                RaiseEvent Cahier_des_charges1RowChanged(Me, New Cahier_des_charges1RowChangeEvent(CType(e.Row,Cahier_des_charges1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Cahier_des_charges1RowChangingEvent) Is Nothing) Then
                RaiseEvent Cahier_des_charges1RowChanging(Me, New Cahier_des_charges1RowChangeEvent(CType(e.Row,Cahier_des_charges1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Cahier_des_charges1RowDeletedEvent) Is Nothing) Then
                RaiseEvent Cahier_des_charges1RowDeleted(Me, New Cahier_des_charges1RowChangeEvent(CType(e.Row,Cahier_des_charges1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Cahier_des_charges1RowDeletingEvent) Is Nothing) Then
                RaiseEvent Cahier_des_charges1RowDeleting(Me, New Cahier_des_charges1RowChangeEvent(CType(e.Row,Cahier_des_charges1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCahier_des_charges1Row(ByVal row As Cahier_des_charges1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As loginformDataSet13 = New loginformDataSet13
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Cahier_des_charges1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ContratDataTable
        Inherits Global.System.Data.TypedTableBase(Of ContratRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnClient As Global.System.Data.DataColumn
        
        Private columnMontant As Global.System.Data.DataColumn
        
        Private columnDate_Signature As Global.System.Data.DataColumn
        
        Private columnRéfferrence As Global.System.Data.DataColumn
        
        Private columnObjet_de_la_demane As Global.System.Data.DataColumn
        
        Private columnMode_de_passation As Global.System.Data.DataColumn
        
        Private _columnDelai_d_execution As Global.System.Data.DataColumn
        
        Private columnDurée_de_contrat As Global.System.Data.DataColumn
        
        Private columntype_contrat As Global.System.Data.DataColumn
        
        Private columnMode_Execution As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Contrat"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Date_SignatureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDate_Signature
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RéfferrenceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRéfferrence
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Objet_de_la_demaneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObjet_de_la_demane
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Mode_de_passationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMode_de_passation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Delai_d_executionColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnDelai_d_execution
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Durée_de_contratColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDurée_de_contrat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property type_contratColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntype_contrat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Mode_ExecutionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMode_Execution
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ContratRow
            Get
                Return CType(Me.Rows(index),ContratRow)
            End Get
        End Property
        
        Public Event ContratRowChanging As ContratRowChangeEventHandler
        
        Public Event ContratRowChanged As ContratRowChangeEventHandler
        
        Public Event ContratRowDeleting As ContratRowChangeEventHandler
        
        Public Event ContratRowDeleted As ContratRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddContratRow(ByVal row As ContratRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddContratRow(ByVal Client As String, ByVal Montant As String, ByVal Date_Signature As String, ByVal Réfferrence As String, ByVal Objet_de_la_demane As String, ByVal Mode_de_passation As String, ByVal _Delai_d_execution As String, ByVal Durée_de_contrat As String, ByVal type_contrat As String, ByVal Mode_Execution As String) As ContratRow
            Dim rowContratRow As ContratRow = CType(Me.NewRow,ContratRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Client, Montant, Date_Signature, Réfferrence, Objet_de_la_demane, Mode_de_passation, _Delai_d_execution, Durée_de_contrat, type_contrat, Mode_Execution}
            rowContratRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowContratRow)
            Return rowContratRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ContratDataTable = CType(MyBase.Clone,ContratDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ContratDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnClient = MyBase.Columns("Client")
            Me.columnMontant = MyBase.Columns("Montant")
            Me.columnDate_Signature = MyBase.Columns("Date_Signature")
            Me.columnRéfferrence = MyBase.Columns("Réfferrence")
            Me.columnObjet_de_la_demane = MyBase.Columns("Objet_de_la_demane")
            Me.columnMode_de_passation = MyBase.Columns("Mode_de_passation")
            Me._columnDelai_d_execution = MyBase.Columns("Delai d'execution")
            Me.columnDurée_de_contrat = MyBase.Columns("Durée_de_contrat")
            Me.columntype_contrat = MyBase.Columns("type_contrat")
            Me.columnMode_Execution = MyBase.Columns("Mode_Execution")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnClient = New Global.System.Data.DataColumn("Client", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClient)
            Me.columnMontant = New Global.System.Data.DataColumn("Montant", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontant)
            Me.columnDate_Signature = New Global.System.Data.DataColumn("Date_Signature", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDate_Signature)
            Me.columnRéfferrence = New Global.System.Data.DataColumn("Réfferrence", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRéfferrence)
            Me.columnObjet_de_la_demane = New Global.System.Data.DataColumn("Objet_de_la_demane", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObjet_de_la_demane)
            Me.columnMode_de_passation = New Global.System.Data.DataColumn("Mode_de_passation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMode_de_passation)
            Me._columnDelai_d_execution = New Global.System.Data.DataColumn("Delai d'execution", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnDelai_d_execution.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnDelai_d_execution")
            Me._columnDelai_d_execution.ExtendedProperties.Add("Generator_UserColumnName", "Delai d'execution")
            MyBase.Columns.Add(Me._columnDelai_d_execution)
            Me.columnDurée_de_contrat = New Global.System.Data.DataColumn("Durée_de_contrat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDurée_de_contrat)
            Me.columntype_contrat = New Global.System.Data.DataColumn("type_contrat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntype_contrat)
            Me.columnMode_Execution = New Global.System.Data.DataColumn("Mode_Execution", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMode_Execution)
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnClient.MaxLength = 1
            Me.columnMontant.MaxLength = 1
            Me.columnDate_Signature.MaxLength = 1
            Me.columnRéfferrence.MaxLength = 1
            Me.columnObjet_de_la_demane.MaxLength = 1
            Me.columnMode_de_passation.MaxLength = 1
            Me._columnDelai_d_execution.AllowDBNull = false
            Me._columnDelai_d_execution.MaxLength = 50
            Me.columnDurée_de_contrat.MaxLength = 1
            Me.columntype_contrat.MaxLength = 1
            Me.columnMode_Execution.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewContratRow() As ContratRow
            Return CType(Me.NewRow,ContratRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ContratRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ContratRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ContratRowChangedEvent) Is Nothing) Then
                RaiseEvent ContratRowChanged(Me, New ContratRowChangeEvent(CType(e.Row,ContratRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ContratRowChangingEvent) Is Nothing) Then
                RaiseEvent ContratRowChanging(Me, New ContratRowChangeEvent(CType(e.Row,ContratRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ContratRowDeletedEvent) Is Nothing) Then
                RaiseEvent ContratRowDeleted(Me, New ContratRowChangeEvent(CType(e.Row,ContratRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ContratRowDeletingEvent) Is Nothing) Then
                RaiseEvent ContratRowDeleting(Me, New ContratRowChangeEvent(CType(e.Row,ContratRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveContratRow(ByVal row As ContratRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As loginformDataSet13 = New loginformDataSet13
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ContratDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Contrat_Cadre_ClientDataTable
        Inherits Global.System.Data.TypedTableBase(Of Contrat_Cadre_ClientRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnClient As Global.System.Data.DataColumn
        
        Private columnMontant As Global.System.Data.DataColumn
        
        Private columnDate_Signature As Global.System.Data.DataColumn
        
        Private columnRéfferrence As Global.System.Data.DataColumn
        
        Private columnObjet_de_la_demande As Global.System.Data.DataColumn
        
        Private columnMode_de_passation As Global.System.Data.DataColumn
        
        Private columnDurée_contrat As Global.System.Data.DataColumn
        
        Private columnType_contrat As Global.System.Data.DataColumn
        
        Private columnFichier_PDF As Global.System.Data.DataColumn
        
        Private columnCommande As Global.System.Data.DataColumn
        
        Private columnDelai_Contractuelle As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Contrat_Cadre_Client"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Date_SignatureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDate_Signature
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RéfferrenceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRéfferrence
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Objet_de_la_demandeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObjet_de_la_demande
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Mode_de_passationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMode_de_passation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Durée_contratColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDurée_contrat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Type_contratColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType_contrat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fichier_PDFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFichier_PDF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommandeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCommande
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Delai_ContractuelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDelai_Contractuelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Contrat_Cadre_ClientRow
            Get
                Return CType(Me.Rows(index),Contrat_Cadre_ClientRow)
            End Get
        End Property
        
        Public Event Contrat_Cadre_ClientRowChanging As Contrat_Cadre_ClientRowChangeEventHandler
        
        Public Event Contrat_Cadre_ClientRowChanged As Contrat_Cadre_ClientRowChangeEventHandler
        
        Public Event Contrat_Cadre_ClientRowDeleting As Contrat_Cadre_ClientRowChangeEventHandler
        
        Public Event Contrat_Cadre_ClientRowDeleted As Contrat_Cadre_ClientRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddContrat_Cadre_ClientRow(ByVal row As Contrat_Cadre_ClientRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddContrat_Cadre_ClientRow(ByVal ID As Integer, ByVal Client As String, ByVal Montant As String, ByVal Date_Signature As Date, ByVal Réfferrence As String, ByVal Objet_de_la_demande As String, ByVal Mode_de_passation As String, ByVal Durée_contrat As String, ByVal Type_contrat As String, ByVal Fichier_PDF As Object, ByVal Commande As String, ByVal Delai_Contractuelle As String) As Contrat_Cadre_ClientRow
            Dim rowContrat_Cadre_ClientRow As Contrat_Cadre_ClientRow = CType(Me.NewRow,Contrat_Cadre_ClientRow)
            Dim columnValuesArray() As Object = New Object() {ID, Client, Montant, Date_Signature, Réfferrence, Objet_de_la_demande, Mode_de_passation, Durée_contrat, Type_contrat, Fichier_PDF, Commande, Delai_Contractuelle}
            rowContrat_Cadre_ClientRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowContrat_Cadre_ClientRow)
            Return rowContrat_Cadre_ClientRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Contrat_Cadre_ClientDataTable = CType(MyBase.Clone,Contrat_Cadre_ClientDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Contrat_Cadre_ClientDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnClient = MyBase.Columns("Client")
            Me.columnMontant = MyBase.Columns("Montant")
            Me.columnDate_Signature = MyBase.Columns("Date_Signature")
            Me.columnRéfferrence = MyBase.Columns("Réfferrence")
            Me.columnObjet_de_la_demande = MyBase.Columns("Objet_de_la_demande")
            Me.columnMode_de_passation = MyBase.Columns("Mode_de_passation")
            Me.columnDurée_contrat = MyBase.Columns("Durée_contrat")
            Me.columnType_contrat = MyBase.Columns("Type_contrat")
            Me.columnFichier_PDF = MyBase.Columns("Fichier_PDF")
            Me.columnCommande = MyBase.Columns("Commande")
            Me.columnDelai_Contractuelle = MyBase.Columns("Delai_Contractuelle")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnClient = New Global.System.Data.DataColumn("Client", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClient)
            Me.columnMontant = New Global.System.Data.DataColumn("Montant", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontant)
            Me.columnDate_Signature = New Global.System.Data.DataColumn("Date_Signature", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDate_Signature)
            Me.columnRéfferrence = New Global.System.Data.DataColumn("Réfferrence", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRéfferrence)
            Me.columnObjet_de_la_demande = New Global.System.Data.DataColumn("Objet_de_la_demande", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObjet_de_la_demande)
            Me.columnMode_de_passation = New Global.System.Data.DataColumn("Mode_de_passation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMode_de_passation)
            Me.columnDurée_contrat = New Global.System.Data.DataColumn("Durée_contrat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDurée_contrat)
            Me.columnType_contrat = New Global.System.Data.DataColumn("Type_contrat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType_contrat)
            Me.columnFichier_PDF = New Global.System.Data.DataColumn("Fichier_PDF", GetType(Object), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFichier_PDF)
            Me.columnCommande = New Global.System.Data.DataColumn("Commande", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCommande)
            Me.columnDelai_Contractuelle = New Global.System.Data.DataColumn("Delai_Contractuelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDelai_Contractuelle)
            Me.columnID.AllowDBNull = false
            Me.columnClient.MaxLength = 50
            Me.columnMontant.MaxLength = 50
            Me.columnRéfferrence.MaxLength = 50
            Me.columnObjet_de_la_demande.MaxLength = 50
            Me.columnMode_de_passation.MaxLength = 50
            Me.columnDurée_contrat.MaxLength = 50
            Me.columnType_contrat.MaxLength = 50
            Me.columnCommande.MaxLength = 255
            Me.columnDelai_Contractuelle.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewContrat_Cadre_ClientRow() As Contrat_Cadre_ClientRow
            Return CType(Me.NewRow,Contrat_Cadre_ClientRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Contrat_Cadre_ClientRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Contrat_Cadre_ClientRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Contrat_Cadre_ClientRowChangedEvent) Is Nothing) Then
                RaiseEvent Contrat_Cadre_ClientRowChanged(Me, New Contrat_Cadre_ClientRowChangeEvent(CType(e.Row,Contrat_Cadre_ClientRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Contrat_Cadre_ClientRowChangingEvent) Is Nothing) Then
                RaiseEvent Contrat_Cadre_ClientRowChanging(Me, New Contrat_Cadre_ClientRowChangeEvent(CType(e.Row,Contrat_Cadre_ClientRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Contrat_Cadre_ClientRowDeletedEvent) Is Nothing) Then
                RaiseEvent Contrat_Cadre_ClientRowDeleted(Me, New Contrat_Cadre_ClientRowChangeEvent(CType(e.Row,Contrat_Cadre_ClientRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Contrat_Cadre_ClientRowDeletingEvent) Is Nothing) Then
                RaiseEvent Contrat_Cadre_ClientRowDeleting(Me, New Contrat_Cadre_ClientRowChangeEvent(CType(e.Row,Contrat_Cadre_ClientRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveContrat_Cadre_ClientRow(ByVal row As Contrat_Cadre_ClientRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As loginformDataSet13 = New loginformDataSet13
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Contrat_Cadre_ClientDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Contrat_Cadre_FournisseurDataTable
        Inherits Global.System.Data.TypedTableBase(Of Contrat_Cadre_FournisseurRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnClient As Global.System.Data.DataColumn
        
        Private columnMontant As Global.System.Data.DataColumn
        
        Private columnDate_Signature As Global.System.Data.DataColumn
        
        Private columnRéfferrence As Global.System.Data.DataColumn
        
        Private columnObjet_de_la_demande As Global.System.Data.DataColumn
        
        Private columnMode_de_passation As Global.System.Data.DataColumn
        
        Private columnDurée_contrat As Global.System.Data.DataColumn
        
        Private columnType_contrat As Global.System.Data.DataColumn
        
        Private columnFichier_PDF As Global.System.Data.DataColumn
        
        Private columnCommande As Global.System.Data.DataColumn
        
        Private columnDelai_Contractuelle As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Contrat_Cadre_Fournisseur"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Date_SignatureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDate_Signature
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RéfferrenceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRéfferrence
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Objet_de_la_demandeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObjet_de_la_demande
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Mode_de_passationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMode_de_passation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Durée_contratColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDurée_contrat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Type_contratColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType_contrat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fichier_PDFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFichier_PDF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommandeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCommande
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Delai_ContractuelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDelai_Contractuelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Contrat_Cadre_FournisseurRow
            Get
                Return CType(Me.Rows(index),Contrat_Cadre_FournisseurRow)
            End Get
        End Property
        
        Public Event Contrat_Cadre_FournisseurRowChanging As Contrat_Cadre_FournisseurRowChangeEventHandler
        
        Public Event Contrat_Cadre_FournisseurRowChanged As Contrat_Cadre_FournisseurRowChangeEventHandler
        
        Public Event Contrat_Cadre_FournisseurRowDeleting As Contrat_Cadre_FournisseurRowChangeEventHandler
        
        Public Event Contrat_Cadre_FournisseurRowDeleted As Contrat_Cadre_FournisseurRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddContrat_Cadre_FournisseurRow(ByVal row As Contrat_Cadre_FournisseurRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddContrat_Cadre_FournisseurRow(ByVal ID As Integer, ByVal Client As String, ByVal Montant As String, ByVal Date_Signature As Date, ByVal Réfferrence As String, ByVal Objet_de_la_demande As String, ByVal Mode_de_passation As String, ByVal Durée_contrat As String, ByVal Type_contrat As String, ByVal Fichier_PDF As Object, ByVal Commande As String, ByVal Delai_Contractuelle As String) As Contrat_Cadre_FournisseurRow
            Dim rowContrat_Cadre_FournisseurRow As Contrat_Cadre_FournisseurRow = CType(Me.NewRow,Contrat_Cadre_FournisseurRow)
            Dim columnValuesArray() As Object = New Object() {ID, Client, Montant, Date_Signature, Réfferrence, Objet_de_la_demande, Mode_de_passation, Durée_contrat, Type_contrat, Fichier_PDF, Commande, Delai_Contractuelle}
            rowContrat_Cadre_FournisseurRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowContrat_Cadre_FournisseurRow)
            Return rowContrat_Cadre_FournisseurRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Contrat_Cadre_FournisseurDataTable = CType(MyBase.Clone,Contrat_Cadre_FournisseurDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Contrat_Cadre_FournisseurDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnClient = MyBase.Columns("Client")
            Me.columnMontant = MyBase.Columns("Montant")
            Me.columnDate_Signature = MyBase.Columns("Date_Signature")
            Me.columnRéfferrence = MyBase.Columns("Réfferrence")
            Me.columnObjet_de_la_demande = MyBase.Columns("Objet_de_la_demande")
            Me.columnMode_de_passation = MyBase.Columns("Mode_de_passation")
            Me.columnDurée_contrat = MyBase.Columns("Durée_contrat")
            Me.columnType_contrat = MyBase.Columns("Type_contrat")
            Me.columnFichier_PDF = MyBase.Columns("Fichier_PDF")
            Me.columnCommande = MyBase.Columns("Commande")
            Me.columnDelai_Contractuelle = MyBase.Columns("Delai_Contractuelle")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnClient = New Global.System.Data.DataColumn("Client", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClient)
            Me.columnMontant = New Global.System.Data.DataColumn("Montant", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontant)
            Me.columnDate_Signature = New Global.System.Data.DataColumn("Date_Signature", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDate_Signature)
            Me.columnRéfferrence = New Global.System.Data.DataColumn("Réfferrence", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRéfferrence)
            Me.columnObjet_de_la_demande = New Global.System.Data.DataColumn("Objet_de_la_demande", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObjet_de_la_demande)
            Me.columnMode_de_passation = New Global.System.Data.DataColumn("Mode_de_passation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMode_de_passation)
            Me.columnDurée_contrat = New Global.System.Data.DataColumn("Durée_contrat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDurée_contrat)
            Me.columnType_contrat = New Global.System.Data.DataColumn("Type_contrat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType_contrat)
            Me.columnFichier_PDF = New Global.System.Data.DataColumn("Fichier_PDF", GetType(Object), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFichier_PDF)
            Me.columnCommande = New Global.System.Data.DataColumn("Commande", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCommande)
            Me.columnDelai_Contractuelle = New Global.System.Data.DataColumn("Delai_Contractuelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDelai_Contractuelle)
            Me.columnID.AllowDBNull = false
            Me.columnClient.MaxLength = 50
            Me.columnMontant.MaxLength = 50
            Me.columnRéfferrence.MaxLength = 50
            Me.columnObjet_de_la_demande.MaxLength = 50
            Me.columnMode_de_passation.MaxLength = 50
            Me.columnDurée_contrat.MaxLength = 50
            Me.columnType_contrat.MaxLength = 50
            Me.columnCommande.MaxLength = 255
            Me.columnDelai_Contractuelle.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewContrat_Cadre_FournisseurRow() As Contrat_Cadre_FournisseurRow
            Return CType(Me.NewRow,Contrat_Cadre_FournisseurRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Contrat_Cadre_FournisseurRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Contrat_Cadre_FournisseurRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Contrat_Cadre_FournisseurRowChangedEvent) Is Nothing) Then
                RaiseEvent Contrat_Cadre_FournisseurRowChanged(Me, New Contrat_Cadre_FournisseurRowChangeEvent(CType(e.Row,Contrat_Cadre_FournisseurRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Contrat_Cadre_FournisseurRowChangingEvent) Is Nothing) Then
                RaiseEvent Contrat_Cadre_FournisseurRowChanging(Me, New Contrat_Cadre_FournisseurRowChangeEvent(CType(e.Row,Contrat_Cadre_FournisseurRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Contrat_Cadre_FournisseurRowDeletedEvent) Is Nothing) Then
                RaiseEvent Contrat_Cadre_FournisseurRowDeleted(Me, New Contrat_Cadre_FournisseurRowChangeEvent(CType(e.Row,Contrat_Cadre_FournisseurRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Contrat_Cadre_FournisseurRowDeletingEvent) Is Nothing) Then
                RaiseEvent Contrat_Cadre_FournisseurRowDeleting(Me, New Contrat_Cadre_FournisseurRowChangeEvent(CType(e.Row,Contrat_Cadre_FournisseurRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveContrat_Cadre_FournisseurRow(ByVal row As Contrat_Cadre_FournisseurRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As loginformDataSet13 = New loginformDataSet13
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Contrat_Cadre_FournisseurDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Contrat_Etranger_ClientDataTable
        Inherits Global.System.Data.TypedTableBase(Of Contrat_Etranger_ClientRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnClient As Global.System.Data.DataColumn
        
        Private columnMontant As Global.System.Data.DataColumn
        
        Private columnDate_Signature As Global.System.Data.DataColumn
        
        Private columnRéfferrence As Global.System.Data.DataColumn
        
        Private columnObjet_de_la_demande As Global.System.Data.DataColumn
        
        Private columnMode_de_passation As Global.System.Data.DataColumn
        
        Private columnDurée_contrat As Global.System.Data.DataColumn
        
        Private columnType_contrat As Global.System.Data.DataColumn
        
        Private columnFichier_PDF As Global.System.Data.DataColumn
        
        Private columnCommande As Global.System.Data.DataColumn
        
        Private columnDelai_Contractuelle As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Contrat_Etranger_Client"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Date_SignatureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDate_Signature
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RéfferrenceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRéfferrence
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Objet_de_la_demandeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObjet_de_la_demande
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Mode_de_passationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMode_de_passation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Durée_contratColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDurée_contrat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Type_contratColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType_contrat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fichier_PDFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFichier_PDF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommandeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCommande
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Delai_ContractuelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDelai_Contractuelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Contrat_Etranger_ClientRow
            Get
                Return CType(Me.Rows(index),Contrat_Etranger_ClientRow)
            End Get
        End Property
        
        Public Event Contrat_Etranger_ClientRowChanging As Contrat_Etranger_ClientRowChangeEventHandler
        
        Public Event Contrat_Etranger_ClientRowChanged As Contrat_Etranger_ClientRowChangeEventHandler
        
        Public Event Contrat_Etranger_ClientRowDeleting As Contrat_Etranger_ClientRowChangeEventHandler
        
        Public Event Contrat_Etranger_ClientRowDeleted As Contrat_Etranger_ClientRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddContrat_Etranger_ClientRow(ByVal row As Contrat_Etranger_ClientRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddContrat_Etranger_ClientRow(ByVal ID As Integer, ByVal Client As String, ByVal Montant As String, ByVal Date_Signature As Date, ByVal Réfferrence As String, ByVal Objet_de_la_demande As String, ByVal Mode_de_passation As String, ByVal Durée_contrat As String, ByVal Type_contrat As String, ByVal Fichier_PDF As Object, ByVal Commande As String, ByVal Delai_Contractuelle As String) As Contrat_Etranger_ClientRow
            Dim rowContrat_Etranger_ClientRow As Contrat_Etranger_ClientRow = CType(Me.NewRow,Contrat_Etranger_ClientRow)
            Dim columnValuesArray() As Object = New Object() {ID, Client, Montant, Date_Signature, Réfferrence, Objet_de_la_demande, Mode_de_passation, Durée_contrat, Type_contrat, Fichier_PDF, Commande, Delai_Contractuelle}
            rowContrat_Etranger_ClientRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowContrat_Etranger_ClientRow)
            Return rowContrat_Etranger_ClientRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Contrat_Etranger_ClientDataTable = CType(MyBase.Clone,Contrat_Etranger_ClientDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Contrat_Etranger_ClientDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnClient = MyBase.Columns("Client")
            Me.columnMontant = MyBase.Columns("Montant")
            Me.columnDate_Signature = MyBase.Columns("Date_Signature")
            Me.columnRéfferrence = MyBase.Columns("Réfferrence")
            Me.columnObjet_de_la_demande = MyBase.Columns("Objet_de_la_demande")
            Me.columnMode_de_passation = MyBase.Columns("Mode_de_passation")
            Me.columnDurée_contrat = MyBase.Columns("Durée_contrat")
            Me.columnType_contrat = MyBase.Columns("Type_contrat")
            Me.columnFichier_PDF = MyBase.Columns("Fichier_PDF")
            Me.columnCommande = MyBase.Columns("Commande")
            Me.columnDelai_Contractuelle = MyBase.Columns("Delai_Contractuelle")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnClient = New Global.System.Data.DataColumn("Client", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClient)
            Me.columnMontant = New Global.System.Data.DataColumn("Montant", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontant)
            Me.columnDate_Signature = New Global.System.Data.DataColumn("Date_Signature", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDate_Signature)
            Me.columnRéfferrence = New Global.System.Data.DataColumn("Réfferrence", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRéfferrence)
            Me.columnObjet_de_la_demande = New Global.System.Data.DataColumn("Objet_de_la_demande", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObjet_de_la_demande)
            Me.columnMode_de_passation = New Global.System.Data.DataColumn("Mode_de_passation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMode_de_passation)
            Me.columnDurée_contrat = New Global.System.Data.DataColumn("Durée_contrat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDurée_contrat)
            Me.columnType_contrat = New Global.System.Data.DataColumn("Type_contrat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType_contrat)
            Me.columnFichier_PDF = New Global.System.Data.DataColumn("Fichier_PDF", GetType(Object), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFichier_PDF)
            Me.columnCommande = New Global.System.Data.DataColumn("Commande", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCommande)
            Me.columnDelai_Contractuelle = New Global.System.Data.DataColumn("Delai_Contractuelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDelai_Contractuelle)
            Me.columnID.AllowDBNull = false
            Me.columnClient.MaxLength = 50
            Me.columnMontant.MaxLength = 50
            Me.columnRéfferrence.MaxLength = 50
            Me.columnObjet_de_la_demande.MaxLength = 50
            Me.columnMode_de_passation.MaxLength = 50
            Me.columnDurée_contrat.MaxLength = 50
            Me.columnType_contrat.MaxLength = 50
            Me.columnCommande.MaxLength = 255
            Me.columnDelai_Contractuelle.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewContrat_Etranger_ClientRow() As Contrat_Etranger_ClientRow
            Return CType(Me.NewRow,Contrat_Etranger_ClientRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Contrat_Etranger_ClientRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Contrat_Etranger_ClientRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Contrat_Etranger_ClientRowChangedEvent) Is Nothing) Then
                RaiseEvent Contrat_Etranger_ClientRowChanged(Me, New Contrat_Etranger_ClientRowChangeEvent(CType(e.Row,Contrat_Etranger_ClientRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Contrat_Etranger_ClientRowChangingEvent) Is Nothing) Then
                RaiseEvent Contrat_Etranger_ClientRowChanging(Me, New Contrat_Etranger_ClientRowChangeEvent(CType(e.Row,Contrat_Etranger_ClientRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Contrat_Etranger_ClientRowDeletedEvent) Is Nothing) Then
                RaiseEvent Contrat_Etranger_ClientRowDeleted(Me, New Contrat_Etranger_ClientRowChangeEvent(CType(e.Row,Contrat_Etranger_ClientRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Contrat_Etranger_ClientRowDeletingEvent) Is Nothing) Then
                RaiseEvent Contrat_Etranger_ClientRowDeleting(Me, New Contrat_Etranger_ClientRowChangeEvent(CType(e.Row,Contrat_Etranger_ClientRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveContrat_Etranger_ClientRow(ByVal row As Contrat_Etranger_ClientRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As loginformDataSet13 = New loginformDataSet13
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Contrat_Etranger_ClientDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Contrat_Etranger_FournisseurDataTable
        Inherits Global.System.Data.TypedTableBase(Of Contrat_Etranger_FournisseurRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnClient As Global.System.Data.DataColumn
        
        Private columnMontant As Global.System.Data.DataColumn
        
        Private columnDate_Signature As Global.System.Data.DataColumn
        
        Private columnRéfferrence As Global.System.Data.DataColumn
        
        Private columnObjet_de_la_demande As Global.System.Data.DataColumn
        
        Private columnMode_de_passation As Global.System.Data.DataColumn
        
        Private columnDurée_contrat As Global.System.Data.DataColumn
        
        Private columnType_contrat As Global.System.Data.DataColumn
        
        Private columnFichier_PDF As Global.System.Data.DataColumn
        
        Private columnCommande As Global.System.Data.DataColumn
        
        Private columnDelai_Contractuelle As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Contrat_Etranger_Fournisseur"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Date_SignatureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDate_Signature
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RéfferrenceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRéfferrence
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Objet_de_la_demandeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObjet_de_la_demande
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Mode_de_passationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMode_de_passation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Durée_contratColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDurée_contrat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Type_contratColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType_contrat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fichier_PDFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFichier_PDF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommandeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCommande
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Delai_ContractuelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDelai_Contractuelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Contrat_Etranger_FournisseurRow
            Get
                Return CType(Me.Rows(index),Contrat_Etranger_FournisseurRow)
            End Get
        End Property
        
        Public Event Contrat_Etranger_FournisseurRowChanging As Contrat_Etranger_FournisseurRowChangeEventHandler
        
        Public Event Contrat_Etranger_FournisseurRowChanged As Contrat_Etranger_FournisseurRowChangeEventHandler
        
        Public Event Contrat_Etranger_FournisseurRowDeleting As Contrat_Etranger_FournisseurRowChangeEventHandler
        
        Public Event Contrat_Etranger_FournisseurRowDeleted As Contrat_Etranger_FournisseurRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddContrat_Etranger_FournisseurRow(ByVal row As Contrat_Etranger_FournisseurRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddContrat_Etranger_FournisseurRow(ByVal ID As Integer, ByVal Client As String, ByVal Montant As String, ByVal Date_Signature As Date, ByVal Réfferrence As String, ByVal Objet_de_la_demande As String, ByVal Mode_de_passation As String, ByVal Durée_contrat As String, ByVal Type_contrat As String, ByVal Fichier_PDF As Object, ByVal Commande As String, ByVal Delai_Contractuelle As String) As Contrat_Etranger_FournisseurRow
            Dim rowContrat_Etranger_FournisseurRow As Contrat_Etranger_FournisseurRow = CType(Me.NewRow,Contrat_Etranger_FournisseurRow)
            Dim columnValuesArray() As Object = New Object() {ID, Client, Montant, Date_Signature, Réfferrence, Objet_de_la_demande, Mode_de_passation, Durée_contrat, Type_contrat, Fichier_PDF, Commande, Delai_Contractuelle}
            rowContrat_Etranger_FournisseurRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowContrat_Etranger_FournisseurRow)
            Return rowContrat_Etranger_FournisseurRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Contrat_Etranger_FournisseurDataTable = CType(MyBase.Clone,Contrat_Etranger_FournisseurDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Contrat_Etranger_FournisseurDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnClient = MyBase.Columns("Client")
            Me.columnMontant = MyBase.Columns("Montant")
            Me.columnDate_Signature = MyBase.Columns("Date_Signature")
            Me.columnRéfferrence = MyBase.Columns("Réfferrence")
            Me.columnObjet_de_la_demande = MyBase.Columns("Objet_de_la_demande")
            Me.columnMode_de_passation = MyBase.Columns("Mode_de_passation")
            Me.columnDurée_contrat = MyBase.Columns("Durée_contrat")
            Me.columnType_contrat = MyBase.Columns("Type_contrat")
            Me.columnFichier_PDF = MyBase.Columns("Fichier_PDF")
            Me.columnCommande = MyBase.Columns("Commande")
            Me.columnDelai_Contractuelle = MyBase.Columns("Delai_Contractuelle")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnClient = New Global.System.Data.DataColumn("Client", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClient)
            Me.columnMontant = New Global.System.Data.DataColumn("Montant", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontant)
            Me.columnDate_Signature = New Global.System.Data.DataColumn("Date_Signature", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDate_Signature)
            Me.columnRéfferrence = New Global.System.Data.DataColumn("Réfferrence", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRéfferrence)
            Me.columnObjet_de_la_demande = New Global.System.Data.DataColumn("Objet_de_la_demande", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObjet_de_la_demande)
            Me.columnMode_de_passation = New Global.System.Data.DataColumn("Mode_de_passation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMode_de_passation)
            Me.columnDurée_contrat = New Global.System.Data.DataColumn("Durée_contrat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDurée_contrat)
            Me.columnType_contrat = New Global.System.Data.DataColumn("Type_contrat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType_contrat)
            Me.columnFichier_PDF = New Global.System.Data.DataColumn("Fichier_PDF", GetType(Object), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFichier_PDF)
            Me.columnCommande = New Global.System.Data.DataColumn("Commande", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCommande)
            Me.columnDelai_Contractuelle = New Global.System.Data.DataColumn("Delai_Contractuelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDelai_Contractuelle)
            Me.columnID.AllowDBNull = false
            Me.columnClient.MaxLength = 50
            Me.columnMontant.MaxLength = 50
            Me.columnRéfferrence.MaxLength = 50
            Me.columnObjet_de_la_demande.MaxLength = 50
            Me.columnMode_de_passation.MaxLength = 50
            Me.columnDurée_contrat.MaxLength = 50
            Me.columnType_contrat.MaxLength = 50
            Me.columnCommande.MaxLength = 255
            Me.columnDelai_Contractuelle.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewContrat_Etranger_FournisseurRow() As Contrat_Etranger_FournisseurRow
            Return CType(Me.NewRow,Contrat_Etranger_FournisseurRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Contrat_Etranger_FournisseurRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Contrat_Etranger_FournisseurRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Contrat_Etranger_FournisseurRowChangedEvent) Is Nothing) Then
                RaiseEvent Contrat_Etranger_FournisseurRowChanged(Me, New Contrat_Etranger_FournisseurRowChangeEvent(CType(e.Row,Contrat_Etranger_FournisseurRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Contrat_Etranger_FournisseurRowChangingEvent) Is Nothing) Then
                RaiseEvent Contrat_Etranger_FournisseurRowChanging(Me, New Contrat_Etranger_FournisseurRowChangeEvent(CType(e.Row,Contrat_Etranger_FournisseurRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Contrat_Etranger_FournisseurRowDeletedEvent) Is Nothing) Then
                RaiseEvent Contrat_Etranger_FournisseurRowDeleted(Me, New Contrat_Etranger_FournisseurRowChangeEvent(CType(e.Row,Contrat_Etranger_FournisseurRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Contrat_Etranger_FournisseurRowDeletingEvent) Is Nothing) Then
                RaiseEvent Contrat_Etranger_FournisseurRowDeleting(Me, New Contrat_Etranger_FournisseurRowChangeEvent(CType(e.Row,Contrat_Etranger_FournisseurRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveContrat_Etranger_FournisseurRow(ByVal row As Contrat_Etranger_FournisseurRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As loginformDataSet13 = New loginformDataSet13
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Contrat_Etranger_FournisseurDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Contrat_FournisseurDataTable
        Inherits Global.System.Data.TypedTableBase(Of Contrat_FournisseurRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnClient As Global.System.Data.DataColumn
        
        Private columnMontant As Global.System.Data.DataColumn
        
        Private columnDate_Signature As Global.System.Data.DataColumn
        
        Private columnRéfferrence As Global.System.Data.DataColumn
        
        Private columnObjet_de_la_demande As Global.System.Data.DataColumn
        
        Private columnMode_de_passation As Global.System.Data.DataColumn
        
        Private columnDurée_contrat As Global.System.Data.DataColumn
        
        Private columnType_contrat As Global.System.Data.DataColumn
        
        Private columnFichier_PDF As Global.System.Data.DataColumn
        
        Private columnCommande As Global.System.Data.DataColumn
        
        Private columnDelai_Contractuelle As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Contrat_Fournisseur"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Date_SignatureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDate_Signature
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RéfferrenceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRéfferrence
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Objet_de_la_demandeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObjet_de_la_demande
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Mode_de_passationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMode_de_passation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Durée_contratColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDurée_contrat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Type_contratColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType_contrat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fichier_PDFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFichier_PDF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommandeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCommande
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Delai_ContractuelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDelai_Contractuelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Contrat_FournisseurRow
            Get
                Return CType(Me.Rows(index),Contrat_FournisseurRow)
            End Get
        End Property
        
        Public Event Contrat_FournisseurRowChanging As Contrat_FournisseurRowChangeEventHandler
        
        Public Event Contrat_FournisseurRowChanged As Contrat_FournisseurRowChangeEventHandler
        
        Public Event Contrat_FournisseurRowDeleting As Contrat_FournisseurRowChangeEventHandler
        
        Public Event Contrat_FournisseurRowDeleted As Contrat_FournisseurRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddContrat_FournisseurRow(ByVal row As Contrat_FournisseurRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddContrat_FournisseurRow(ByVal ID As Integer, ByVal Client As String, ByVal Montant As String, ByVal Date_Signature As Date, ByVal Réfferrence As String, ByVal Objet_de_la_demande As String, ByVal Mode_de_passation As String, ByVal Durée_contrat As String, ByVal Type_contrat As String, ByVal Fichier_PDF As Object, ByVal Commande As String, ByVal Delai_Contractuelle As String) As Contrat_FournisseurRow
            Dim rowContrat_FournisseurRow As Contrat_FournisseurRow = CType(Me.NewRow,Contrat_FournisseurRow)
            Dim columnValuesArray() As Object = New Object() {ID, Client, Montant, Date_Signature, Réfferrence, Objet_de_la_demande, Mode_de_passation, Durée_contrat, Type_contrat, Fichier_PDF, Commande, Delai_Contractuelle}
            rowContrat_FournisseurRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowContrat_FournisseurRow)
            Return rowContrat_FournisseurRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Contrat_FournisseurDataTable = CType(MyBase.Clone,Contrat_FournisseurDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Contrat_FournisseurDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnClient = MyBase.Columns("Client")
            Me.columnMontant = MyBase.Columns("Montant")
            Me.columnDate_Signature = MyBase.Columns("Date_Signature")
            Me.columnRéfferrence = MyBase.Columns("Réfferrence")
            Me.columnObjet_de_la_demande = MyBase.Columns("Objet_de_la_demande")
            Me.columnMode_de_passation = MyBase.Columns("Mode_de_passation")
            Me.columnDurée_contrat = MyBase.Columns("Durée_contrat")
            Me.columnType_contrat = MyBase.Columns("Type_contrat")
            Me.columnFichier_PDF = MyBase.Columns("Fichier_PDF")
            Me.columnCommande = MyBase.Columns("Commande")
            Me.columnDelai_Contractuelle = MyBase.Columns("Delai_Contractuelle")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnClient = New Global.System.Data.DataColumn("Client", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClient)
            Me.columnMontant = New Global.System.Data.DataColumn("Montant", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontant)
            Me.columnDate_Signature = New Global.System.Data.DataColumn("Date_Signature", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDate_Signature)
            Me.columnRéfferrence = New Global.System.Data.DataColumn("Réfferrence", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRéfferrence)
            Me.columnObjet_de_la_demande = New Global.System.Data.DataColumn("Objet_de_la_demande", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObjet_de_la_demande)
            Me.columnMode_de_passation = New Global.System.Data.DataColumn("Mode_de_passation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMode_de_passation)
            Me.columnDurée_contrat = New Global.System.Data.DataColumn("Durée_contrat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDurée_contrat)
            Me.columnType_contrat = New Global.System.Data.DataColumn("Type_contrat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType_contrat)
            Me.columnFichier_PDF = New Global.System.Data.DataColumn("Fichier_PDF", GetType(Object), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFichier_PDF)
            Me.columnCommande = New Global.System.Data.DataColumn("Commande", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCommande)
            Me.columnDelai_Contractuelle = New Global.System.Data.DataColumn("Delai_Contractuelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDelai_Contractuelle)
            Me.columnID.AllowDBNull = false
            Me.columnClient.MaxLength = 50
            Me.columnMontant.MaxLength = 50
            Me.columnRéfferrence.MaxLength = 50
            Me.columnObjet_de_la_demande.MaxLength = 50
            Me.columnMode_de_passation.MaxLength = 50
            Me.columnDurée_contrat.MaxLength = 50
            Me.columnType_contrat.MaxLength = 50
            Me.columnCommande.MaxLength = 255
            Me.columnDelai_Contractuelle.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewContrat_FournisseurRow() As Contrat_FournisseurRow
            Return CType(Me.NewRow,Contrat_FournisseurRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Contrat_FournisseurRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Contrat_FournisseurRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Contrat_FournisseurRowChangedEvent) Is Nothing) Then
                RaiseEvent Contrat_FournisseurRowChanged(Me, New Contrat_FournisseurRowChangeEvent(CType(e.Row,Contrat_FournisseurRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Contrat_FournisseurRowChangingEvent) Is Nothing) Then
                RaiseEvent Contrat_FournisseurRowChanging(Me, New Contrat_FournisseurRowChangeEvent(CType(e.Row,Contrat_FournisseurRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Contrat_FournisseurRowDeletedEvent) Is Nothing) Then
                RaiseEvent Contrat_FournisseurRowDeleted(Me, New Contrat_FournisseurRowChangeEvent(CType(e.Row,Contrat_FournisseurRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Contrat_FournisseurRowDeletingEvent) Is Nothing) Then
                RaiseEvent Contrat_FournisseurRowDeleting(Me, New Contrat_FournisseurRowChangeEvent(CType(e.Row,Contrat_FournisseurRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveContrat_FournisseurRow(ByVal row As Contrat_FournisseurRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As loginformDataSet13 = New loginformDataSet13
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Contrat_FournisseurDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Contrat_pour_RéviserDataTable
        Inherits Global.System.Data.TypedTableBase(Of Contrat_pour_RéviserRow)
        
        Private columnDateArriver As Global.System.Data.DataColumn
        
        Private columnDateDepart As Global.System.Data.DataColumn
        
        Private columnDateVerification As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Contrat_pour_Réviser"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateArriverColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateArriver
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateDepartColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateDepart
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateVerificationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateVerification
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Contrat_pour_RéviserRow
            Get
                Return CType(Me.Rows(index),Contrat_pour_RéviserRow)
            End Get
        End Property
        
        Public Event Contrat_pour_RéviserRowChanging As Contrat_pour_RéviserRowChangeEventHandler
        
        Public Event Contrat_pour_RéviserRowChanged As Contrat_pour_RéviserRowChangeEventHandler
        
        Public Event Contrat_pour_RéviserRowDeleting As Contrat_pour_RéviserRowChangeEventHandler
        
        Public Event Contrat_pour_RéviserRowDeleted As Contrat_pour_RéviserRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddContrat_pour_RéviserRow(ByVal row As Contrat_pour_RéviserRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddContrat_pour_RéviserRow(ByVal DateArriver As Date, ByVal DateDepart As Date, ByVal DateVerification As Date) As Contrat_pour_RéviserRow
            Dim rowContrat_pour_RéviserRow As Contrat_pour_RéviserRow = CType(Me.NewRow,Contrat_pour_RéviserRow)
            Dim columnValuesArray() As Object = New Object() {DateArriver, DateDepart, DateVerification}
            rowContrat_pour_RéviserRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowContrat_pour_RéviserRow)
            Return rowContrat_pour_RéviserRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Contrat_pour_RéviserDataTable = CType(MyBase.Clone,Contrat_pour_RéviserDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Contrat_pour_RéviserDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDateArriver = MyBase.Columns("DateArriver")
            Me.columnDateDepart = MyBase.Columns("DateDepart")
            Me.columnDateVerification = MyBase.Columns("DateVerification")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDateArriver = New Global.System.Data.DataColumn("DateArriver", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateArriver)
            Me.columnDateDepart = New Global.System.Data.DataColumn("DateDepart", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateDepart)
            Me.columnDateVerification = New Global.System.Data.DataColumn("DateVerification", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateVerification)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewContrat_pour_RéviserRow() As Contrat_pour_RéviserRow
            Return CType(Me.NewRow,Contrat_pour_RéviserRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Contrat_pour_RéviserRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Contrat_pour_RéviserRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Contrat_pour_RéviserRowChangedEvent) Is Nothing) Then
                RaiseEvent Contrat_pour_RéviserRowChanged(Me, New Contrat_pour_RéviserRowChangeEvent(CType(e.Row,Contrat_pour_RéviserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Contrat_pour_RéviserRowChangingEvent) Is Nothing) Then
                RaiseEvent Contrat_pour_RéviserRowChanging(Me, New Contrat_pour_RéviserRowChangeEvent(CType(e.Row,Contrat_pour_RéviserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Contrat_pour_RéviserRowDeletedEvent) Is Nothing) Then
                RaiseEvent Contrat_pour_RéviserRowDeleted(Me, New Contrat_pour_RéviserRowChangeEvent(CType(e.Row,Contrat_pour_RéviserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Contrat_pour_RéviserRowDeletingEvent) Is Nothing) Then
                RaiseEvent Contrat_pour_RéviserRowDeleting(Me, New Contrat_pour_RéviserRowChangeEvent(CType(e.Row,Contrat_pour_RéviserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveContrat_pour_RéviserRow(ByVal row As Contrat_pour_RéviserRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As loginformDataSet13 = New loginformDataSet13
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Contrat_pour_RéviserDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class loginDataTable
        Inherits Global.System.Data.TypedTableBase(Of loginRow)
        
        Private columnusername As Global.System.Data.DataColumn
        
        Private columnpassword As Global.System.Data.DataColumn
        
        Private columnusertype As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "login"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property usernameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnusername
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property passwordColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpassword
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property usertypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnusertype
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As loginRow
            Get
                Return CType(Me.Rows(index),loginRow)
            End Get
        End Property
        
        Public Event loginRowChanging As loginRowChangeEventHandler
        
        Public Event loginRowChanged As loginRowChangeEventHandler
        
        Public Event loginRowDeleting As loginRowChangeEventHandler
        
        Public Event loginRowDeleted As loginRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddloginRow(ByVal row As loginRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddloginRow(ByVal username As String, ByVal password As String, ByVal usertype As String) As loginRow
            Dim rowloginRow As loginRow = CType(Me.NewRow,loginRow)
            Dim columnValuesArray() As Object = New Object() {username, password, usertype}
            rowloginRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowloginRow)
            Return rowloginRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As loginDataTable = CType(MyBase.Clone,loginDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New loginDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnusername = MyBase.Columns("username")
            Me.columnpassword = MyBase.Columns("password")
            Me.columnusertype = MyBase.Columns("usertype")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnusername = New Global.System.Data.DataColumn("username", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnusername)
            Me.columnpassword = New Global.System.Data.DataColumn("password", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpassword)
            Me.columnusertype = New Global.System.Data.DataColumn("usertype", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnusertype)
            Me.columnusername.MaxLength = 50
            Me.columnpassword.MaxLength = 50
            Me.columnusertype.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewloginRow() As loginRow
            Return CType(Me.NewRow,loginRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New loginRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(loginRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.loginRowChangedEvent) Is Nothing) Then
                RaiseEvent loginRowChanged(Me, New loginRowChangeEvent(CType(e.Row,loginRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.loginRowChangingEvent) Is Nothing) Then
                RaiseEvent loginRowChanging(Me, New loginRowChangeEvent(CType(e.Row,loginRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.loginRowDeletedEvent) Is Nothing) Then
                RaiseEvent loginRowDeleted(Me, New loginRowChangeEvent(CType(e.Row,loginRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.loginRowDeletingEvent) Is Nothing) Then
                RaiseEvent loginRowDeleting(Me, New loginRowChangeEvent(CType(e.Row,loginRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveloginRow(ByVal row As loginRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As loginformDataSet13 = New loginformDataSet13
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "loginDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class login_1DataTable
        Inherits Global.System.Data.TypedTableBase(Of login_1Row)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnusername As Global.System.Data.DataColumn
        
        Private columnpassword As Global.System.Data.DataColumn
        
        Private columnusertype As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "login_1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property usernameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnusername
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property passwordColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpassword
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property usertypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnusertype
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As login_1Row
            Get
                Return CType(Me.Rows(index),login_1Row)
            End Get
        End Property
        
        Public Event login_1RowChanging As login_1RowChangeEventHandler
        
        Public Event login_1RowChanged As login_1RowChangeEventHandler
        
        Public Event login_1RowDeleting As login_1RowChangeEventHandler
        
        Public Event login_1RowDeleted As login_1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addlogin_1Row(ByVal row As login_1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addlogin_1Row(ByVal username As String, ByVal password As String, ByVal usertype As String) As login_1Row
            Dim rowlogin_1Row As login_1Row = CType(Me.NewRow,login_1Row)
            Dim columnValuesArray() As Object = New Object() {Nothing, username, password, usertype}
            rowlogin_1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowlogin_1Row)
            Return rowlogin_1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As login_1DataTable = CType(MyBase.Clone,login_1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New login_1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnusername = MyBase.Columns("username")
            Me.columnpassword = MyBase.Columns("password")
            Me.columnusertype = MyBase.Columns("usertype")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnusername = New Global.System.Data.DataColumn("username", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnusername)
            Me.columnpassword = New Global.System.Data.DataColumn("password", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpassword)
            Me.columnusertype = New Global.System.Data.DataColumn("usertype", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnusertype)
            Me.columnid.AutoIncrement = true
            Me.columnid.AutoIncrementSeed = -1
            Me.columnid.AutoIncrementStep = -1
            Me.columnid.AllowDBNull = false
            Me.columnid.ReadOnly = true
            Me.columnusername.MaxLength = 50
            Me.columnpassword.MaxLength = 50
            Me.columnusertype.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newlogin_1Row() As login_1Row
            Return CType(Me.NewRow,login_1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New login_1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(login_1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.login_1RowChangedEvent) Is Nothing) Then
                RaiseEvent login_1RowChanged(Me, New login_1RowChangeEvent(CType(e.Row,login_1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.login_1RowChangingEvent) Is Nothing) Then
                RaiseEvent login_1RowChanging(Me, New login_1RowChangeEvent(CType(e.Row,login_1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.login_1RowDeletedEvent) Is Nothing) Then
                RaiseEvent login_1RowDeleted(Me, New login_1RowChangeEvent(CType(e.Row,login_1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.login_1RowDeletingEvent) Is Nothing) Then
                RaiseEvent login_1RowDeleting(Me, New login_1RowChangeEvent(CType(e.Row,login_1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removelogin_1Row(ByVal row As login_1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As loginformDataSet13 = New loginformDataSet13
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "login_1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Note_des_Réserves_ClientDataTable
        Inherits Global.System.Data.TypedTableBase(Of Note_des_Réserves_ClientRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnclient As Global.System.Data.DataColumn
        
        Private columnMode_passation As Global.System.Data.DataColumn
        
        Private columnprojet_contrat As Global.System.Data.DataColumn
        
        Private columnnote As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Note_des_Réserves_Client"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property clientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnclient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Mode_passationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMode_passation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property projet_contratColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprojet_contrat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property noteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnote
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Note_des_Réserves_ClientRow
            Get
                Return CType(Me.Rows(index),Note_des_Réserves_ClientRow)
            End Get
        End Property
        
        Public Event Note_des_Réserves_ClientRowChanging As Note_des_Réserves_ClientRowChangeEventHandler
        
        Public Event Note_des_Réserves_ClientRowChanged As Note_des_Réserves_ClientRowChangeEventHandler
        
        Public Event Note_des_Réserves_ClientRowDeleting As Note_des_Réserves_ClientRowChangeEventHandler
        
        Public Event Note_des_Réserves_ClientRowDeleted As Note_des_Réserves_ClientRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddNote_des_Réserves_ClientRow(ByVal row As Note_des_Réserves_ClientRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddNote_des_Réserves_ClientRow(ByVal client As String, ByVal Mode_passation As String, ByVal projet_contrat As String, ByVal note As String) As Note_des_Réserves_ClientRow
            Dim rowNote_des_Réserves_ClientRow As Note_des_Réserves_ClientRow = CType(Me.NewRow,Note_des_Réserves_ClientRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, client, Mode_passation, projet_contrat, note}
            rowNote_des_Réserves_ClientRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowNote_des_Réserves_ClientRow)
            Return rowNote_des_Réserves_ClientRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Note_des_Réserves_ClientDataTable = CType(MyBase.Clone,Note_des_Réserves_ClientDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Note_des_Réserves_ClientDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnclient = MyBase.Columns("client")
            Me.columnMode_passation = MyBase.Columns("Mode_passation")
            Me.columnprojet_contrat = MyBase.Columns("projet_contrat")
            Me.columnnote = MyBase.Columns("note")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnclient = New Global.System.Data.DataColumn("client", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnclient)
            Me.columnMode_passation = New Global.System.Data.DataColumn("Mode_passation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMode_passation)
            Me.columnprojet_contrat = New Global.System.Data.DataColumn("projet_contrat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprojet_contrat)
            Me.columnnote = New Global.System.Data.DataColumn("note", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnote)
            Me.columnid.AutoIncrement = true
            Me.columnid.AutoIncrementSeed = -1
            Me.columnid.AutoIncrementStep = -1
            Me.columnid.AllowDBNull = false
            Me.columnid.ReadOnly = true
            Me.columnclient.MaxLength = 50
            Me.columnMode_passation.MaxLength = 50
            Me.columnprojet_contrat.MaxLength = 50
            Me.columnnote.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewNote_des_Réserves_ClientRow() As Note_des_Réserves_ClientRow
            Return CType(Me.NewRow,Note_des_Réserves_ClientRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Note_des_Réserves_ClientRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Note_des_Réserves_ClientRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Note_des_Réserves_ClientRowChangedEvent) Is Nothing) Then
                RaiseEvent Note_des_Réserves_ClientRowChanged(Me, New Note_des_Réserves_ClientRowChangeEvent(CType(e.Row,Note_des_Réserves_ClientRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Note_des_Réserves_ClientRowChangingEvent) Is Nothing) Then
                RaiseEvent Note_des_Réserves_ClientRowChanging(Me, New Note_des_Réserves_ClientRowChangeEvent(CType(e.Row,Note_des_Réserves_ClientRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Note_des_Réserves_ClientRowDeletedEvent) Is Nothing) Then
                RaiseEvent Note_des_Réserves_ClientRowDeleted(Me, New Note_des_Réserves_ClientRowChangeEvent(CType(e.Row,Note_des_Réserves_ClientRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Note_des_Réserves_ClientRowDeletingEvent) Is Nothing) Then
                RaiseEvent Note_des_Réserves_ClientRowDeleting(Me, New Note_des_Réserves_ClientRowChangeEvent(CType(e.Row,Note_des_Réserves_ClientRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveNote_des_Réserves_ClientRow(ByVal row As Note_des_Réserves_ClientRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As loginformDataSet13 = New loginformDataSet13
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Note_des_Réserves_ClientDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ODSDataTable
        Inherits Global.System.Data.TypedTableBase(Of ODSRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnClient As Global.System.Data.DataColumn
        
        Private columnContrat_de_Réfferrence As Global.System.Data.DataColumn
        
        Private columnObjet_de_la_Demande As Global.System.Data.DataColumn
        
        Private columnMontant As Global.System.Data.DataColumn
        
        Private columnStructure As Global.System.Data.DataColumn
        
        Private columnDate_Signature As Global.System.Data.DataColumn
        
        Private columnRéfferrence As Global.System.Data.DataColumn
        
        Private columnFichier_PDF As Global.System.Data.DataColumn
        
        Private columnCommande As Global.System.Data.DataColumn
        
        Private columnDelai_Contractuelle As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ODS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Contrat_de_RéfferrenceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContrat_de_Réfferrence
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Objet_de_la_DemandeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObjet_de_la_Demande
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StructureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStructure
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Date_SignatureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDate_Signature
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RéfferrenceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRéfferrence
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fichier_PDFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFichier_PDF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommandeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCommande
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Delai_ContractuelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDelai_Contractuelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ODSRow
            Get
                Return CType(Me.Rows(index),ODSRow)
            End Get
        End Property
        
        Public Event ODSRowChanging As ODSRowChangeEventHandler
        
        Public Event ODSRowChanged As ODSRowChangeEventHandler
        
        Public Event ODSRowDeleting As ODSRowChangeEventHandler
        
        Public Event ODSRowDeleted As ODSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddODSRow(ByVal row As ODSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddODSRow(ByVal Client As String, ByVal Contrat_de_Réfferrence As String, ByVal Objet_de_la_Demande As String, ByVal Montant As String, ByVal _Structure As String, ByVal Date_Signature As Date, ByVal Réfferrence As String, ByVal Fichier_PDF As Object, ByVal Commande As String, ByVal Delai_Contractuelle As String) As ODSRow
            Dim rowODSRow As ODSRow = CType(Me.NewRow,ODSRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Client, Contrat_de_Réfferrence, Objet_de_la_Demande, Montant, _Structure, Date_Signature, Réfferrence, Fichier_PDF, Commande, Delai_Contractuelle}
            rowODSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowODSRow)
            Return rowODSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ODSDataTable = CType(MyBase.Clone,ODSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ODSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnClient = MyBase.Columns("Client")
            Me.columnContrat_de_Réfferrence = MyBase.Columns("Contrat_de_Réfferrence")
            Me.columnObjet_de_la_Demande = MyBase.Columns("Objet_de_la_Demande")
            Me.columnMontant = MyBase.Columns("Montant")
            Me.columnStructure = MyBase.Columns("Structure")
            Me.columnDate_Signature = MyBase.Columns("Date_Signature")
            Me.columnRéfferrence = MyBase.Columns("Réfferrence")
            Me.columnFichier_PDF = MyBase.Columns("Fichier_PDF")
            Me.columnCommande = MyBase.Columns("Commande")
            Me.columnDelai_Contractuelle = MyBase.Columns("Delai_Contractuelle")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnClient = New Global.System.Data.DataColumn("Client", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClient)
            Me.columnContrat_de_Réfferrence = New Global.System.Data.DataColumn("Contrat_de_Réfferrence", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContrat_de_Réfferrence)
            Me.columnObjet_de_la_Demande = New Global.System.Data.DataColumn("Objet_de_la_Demande", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObjet_de_la_Demande)
            Me.columnMontant = New Global.System.Data.DataColumn("Montant", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontant)
            Me.columnStructure = New Global.System.Data.DataColumn("Structure", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnStructure.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "StructureColumn")
            Me.columnStructure.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnStructure")
            Me.columnStructure.ExtendedProperties.Add("Generator_UserColumnName", "Structure")
            MyBase.Columns.Add(Me.columnStructure)
            Me.columnDate_Signature = New Global.System.Data.DataColumn("Date_Signature", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDate_Signature)
            Me.columnRéfferrence = New Global.System.Data.DataColumn("Réfferrence", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRéfferrence)
            Me.columnFichier_PDF = New Global.System.Data.DataColumn("Fichier_PDF", GetType(Object), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFichier_PDF)
            Me.columnCommande = New Global.System.Data.DataColumn("Commande", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCommande)
            Me.columnDelai_Contractuelle = New Global.System.Data.DataColumn("Delai_Contractuelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDelai_Contractuelle)
            Me.columnid.AutoIncrement = true
            Me.columnid.AutoIncrementSeed = -1
            Me.columnid.AutoIncrementStep = -1
            Me.columnid.AllowDBNull = false
            Me.columnid.ReadOnly = true
            Me.columnClient.MaxLength = 50
            Me.columnContrat_de_Réfferrence.MaxLength = 50
            Me.columnObjet_de_la_Demande.MaxLength = 50
            Me.columnMontant.MaxLength = 50
            Me.columnStructure.MaxLength = 50
            Me.columnRéfferrence.MaxLength = 50
            Me.columnCommande.MaxLength = 255
            Me.columnDelai_Contractuelle.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewODSRow() As ODSRow
            Return CType(Me.NewRow,ODSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ODSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ODSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ODSRowChangedEvent) Is Nothing) Then
                RaiseEvent ODSRowChanged(Me, New ODSRowChangeEvent(CType(e.Row,ODSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ODSRowChangingEvent) Is Nothing) Then
                RaiseEvent ODSRowChanging(Me, New ODSRowChangeEvent(CType(e.Row,ODSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ODSRowDeletedEvent) Is Nothing) Then
                RaiseEvent ODSRowDeleted(Me, New ODSRowChangeEvent(CType(e.Row,ODSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ODSRowDeletingEvent) Is Nothing) Then
                RaiseEvent ODSRowDeleting(Me, New ODSRowChangeEvent(CType(e.Row,ODSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveODSRow(ByVal row As ODSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As loginformDataSet13 = New loginformDataSet13
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ODSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ODS_APR_PROGDataTable
        Inherits Global.System.Data.TypedTableBase(Of ODS_APR_PROGRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnClient As Global.System.Data.DataColumn
        
        Private columnContrat_de_Réfferrence As Global.System.Data.DataColumn
        
        Private columnObjet_de_la_Demande As Global.System.Data.DataColumn
        
        Private columnMontant As Global.System.Data.DataColumn
        
        Private columnStructure As Global.System.Data.DataColumn
        
        Private columnDate_Signature As Global.System.Data.DataColumn
        
        Private columnRéfferrence As Global.System.Data.DataColumn
        
        Private columnFichier_PDF As Global.System.Data.DataColumn
        
        Private columnCommande As Global.System.Data.DataColumn
        
        Private columnDelai_Contractuelle As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ODS_APR_PROG"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Contrat_de_RéfferrenceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContrat_de_Réfferrence
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Objet_de_la_DemandeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObjet_de_la_Demande
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StructureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStructure
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Date_SignatureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDate_Signature
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RéfferrenceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRéfferrence
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fichier_PDFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFichier_PDF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommandeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCommande
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Delai_ContractuelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDelai_Contractuelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ODS_APR_PROGRow
            Get
                Return CType(Me.Rows(index),ODS_APR_PROGRow)
            End Get
        End Property
        
        Public Event ODS_APR_PROGRowChanging As ODS_APR_PROGRowChangeEventHandler
        
        Public Event ODS_APR_PROGRowChanged As ODS_APR_PROGRowChangeEventHandler
        
        Public Event ODS_APR_PROGRowDeleting As ODS_APR_PROGRowChangeEventHandler
        
        Public Event ODS_APR_PROGRowDeleted As ODS_APR_PROGRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddODS_APR_PROGRow(ByVal row As ODS_APR_PROGRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddODS_APR_PROGRow(ByVal id As Integer, ByVal Client As String, ByVal Contrat_de_Réfferrence As String, ByVal Objet_de_la_Demande As String, ByVal Montant As String, ByVal _Structure As String, ByVal Date_Signature As Date, ByVal Réfferrence As String, ByVal Fichier_PDF As Object, ByVal Commande As String, ByVal Delai_Contractuelle As String) As ODS_APR_PROGRow
            Dim rowODS_APR_PROGRow As ODS_APR_PROGRow = CType(Me.NewRow,ODS_APR_PROGRow)
            Dim columnValuesArray() As Object = New Object() {id, Client, Contrat_de_Réfferrence, Objet_de_la_Demande, Montant, _Structure, Date_Signature, Réfferrence, Fichier_PDF, Commande, Delai_Contractuelle}
            rowODS_APR_PROGRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowODS_APR_PROGRow)
            Return rowODS_APR_PROGRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ODS_APR_PROGDataTable = CType(MyBase.Clone,ODS_APR_PROGDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ODS_APR_PROGDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnClient = MyBase.Columns("Client")
            Me.columnContrat_de_Réfferrence = MyBase.Columns("Contrat_de_Réfferrence")
            Me.columnObjet_de_la_Demande = MyBase.Columns("Objet_de_la_Demande")
            Me.columnMontant = MyBase.Columns("Montant")
            Me.columnStructure = MyBase.Columns("Structure")
            Me.columnDate_Signature = MyBase.Columns("Date_Signature")
            Me.columnRéfferrence = MyBase.Columns("Réfferrence")
            Me.columnFichier_PDF = MyBase.Columns("Fichier_PDF")
            Me.columnCommande = MyBase.Columns("Commande")
            Me.columnDelai_Contractuelle = MyBase.Columns("Delai_Contractuelle")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnClient = New Global.System.Data.DataColumn("Client", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClient)
            Me.columnContrat_de_Réfferrence = New Global.System.Data.DataColumn("Contrat_de_Réfferrence", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContrat_de_Réfferrence)
            Me.columnObjet_de_la_Demande = New Global.System.Data.DataColumn("Objet_de_la_Demande", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObjet_de_la_Demande)
            Me.columnMontant = New Global.System.Data.DataColumn("Montant", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontant)
            Me.columnStructure = New Global.System.Data.DataColumn("Structure", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnStructure.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "StructureColumn")
            Me.columnStructure.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnStructure")
            Me.columnStructure.ExtendedProperties.Add("Generator_UserColumnName", "Structure")
            MyBase.Columns.Add(Me.columnStructure)
            Me.columnDate_Signature = New Global.System.Data.DataColumn("Date_Signature", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDate_Signature)
            Me.columnRéfferrence = New Global.System.Data.DataColumn("Réfferrence", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRéfferrence)
            Me.columnFichier_PDF = New Global.System.Data.DataColumn("Fichier_PDF", GetType(Object), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFichier_PDF)
            Me.columnCommande = New Global.System.Data.DataColumn("Commande", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCommande)
            Me.columnDelai_Contractuelle = New Global.System.Data.DataColumn("Delai_Contractuelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDelai_Contractuelle)
            Me.columnid.AllowDBNull = false
            Me.columnClient.MaxLength = 50
            Me.columnContrat_de_Réfferrence.MaxLength = 50
            Me.columnObjet_de_la_Demande.MaxLength = 50
            Me.columnMontant.MaxLength = 50
            Me.columnStructure.MaxLength = 50
            Me.columnRéfferrence.MaxLength = 50
            Me.columnCommande.MaxLength = 255
            Me.columnDelai_Contractuelle.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewODS_APR_PROGRow() As ODS_APR_PROGRow
            Return CType(Me.NewRow,ODS_APR_PROGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ODS_APR_PROGRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ODS_APR_PROGRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ODS_APR_PROGRowChangedEvent) Is Nothing) Then
                RaiseEvent ODS_APR_PROGRowChanged(Me, New ODS_APR_PROGRowChangeEvent(CType(e.Row,ODS_APR_PROGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ODS_APR_PROGRowChangingEvent) Is Nothing) Then
                RaiseEvent ODS_APR_PROGRowChanging(Me, New ODS_APR_PROGRowChangeEvent(CType(e.Row,ODS_APR_PROGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ODS_APR_PROGRowDeletedEvent) Is Nothing) Then
                RaiseEvent ODS_APR_PROGRowDeleted(Me, New ODS_APR_PROGRowChangeEvent(CType(e.Row,ODS_APR_PROGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ODS_APR_PROGRowDeletingEvent) Is Nothing) Then
                RaiseEvent ODS_APR_PROGRowDeleting(Me, New ODS_APR_PROGRowChangeEvent(CType(e.Row,ODS_APR_PROGRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveODS_APR_PROGRow(ByVal row As ODS_APR_PROGRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As loginformDataSet13 = New loginformDataSet13
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ODS_APR_PROGDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class projet_du_contratDataTable
        Inherits Global.System.Data.TypedTableBase(Of projet_du_contratRow)
        
        Private columndateArriver As Global.System.Data.DataColumn
        
        Private columnStructure As Global.System.Data.DataColumn
        
        Private columncodeStructure As Global.System.Data.DataColumn
        
        Private columntypeContrat As Global.System.Data.DataColumn
        
        Private columnRéferrence As Global.System.Data.DataColumn
        
        Private columnObjet_De_Demande As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "projet_du_contrat"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dateArriverColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndateArriver
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StructureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStructure
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codeStructureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodeStructure
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property typeContratColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntypeContrat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RéferrenceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRéferrence
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Objet_De_DemandeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObjet_De_Demande
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As projet_du_contratRow
            Get
                Return CType(Me.Rows(index),projet_du_contratRow)
            End Get
        End Property
        
        Public Event projet_du_contratRowChanging As projet_du_contratRowChangeEventHandler
        
        Public Event projet_du_contratRowChanged As projet_du_contratRowChangeEventHandler
        
        Public Event projet_du_contratRowDeleting As projet_du_contratRowChangeEventHandler
        
        Public Event projet_du_contratRowDeleted As projet_du_contratRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addprojet_du_contratRow(ByVal row As projet_du_contratRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addprojet_du_contratRow(ByVal dateArriver As Date, ByVal _Structure As String, ByVal codeStructure As String, ByVal typeContrat As String, ByVal Réferrence As String, ByVal Objet_De_Demande As String) As projet_du_contratRow
            Dim rowprojet_du_contratRow As projet_du_contratRow = CType(Me.NewRow,projet_du_contratRow)
            Dim columnValuesArray() As Object = New Object() {dateArriver, _Structure, codeStructure, typeContrat, Réferrence, Objet_De_Demande}
            rowprojet_du_contratRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowprojet_du_contratRow)
            Return rowprojet_du_contratRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As projet_du_contratDataTable = CType(MyBase.Clone,projet_du_contratDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New projet_du_contratDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columndateArriver = MyBase.Columns("dateArriver")
            Me.columnStructure = MyBase.Columns("Structure")
            Me.columncodeStructure = MyBase.Columns("codeStructure")
            Me.columntypeContrat = MyBase.Columns("typeContrat")
            Me.columnRéferrence = MyBase.Columns("Réferrence")
            Me.columnObjet_De_Demande = MyBase.Columns("Objet_De_Demande")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columndateArriver = New Global.System.Data.DataColumn("dateArriver", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndateArriver)
            Me.columnStructure = New Global.System.Data.DataColumn("Structure", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnStructure.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "StructureColumn")
            Me.columnStructure.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnStructure")
            Me.columnStructure.ExtendedProperties.Add("Generator_UserColumnName", "Structure")
            MyBase.Columns.Add(Me.columnStructure)
            Me.columncodeStructure = New Global.System.Data.DataColumn("codeStructure", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodeStructure)
            Me.columntypeContrat = New Global.System.Data.DataColumn("typeContrat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntypeContrat)
            Me.columnRéferrence = New Global.System.Data.DataColumn("Réferrence", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRéferrence)
            Me.columnObjet_De_Demande = New Global.System.Data.DataColumn("Objet_De_Demande", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObjet_De_Demande)
            Me.columnStructure.MaxLength = 50
            Me.columncodeStructure.MaxLength = 50
            Me.columntypeContrat.MaxLength = 50
            Me.columnRéferrence.MaxLength = 1
            Me.columnObjet_De_Demande.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newprojet_du_contratRow() As projet_du_contratRow
            Return CType(Me.NewRow,projet_du_contratRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New projet_du_contratRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(projet_du_contratRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.projet_du_contratRowChangedEvent) Is Nothing) Then
                RaiseEvent projet_du_contratRowChanged(Me, New projet_du_contratRowChangeEvent(CType(e.Row,projet_du_contratRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.projet_du_contratRowChangingEvent) Is Nothing) Then
                RaiseEvent projet_du_contratRowChanging(Me, New projet_du_contratRowChangeEvent(CType(e.Row,projet_du_contratRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.projet_du_contratRowDeletedEvent) Is Nothing) Then
                RaiseEvent projet_du_contratRowDeleted(Me, New projet_du_contratRowChangeEvent(CType(e.Row,projet_du_contratRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.projet_du_contratRowDeletingEvent) Is Nothing) Then
                RaiseEvent projet_du_contratRowDeleting(Me, New projet_du_contratRowChangeEvent(CType(e.Row,projet_du_contratRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removeprojet_du_contratRow(ByVal row As projet_du_contratRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As loginformDataSet13 = New loginformDataSet13
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "projet_du_contratDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Protocole_Accord_ClientDataTable
        Inherits Global.System.Data.TypedTableBase(Of Protocole_Accord_ClientRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnClient As Global.System.Data.DataColumn
        
        Private columnMontant As Global.System.Data.DataColumn
        
        Private columnDate_Signature As Global.System.Data.DataColumn
        
        Private columnRéfferrence As Global.System.Data.DataColumn
        
        Private columnObjet_de_la_demande As Global.System.Data.DataColumn
        
        Private columnMode_de_passation As Global.System.Data.DataColumn
        
        Private columnDurée_contrat As Global.System.Data.DataColumn
        
        Private columnType_contrat As Global.System.Data.DataColumn
        
        Private columnFichier_PDF As Global.System.Data.DataColumn
        
        Private columnCommande As Global.System.Data.DataColumn
        
        Private columnDelai_Contractuelle As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Protocole_Accord_Client"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Date_SignatureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDate_Signature
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RéfferrenceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRéfferrence
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Objet_de_la_demandeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObjet_de_la_demande
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Mode_de_passationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMode_de_passation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Durée_contratColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDurée_contrat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Type_contratColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType_contrat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fichier_PDFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFichier_PDF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommandeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCommande
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Delai_ContractuelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDelai_Contractuelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Protocole_Accord_ClientRow
            Get
                Return CType(Me.Rows(index),Protocole_Accord_ClientRow)
            End Get
        End Property
        
        Public Event Protocole_Accord_ClientRowChanging As Protocole_Accord_ClientRowChangeEventHandler
        
        Public Event Protocole_Accord_ClientRowChanged As Protocole_Accord_ClientRowChangeEventHandler
        
        Public Event Protocole_Accord_ClientRowDeleting As Protocole_Accord_ClientRowChangeEventHandler
        
        Public Event Protocole_Accord_ClientRowDeleted As Protocole_Accord_ClientRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProtocole_Accord_ClientRow(ByVal row As Protocole_Accord_ClientRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProtocole_Accord_ClientRow(ByVal ID As Integer, ByVal Client As String, ByVal Montant As String, ByVal Date_Signature As Date, ByVal Réfferrence As String, ByVal Objet_de_la_demande As String, ByVal Mode_de_passation As String, ByVal Durée_contrat As String, ByVal Type_contrat As String, ByVal Fichier_PDF As Object, ByVal Commande As String, ByVal Delai_Contractuelle As String) As Protocole_Accord_ClientRow
            Dim rowProtocole_Accord_ClientRow As Protocole_Accord_ClientRow = CType(Me.NewRow,Protocole_Accord_ClientRow)
            Dim columnValuesArray() As Object = New Object() {ID, Client, Montant, Date_Signature, Réfferrence, Objet_de_la_demande, Mode_de_passation, Durée_contrat, Type_contrat, Fichier_PDF, Commande, Delai_Contractuelle}
            rowProtocole_Accord_ClientRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowProtocole_Accord_ClientRow)
            Return rowProtocole_Accord_ClientRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Protocole_Accord_ClientDataTable = CType(MyBase.Clone,Protocole_Accord_ClientDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Protocole_Accord_ClientDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnClient = MyBase.Columns("Client")
            Me.columnMontant = MyBase.Columns("Montant")
            Me.columnDate_Signature = MyBase.Columns("Date_Signature")
            Me.columnRéfferrence = MyBase.Columns("Réfferrence")
            Me.columnObjet_de_la_demande = MyBase.Columns("Objet_de_la_demande")
            Me.columnMode_de_passation = MyBase.Columns("Mode_de_passation")
            Me.columnDurée_contrat = MyBase.Columns("Durée_contrat")
            Me.columnType_contrat = MyBase.Columns("Type_contrat")
            Me.columnFichier_PDF = MyBase.Columns("Fichier_PDF")
            Me.columnCommande = MyBase.Columns("Commande")
            Me.columnDelai_Contractuelle = MyBase.Columns("Delai_Contractuelle")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnClient = New Global.System.Data.DataColumn("Client", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClient)
            Me.columnMontant = New Global.System.Data.DataColumn("Montant", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontant)
            Me.columnDate_Signature = New Global.System.Data.DataColumn("Date_Signature", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDate_Signature)
            Me.columnRéfferrence = New Global.System.Data.DataColumn("Réfferrence", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRéfferrence)
            Me.columnObjet_de_la_demande = New Global.System.Data.DataColumn("Objet_de_la_demande", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObjet_de_la_demande)
            Me.columnMode_de_passation = New Global.System.Data.DataColumn("Mode_de_passation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMode_de_passation)
            Me.columnDurée_contrat = New Global.System.Data.DataColumn("Durée_contrat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDurée_contrat)
            Me.columnType_contrat = New Global.System.Data.DataColumn("Type_contrat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType_contrat)
            Me.columnFichier_PDF = New Global.System.Data.DataColumn("Fichier_PDF", GetType(Object), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFichier_PDF)
            Me.columnCommande = New Global.System.Data.DataColumn("Commande", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCommande)
            Me.columnDelai_Contractuelle = New Global.System.Data.DataColumn("Delai_Contractuelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDelai_Contractuelle)
            Me.columnID.AllowDBNull = false
            Me.columnClient.MaxLength = 50
            Me.columnMontant.MaxLength = 50
            Me.columnRéfferrence.MaxLength = 50
            Me.columnObjet_de_la_demande.MaxLength = 50
            Me.columnMode_de_passation.MaxLength = 50
            Me.columnDurée_contrat.MaxLength = 50
            Me.columnType_contrat.MaxLength = 50
            Me.columnCommande.MaxLength = 255
            Me.columnDelai_Contractuelle.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProtocole_Accord_ClientRow() As Protocole_Accord_ClientRow
            Return CType(Me.NewRow,Protocole_Accord_ClientRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Protocole_Accord_ClientRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Protocole_Accord_ClientRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Protocole_Accord_ClientRowChangedEvent) Is Nothing) Then
                RaiseEvent Protocole_Accord_ClientRowChanged(Me, New Protocole_Accord_ClientRowChangeEvent(CType(e.Row,Protocole_Accord_ClientRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Protocole_Accord_ClientRowChangingEvent) Is Nothing) Then
                RaiseEvent Protocole_Accord_ClientRowChanging(Me, New Protocole_Accord_ClientRowChangeEvent(CType(e.Row,Protocole_Accord_ClientRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Protocole_Accord_ClientRowDeletedEvent) Is Nothing) Then
                RaiseEvent Protocole_Accord_ClientRowDeleted(Me, New Protocole_Accord_ClientRowChangeEvent(CType(e.Row,Protocole_Accord_ClientRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Protocole_Accord_ClientRowDeletingEvent) Is Nothing) Then
                RaiseEvent Protocole_Accord_ClientRowDeleting(Me, New Protocole_Accord_ClientRowChangeEvent(CType(e.Row,Protocole_Accord_ClientRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProtocole_Accord_ClientRow(ByVal row As Protocole_Accord_ClientRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As loginformDataSet13 = New loginformDataSet13
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Protocole_Accord_ClientDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Protocole_Accord_FournisseurDataTable
        Inherits Global.System.Data.TypedTableBase(Of Protocole_Accord_FournisseurRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnClient As Global.System.Data.DataColumn
        
        Private columnMontant As Global.System.Data.DataColumn
        
        Private columnDate_Signature As Global.System.Data.DataColumn
        
        Private columnRéfferrence As Global.System.Data.DataColumn
        
        Private columnObjet_de_la_demande As Global.System.Data.DataColumn
        
        Private columnMode_de_passation As Global.System.Data.DataColumn
        
        Private columnDurée_contrat As Global.System.Data.DataColumn
        
        Private columnType_contrat As Global.System.Data.DataColumn
        
        Private columnFichier_PDF As Global.System.Data.DataColumn
        
        Private columnCommande As Global.System.Data.DataColumn
        
        Private columnDelai_Contractuelle As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Protocole_Accord_Fournisseur"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Date_SignatureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDate_Signature
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RéfferrenceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRéfferrence
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Objet_de_la_demandeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObjet_de_la_demande
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Mode_de_passationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMode_de_passation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Durée_contratColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDurée_contrat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Type_contratColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType_contrat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fichier_PDFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFichier_PDF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommandeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCommande
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Delai_ContractuelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDelai_Contractuelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Protocole_Accord_FournisseurRow
            Get
                Return CType(Me.Rows(index),Protocole_Accord_FournisseurRow)
            End Get
        End Property
        
        Public Event Protocole_Accord_FournisseurRowChanging As Protocole_Accord_FournisseurRowChangeEventHandler
        
        Public Event Protocole_Accord_FournisseurRowChanged As Protocole_Accord_FournisseurRowChangeEventHandler
        
        Public Event Protocole_Accord_FournisseurRowDeleting As Protocole_Accord_FournisseurRowChangeEventHandler
        
        Public Event Protocole_Accord_FournisseurRowDeleted As Protocole_Accord_FournisseurRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProtocole_Accord_FournisseurRow(ByVal row As Protocole_Accord_FournisseurRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProtocole_Accord_FournisseurRow(ByVal ID As Integer, ByVal Client As String, ByVal Montant As String, ByVal Date_Signature As Date, ByVal Réfferrence As String, ByVal Objet_de_la_demande As String, ByVal Mode_de_passation As String, ByVal Durée_contrat As String, ByVal Type_contrat As String, ByVal Fichier_PDF As Object, ByVal Commande As String, ByVal Delai_Contractuelle As String) As Protocole_Accord_FournisseurRow
            Dim rowProtocole_Accord_FournisseurRow As Protocole_Accord_FournisseurRow = CType(Me.NewRow,Protocole_Accord_FournisseurRow)
            Dim columnValuesArray() As Object = New Object() {ID, Client, Montant, Date_Signature, Réfferrence, Objet_de_la_demande, Mode_de_passation, Durée_contrat, Type_contrat, Fichier_PDF, Commande, Delai_Contractuelle}
            rowProtocole_Accord_FournisseurRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowProtocole_Accord_FournisseurRow)
            Return rowProtocole_Accord_FournisseurRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Protocole_Accord_FournisseurDataTable = CType(MyBase.Clone,Protocole_Accord_FournisseurDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Protocole_Accord_FournisseurDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnClient = MyBase.Columns("Client")
            Me.columnMontant = MyBase.Columns("Montant")
            Me.columnDate_Signature = MyBase.Columns("Date_Signature")
            Me.columnRéfferrence = MyBase.Columns("Réfferrence")
            Me.columnObjet_de_la_demande = MyBase.Columns("Objet_de_la_demande")
            Me.columnMode_de_passation = MyBase.Columns("Mode_de_passation")
            Me.columnDurée_contrat = MyBase.Columns("Durée_contrat")
            Me.columnType_contrat = MyBase.Columns("Type_contrat")
            Me.columnFichier_PDF = MyBase.Columns("Fichier_PDF")
            Me.columnCommande = MyBase.Columns("Commande")
            Me.columnDelai_Contractuelle = MyBase.Columns("Delai_Contractuelle")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnClient = New Global.System.Data.DataColumn("Client", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClient)
            Me.columnMontant = New Global.System.Data.DataColumn("Montant", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontant)
            Me.columnDate_Signature = New Global.System.Data.DataColumn("Date_Signature", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDate_Signature)
            Me.columnRéfferrence = New Global.System.Data.DataColumn("Réfferrence", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRéfferrence)
            Me.columnObjet_de_la_demande = New Global.System.Data.DataColumn("Objet_de_la_demande", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObjet_de_la_demande)
            Me.columnMode_de_passation = New Global.System.Data.DataColumn("Mode_de_passation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMode_de_passation)
            Me.columnDurée_contrat = New Global.System.Data.DataColumn("Durée_contrat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDurée_contrat)
            Me.columnType_contrat = New Global.System.Data.DataColumn("Type_contrat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType_contrat)
            Me.columnFichier_PDF = New Global.System.Data.DataColumn("Fichier_PDF", GetType(Object), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFichier_PDF)
            Me.columnCommande = New Global.System.Data.DataColumn("Commande", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCommande)
            Me.columnDelai_Contractuelle = New Global.System.Data.DataColumn("Delai_Contractuelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDelai_Contractuelle)
            Me.columnID.AllowDBNull = false
            Me.columnClient.MaxLength = 50
            Me.columnMontant.MaxLength = 50
            Me.columnRéfferrence.MaxLength = 50
            Me.columnObjet_de_la_demande.MaxLength = 50
            Me.columnMode_de_passation.MaxLength = 50
            Me.columnDurée_contrat.MaxLength = 50
            Me.columnType_contrat.MaxLength = 50
            Me.columnCommande.MaxLength = 255
            Me.columnDelai_Contractuelle.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProtocole_Accord_FournisseurRow() As Protocole_Accord_FournisseurRow
            Return CType(Me.NewRow,Protocole_Accord_FournisseurRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Protocole_Accord_FournisseurRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Protocole_Accord_FournisseurRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Protocole_Accord_FournisseurRowChangedEvent) Is Nothing) Then
                RaiseEvent Protocole_Accord_FournisseurRowChanged(Me, New Protocole_Accord_FournisseurRowChangeEvent(CType(e.Row,Protocole_Accord_FournisseurRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Protocole_Accord_FournisseurRowChangingEvent) Is Nothing) Then
                RaiseEvent Protocole_Accord_FournisseurRowChanging(Me, New Protocole_Accord_FournisseurRowChangeEvent(CType(e.Row,Protocole_Accord_FournisseurRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Protocole_Accord_FournisseurRowDeletedEvent) Is Nothing) Then
                RaiseEvent Protocole_Accord_FournisseurRowDeleted(Me, New Protocole_Accord_FournisseurRowChangeEvent(CType(e.Row,Protocole_Accord_FournisseurRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Protocole_Accord_FournisseurRowDeletingEvent) Is Nothing) Then
                RaiseEvent Protocole_Accord_FournisseurRowDeleting(Me, New Protocole_Accord_FournisseurRowChangeEvent(CType(e.Row,Protocole_Accord_FournisseurRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProtocole_Accord_FournisseurRow(ByVal row As Protocole_Accord_FournisseurRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As loginformDataSet13 = New loginformDataSet13
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Protocole_Accord_FournisseurDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Table_ContratDataTable
        Inherits Global.System.Data.TypedTableBase(Of Table_ContratRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnClient As Global.System.Data.DataColumn
        
        Private columnMontant As Global.System.Data.DataColumn
        
        Private columnDate_Signature As Global.System.Data.DataColumn
        
        Private columnRéfferrence As Global.System.Data.DataColumn
        
        Private columnObjet_de_la_demande As Global.System.Data.DataColumn
        
        Private columnMode_de_passation As Global.System.Data.DataColumn
        
        Private columnDurée_contrat As Global.System.Data.DataColumn
        
        Private columnType_contrat As Global.System.Data.DataColumn
        
        Private columnFichier_PDF As Global.System.Data.DataColumn
        
        Private columnCommande As Global.System.Data.DataColumn
        
        Private columnDelai_Contractuelle As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Table_Contrat"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Date_SignatureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDate_Signature
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RéfferrenceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRéfferrence
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Objet_de_la_demandeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObjet_de_la_demande
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Mode_de_passationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMode_de_passation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Durée_contratColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDurée_contrat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Type_contratColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType_contrat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fichier_PDFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFichier_PDF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommandeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCommande
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Delai_ContractuelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDelai_Contractuelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Table_ContratRow
            Get
                Return CType(Me.Rows(index),Table_ContratRow)
            End Get
        End Property
        
        Public Event Table_ContratRowChanging As Table_ContratRowChangeEventHandler
        
        Public Event Table_ContratRowChanged As Table_ContratRowChangeEventHandler
        
        Public Event Table_ContratRowDeleting As Table_ContratRowChangeEventHandler
        
        Public Event Table_ContratRowDeleted As Table_ContratRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTable_ContratRow(ByVal row As Table_ContratRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTable_ContratRow(ByVal Client As String, ByVal Montant As String, ByVal Date_Signature As Date, ByVal Réfferrence As String, ByVal Objet_de_la_demande As String, ByVal Mode_de_passation As String, ByVal Durée_contrat As String, ByVal Type_contrat As String, ByVal Fichier_PDF As Object, ByVal Commande As String, ByVal Delai_Contractuelle As String) As Table_ContratRow
            Dim rowTable_ContratRow As Table_ContratRow = CType(Me.NewRow,Table_ContratRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Client, Montant, Date_Signature, Réfferrence, Objet_de_la_demande, Mode_de_passation, Durée_contrat, Type_contrat, Fichier_PDF, Commande, Delai_Contractuelle}
            rowTable_ContratRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTable_ContratRow)
            Return rowTable_ContratRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Table_ContratDataTable = CType(MyBase.Clone,Table_ContratDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Table_ContratDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnClient = MyBase.Columns("Client")
            Me.columnMontant = MyBase.Columns("Montant")
            Me.columnDate_Signature = MyBase.Columns("Date_Signature")
            Me.columnRéfferrence = MyBase.Columns("Réfferrence")
            Me.columnObjet_de_la_demande = MyBase.Columns("Objet_de_la_demande")
            Me.columnMode_de_passation = MyBase.Columns("Mode_de_passation")
            Me.columnDurée_contrat = MyBase.Columns("Durée_contrat")
            Me.columnType_contrat = MyBase.Columns("Type_contrat")
            Me.columnFichier_PDF = MyBase.Columns("Fichier_PDF")
            Me.columnCommande = MyBase.Columns("Commande")
            Me.columnDelai_Contractuelle = MyBase.Columns("Delai_Contractuelle")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnClient = New Global.System.Data.DataColumn("Client", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClient)
            Me.columnMontant = New Global.System.Data.DataColumn("Montant", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontant)
            Me.columnDate_Signature = New Global.System.Data.DataColumn("Date_Signature", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDate_Signature)
            Me.columnRéfferrence = New Global.System.Data.DataColumn("Réfferrence", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRéfferrence)
            Me.columnObjet_de_la_demande = New Global.System.Data.DataColumn("Objet_de_la_demande", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObjet_de_la_demande)
            Me.columnMode_de_passation = New Global.System.Data.DataColumn("Mode_de_passation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMode_de_passation)
            Me.columnDurée_contrat = New Global.System.Data.DataColumn("Durée_contrat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDurée_contrat)
            Me.columnType_contrat = New Global.System.Data.DataColumn("Type_contrat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType_contrat)
            Me.columnFichier_PDF = New Global.System.Data.DataColumn("Fichier_PDF", GetType(Object), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFichier_PDF)
            Me.columnCommande = New Global.System.Data.DataColumn("Commande", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCommande)
            Me.columnDelai_Contractuelle = New Global.System.Data.DataColumn("Delai_Contractuelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDelai_Contractuelle)
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnClient.MaxLength = 50
            Me.columnMontant.MaxLength = 50
            Me.columnRéfferrence.MaxLength = 50
            Me.columnObjet_de_la_demande.MaxLength = 50
            Me.columnMode_de_passation.MaxLength = 50
            Me.columnDurée_contrat.MaxLength = 50
            Me.columnType_contrat.MaxLength = 50
            Me.columnCommande.MaxLength = 255
            Me.columnDelai_Contractuelle.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTable_ContratRow() As Table_ContratRow
            Return CType(Me.NewRow,Table_ContratRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Table_ContratRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Table_ContratRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Table_ContratRowChangedEvent) Is Nothing) Then
                RaiseEvent Table_ContratRowChanged(Me, New Table_ContratRowChangeEvent(CType(e.Row,Table_ContratRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Table_ContratRowChangingEvent) Is Nothing) Then
                RaiseEvent Table_ContratRowChanging(Me, New Table_ContratRowChangeEvent(CType(e.Row,Table_ContratRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Table_ContratRowDeletedEvent) Is Nothing) Then
                RaiseEvent Table_ContratRowDeleted(Me, New Table_ContratRowChangeEvent(CType(e.Row,Table_ContratRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Table_ContratRowDeletingEvent) Is Nothing) Then
                RaiseEvent Table_ContratRowDeleting(Me, New Table_ContratRowChangeEvent(CType(e.Row,Table_ContratRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTable_ContratRow(ByVal row As Table_ContratRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As loginformDataSet13 = New loginformDataSet13
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Table_ContratDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Validation_contratDataTable
        Inherits Global.System.Data.TypedTableBase(Of Validation_contratRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnclient As Global.System.Data.DataColumn
        
        Private columndurée_contrat As Global.System.Data.DataColumn
        
        Private columnrefference As Global.System.Data.DataColumn
        
        Private columndate_signature As Global.System.Data.DataColumn
        
        Private columnmode_passation As Global.System.Data.DataColumn
        
        Private columntype_contrat As Global.System.Data.DataColumn
        
        Private columnmontant As Global.System.Data.DataColumn
        
        Private columnObjet_de_la_demande As Global.System.Data.DataColumn
        
        Private columnDate_validation As Global.System.Data.DataColumn
        
        Private columnDate_Retour As Global.System.Data.DataColumn
        
        Private columnFichier_PDF As Global.System.Data.DataColumn
        
        Private columnCommande As Global.System.Data.DataColumn
        
        Private columnDelai_Contractuelle As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Validation_contrat"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property clientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnclient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property durée_contratColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndurée_contrat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property refferenceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrefference
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property date_signatureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndate_signature
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mode_passationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmode_passation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property type_contratColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntype_contrat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmontant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Objet_de_la_demandeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObjet_de_la_demande
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Date_validationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDate_validation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Date_RetourColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDate_Retour
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fichier_PDFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFichier_PDF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommandeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCommande
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Delai_ContractuelleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDelai_Contractuelle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Validation_contratRow
            Get
                Return CType(Me.Rows(index),Validation_contratRow)
            End Get
        End Property
        
        Public Event Validation_contratRowChanging As Validation_contratRowChangeEventHandler
        
        Public Event Validation_contratRowChanged As Validation_contratRowChangeEventHandler
        
        Public Event Validation_contratRowDeleting As Validation_contratRowChangeEventHandler
        
        Public Event Validation_contratRowDeleted As Validation_contratRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddValidation_contratRow(ByVal row As Validation_contratRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddValidation_contratRow(ByVal client As String, ByVal durée_contrat As String, ByVal refference As String, ByVal date_signature As Date, ByVal mode_passation As String, ByVal type_contrat As String, ByVal montant As String, ByVal Objet_de_la_demande As String, ByVal Date_validation As Date, ByVal Date_Retour As Date, ByVal Fichier_PDF As String, ByVal Commande As String, ByVal Delai_Contractuelle As String) As Validation_contratRow
            Dim rowValidation_contratRow As Validation_contratRow = CType(Me.NewRow,Validation_contratRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, client, durée_contrat, refference, date_signature, mode_passation, type_contrat, montant, Objet_de_la_demande, Date_validation, Date_Retour, Fichier_PDF, Commande, Delai_Contractuelle}
            rowValidation_contratRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowValidation_contratRow)
            Return rowValidation_contratRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Validation_contratDataTable = CType(MyBase.Clone,Validation_contratDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Validation_contratDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columnclient = MyBase.Columns("client")
            Me.columndurée_contrat = MyBase.Columns("durée_contrat")
            Me.columnrefference = MyBase.Columns("refference")
            Me.columndate_signature = MyBase.Columns("date_signature")
            Me.columnmode_passation = MyBase.Columns("mode_passation")
            Me.columntype_contrat = MyBase.Columns("type_contrat")
            Me.columnmontant = MyBase.Columns("montant")
            Me.columnObjet_de_la_demande = MyBase.Columns("Objet_de_la_demande")
            Me.columnDate_validation = MyBase.Columns("Date_validation")
            Me.columnDate_Retour = MyBase.Columns("Date_Retour")
            Me.columnFichier_PDF = MyBase.Columns("Fichier_PDF")
            Me.columnCommande = MyBase.Columns("Commande")
            Me.columnDelai_Contractuelle = MyBase.Columns("Delai_Contractuelle")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnclient = New Global.System.Data.DataColumn("client", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnclient)
            Me.columndurée_contrat = New Global.System.Data.DataColumn("durée_contrat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndurée_contrat)
            Me.columnrefference = New Global.System.Data.DataColumn("refference", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrefference)
            Me.columndate_signature = New Global.System.Data.DataColumn("date_signature", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndate_signature)
            Me.columnmode_passation = New Global.System.Data.DataColumn("mode_passation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmode_passation)
            Me.columntype_contrat = New Global.System.Data.DataColumn("type_contrat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntype_contrat)
            Me.columnmontant = New Global.System.Data.DataColumn("montant", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmontant)
            Me.columnObjet_de_la_demande = New Global.System.Data.DataColumn("Objet_de_la_demande", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObjet_de_la_demande)
            Me.columnDate_validation = New Global.System.Data.DataColumn("Date_validation", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDate_validation)
            Me.columnDate_Retour = New Global.System.Data.DataColumn("Date_Retour", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDate_Retour)
            Me.columnFichier_PDF = New Global.System.Data.DataColumn("Fichier_PDF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFichier_PDF)
            Me.columnCommande = New Global.System.Data.DataColumn("Commande", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCommande)
            Me.columnDelai_Contractuelle = New Global.System.Data.DataColumn("Delai_Contractuelle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDelai_Contractuelle)
            Me.columnid.AutoIncrement = true
            Me.columnid.AutoIncrementSeed = -1
            Me.columnid.AutoIncrementStep = -1
            Me.columnid.AllowDBNull = false
            Me.columnid.ReadOnly = true
            Me.columnclient.MaxLength = 50
            Me.columndurée_contrat.MaxLength = 50
            Me.columnrefference.MaxLength = 50
            Me.columnmode_passation.MaxLength = 50
            Me.columntype_contrat.MaxLength = 50
            Me.columnmontant.MaxLength = 50
            Me.columnObjet_de_la_demande.MaxLength = 50
            Me.columnFichier_PDF.MaxLength = 255
            Me.columnCommande.MaxLength = 255
            Me.columnDelai_Contractuelle.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewValidation_contratRow() As Validation_contratRow
            Return CType(Me.NewRow,Validation_contratRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Validation_contratRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Validation_contratRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Validation_contratRowChangedEvent) Is Nothing) Then
                RaiseEvent Validation_contratRowChanged(Me, New Validation_contratRowChangeEvent(CType(e.Row,Validation_contratRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Validation_contratRowChangingEvent) Is Nothing) Then
                RaiseEvent Validation_contratRowChanging(Me, New Validation_contratRowChangeEvent(CType(e.Row,Validation_contratRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Validation_contratRowDeletedEvent) Is Nothing) Then
                RaiseEvent Validation_contratRowDeleted(Me, New Validation_contratRowChangeEvent(CType(e.Row,Validation_contratRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Validation_contratRowDeletingEvent) Is Nothing) Then
                RaiseEvent Validation_contratRowDeleting(Me, New Validation_contratRowChangeEvent(CType(e.Row,Validation_contratRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveValidation_contratRow(ByVal row As Validation_contratRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As loginformDataSet13 = New loginformDataSet13
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Validation_contratDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Cahier_des_charges1Row
        Inherits Global.System.Data.DataRow
        
        Private tableCahier_des_charges1 As Cahier_des_charges1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCahier_des_charges1 = CType(Me.Table,Cahier_des_charges1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id() As Integer
            Get
                Return CType(Me(Me.tableCahier_des_charges1.idColumn),Integer)
            End Get
            Set
                Me(Me.tableCahier_des_charges1.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Objet_de_la_demande() As String
            Get
                Try 
                    Return CType(Me(Me.tableCahier_des_charges1.Objet_de_la_demandeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Objet_de_la_demande' dans la table 'Cahier_des_charges"& _ 
                            "1' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCahier_des_charges1.Objet_de_la_demandeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Réfferrence() As String
            Get
                Try 
                    Return CType(Me(Me.tableCahier_des_charges1.RéfferrenceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Réfferrence' dans la table 'Cahier_des_charges1' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCahier_des_charges1.RéfferrenceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Structure() As String
            Get
                Try 
                    Return CType(Me(Me.tableCahier_des_charges1.StructureColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Structure' dans la table 'Cahier_des_charges1' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCahier_des_charges1.StructureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mode_Passation() As String
            Get
                Try 
                    Return CType(Me(Me.tableCahier_des_charges1.Mode_PassationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Mode_Passation' dans la table 'Cahier_des_charges1' es"& _ 
                            "t DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCahier_des_charges1.Mode_PassationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fichier_PDF() As Object
            Get
                Try 
                    Return CType(Me(Me.tableCahier_des_charges1.Fichier_PDFColumn),Object)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Fichier_PDF' dans la table 'Cahier_des_charges1' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCahier_des_charges1.Fichier_PDFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObjet_de_la_demandeNull() As Boolean
            Return Me.IsNull(Me.tableCahier_des_charges1.Objet_de_la_demandeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObjet_de_la_demandeNull()
            Me(Me.tableCahier_des_charges1.Objet_de_la_demandeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRéfferrenceNull() As Boolean
            Return Me.IsNull(Me.tableCahier_des_charges1.RéfferrenceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRéfferrenceNull()
            Me(Me.tableCahier_des_charges1.RéfferrenceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_StructureNull() As Boolean
            Return Me.IsNull(Me.tableCahier_des_charges1.StructureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_StructureNull()
            Me(Me.tableCahier_des_charges1.StructureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMode_PassationNull() As Boolean
            Return Me.IsNull(Me.tableCahier_des_charges1.Mode_PassationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMode_PassationNull()
            Me(Me.tableCahier_des_charges1.Mode_PassationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFichier_PDFNull() As Boolean
            Return Me.IsNull(Me.tableCahier_des_charges1.Fichier_PDFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFichier_PDFNull()
            Me(Me.tableCahier_des_charges1.Fichier_PDFColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ContratRow
        Inherits Global.System.Data.DataRow
        
        Private tableContrat As ContratDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableContrat = CType(Me.Table,ContratDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableContrat.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableContrat.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Client() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat.ClientColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Client' dans la table 'Contrat' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat.ClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Montant() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat.MontantColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Montant' dans la table 'Contrat' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat.MontantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Date_Signature() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat.Date_SignatureColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Date_Signature' dans la table 'Contrat' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat.Date_SignatureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Réfferrence() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat.RéfferrenceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Réfferrence' dans la table 'Contrat' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat.RéfferrenceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Objet_de_la_demane() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat.Objet_de_la_demaneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Objet_de_la_demane' dans la table 'Contrat' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat.Objet_de_la_demaneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mode_de_passation() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat.Mode_de_passationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Mode_de_passation' dans la table 'Contrat' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat.Mode_de_passationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Delai_d_execution() As String
            Get
                Return CType(Me(Me.tableContrat._Delai_d_executionColumn),String)
            End Get
            Set
                Me(Me.tableContrat._Delai_d_executionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Durée_de_contrat() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat.Durée_de_contratColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Durée_de_contrat' dans la table 'Contrat' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat.Durée_de_contratColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property type_contrat() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat.type_contratColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'type_contrat' dans la table 'Contrat' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat.type_contratColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mode_Execution() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat.Mode_ExecutionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Mode_Execution' dans la table 'Contrat' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat.Mode_ExecutionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClientNull() As Boolean
            Return Me.IsNull(Me.tableContrat.ClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClientNull()
            Me(Me.tableContrat.ClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantNull() As Boolean
            Return Me.IsNull(Me.tableContrat.MontantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantNull()
            Me(Me.tableContrat.MontantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDate_SignatureNull() As Boolean
            Return Me.IsNull(Me.tableContrat.Date_SignatureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDate_SignatureNull()
            Me(Me.tableContrat.Date_SignatureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRéfferrenceNull() As Boolean
            Return Me.IsNull(Me.tableContrat.RéfferrenceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRéfferrenceNull()
            Me(Me.tableContrat.RéfferrenceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObjet_de_la_demaneNull() As Boolean
            Return Me.IsNull(Me.tableContrat.Objet_de_la_demaneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObjet_de_la_demaneNull()
            Me(Me.tableContrat.Objet_de_la_demaneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMode_de_passationNull() As Boolean
            Return Me.IsNull(Me.tableContrat.Mode_de_passationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMode_de_passationNull()
            Me(Me.tableContrat.Mode_de_passationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDurée_de_contratNull() As Boolean
            Return Me.IsNull(Me.tableContrat.Durée_de_contratColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDurée_de_contratNull()
            Me(Me.tableContrat.Durée_de_contratColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Istype_contratNull() As Boolean
            Return Me.IsNull(Me.tableContrat.type_contratColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Settype_contratNull()
            Me(Me.tableContrat.type_contratColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMode_ExecutionNull() As Boolean
            Return Me.IsNull(Me.tableContrat.Mode_ExecutionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMode_ExecutionNull()
            Me(Me.tableContrat.Mode_ExecutionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Contrat_Cadre_ClientRow
        Inherits Global.System.Data.DataRow
        
        Private tableContrat_Cadre_Client As Contrat_Cadre_ClientDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableContrat_Cadre_Client = CType(Me.Table,Contrat_Cadre_ClientDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableContrat_Cadre_Client.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableContrat_Cadre_Client.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Client() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Cadre_Client.ClientColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Client' dans la table 'Contrat_Cadre_Client' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Cadre_Client.ClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Montant() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Cadre_Client.MontantColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Montant' dans la table 'Contrat_Cadre_Client' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Cadre_Client.MontantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Date_Signature() As Date
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Cadre_Client.Date_SignatureColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Date_Signature' dans la table 'Contrat_Cadre_Client' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Cadre_Client.Date_SignatureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Réfferrence() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Cadre_Client.RéfferrenceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Réfferrence' dans la table 'Contrat_Cadre_Client' est "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Cadre_Client.RéfferrenceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Objet_de_la_demande() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Cadre_Client.Objet_de_la_demandeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Objet_de_la_demande' dans la table 'Contrat_Cadre_Clie"& _ 
                            "nt' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Cadre_Client.Objet_de_la_demandeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mode_de_passation() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Cadre_Client.Mode_de_passationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Mode_de_passation' dans la table 'Contrat_Cadre_Client"& _ 
                            "' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Cadre_Client.Mode_de_passationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Durée_contrat() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Cadre_Client.Durée_contratColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Durée_contrat' dans la table 'Contrat_Cadre_Client' es"& _ 
                            "t DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Cadre_Client.Durée_contratColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type_contrat() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Cadre_Client.Type_contratColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Type_contrat' dans la table 'Contrat_Cadre_Client' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Cadre_Client.Type_contratColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fichier_PDF() As Object
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Cadre_Client.Fichier_PDFColumn),Object)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Fichier_PDF' dans la table 'Contrat_Cadre_Client' est "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Cadre_Client.Fichier_PDFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Commande() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Cadre_Client.CommandeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Commande' dans la table 'Contrat_Cadre_Client' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Cadre_Client.CommandeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Delai_Contractuelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Cadre_Client.Delai_ContractuelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Delai_Contractuelle' dans la table 'Contrat_Cadre_Clie"& _ 
                            "nt' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Cadre_Client.Delai_ContractuelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClientNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Cadre_Client.ClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClientNull()
            Me(Me.tableContrat_Cadre_Client.ClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Cadre_Client.MontantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantNull()
            Me(Me.tableContrat_Cadre_Client.MontantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDate_SignatureNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Cadre_Client.Date_SignatureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDate_SignatureNull()
            Me(Me.tableContrat_Cadre_Client.Date_SignatureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRéfferrenceNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Cadre_Client.RéfferrenceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRéfferrenceNull()
            Me(Me.tableContrat_Cadre_Client.RéfferrenceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObjet_de_la_demandeNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Cadre_Client.Objet_de_la_demandeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObjet_de_la_demandeNull()
            Me(Me.tableContrat_Cadre_Client.Objet_de_la_demandeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMode_de_passationNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Cadre_Client.Mode_de_passationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMode_de_passationNull()
            Me(Me.tableContrat_Cadre_Client.Mode_de_passationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDurée_contratNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Cadre_Client.Durée_contratColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDurée_contratNull()
            Me(Me.tableContrat_Cadre_Client.Durée_contratColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsType_contratNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Cadre_Client.Type_contratColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetType_contratNull()
            Me(Me.tableContrat_Cadre_Client.Type_contratColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFichier_PDFNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Cadre_Client.Fichier_PDFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFichier_PDFNull()
            Me(Me.tableContrat_Cadre_Client.Fichier_PDFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommandeNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Cadre_Client.CommandeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommandeNull()
            Me(Me.tableContrat_Cadre_Client.CommandeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDelai_ContractuelleNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Cadre_Client.Delai_ContractuelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDelai_ContractuelleNull()
            Me(Me.tableContrat_Cadre_Client.Delai_ContractuelleColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Contrat_Cadre_FournisseurRow
        Inherits Global.System.Data.DataRow
        
        Private tableContrat_Cadre_Fournisseur As Contrat_Cadre_FournisseurDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableContrat_Cadre_Fournisseur = CType(Me.Table,Contrat_Cadre_FournisseurDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableContrat_Cadre_Fournisseur.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableContrat_Cadre_Fournisseur.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Client() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Cadre_Fournisseur.ClientColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Client' dans la table 'Contrat_Cadre_Fournisseur' est "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Cadre_Fournisseur.ClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Montant() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Cadre_Fournisseur.MontantColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Montant' dans la table 'Contrat_Cadre_Fournisseur' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Cadre_Fournisseur.MontantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Date_Signature() As Date
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Cadre_Fournisseur.Date_SignatureColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Date_Signature' dans la table 'Contrat_Cadre_Fournisse"& _ 
                            "ur' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Cadre_Fournisseur.Date_SignatureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Réfferrence() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Cadre_Fournisseur.RéfferrenceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Réfferrence' dans la table 'Contrat_Cadre_Fournisseur'"& _ 
                            " est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Cadre_Fournisseur.RéfferrenceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Objet_de_la_demande() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Cadre_Fournisseur.Objet_de_la_demandeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Objet_de_la_demande' dans la table 'Contrat_Cadre_Four"& _ 
                            "nisseur' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Cadre_Fournisseur.Objet_de_la_demandeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mode_de_passation() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Cadre_Fournisseur.Mode_de_passationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Mode_de_passation' dans la table 'Contrat_Cadre_Fourni"& _ 
                            "sseur' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Cadre_Fournisseur.Mode_de_passationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Durée_contrat() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Cadre_Fournisseur.Durée_contratColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Durée_contrat' dans la table 'Contrat_Cadre_Fournisseu"& _ 
                            "r' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Cadre_Fournisseur.Durée_contratColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type_contrat() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Cadre_Fournisseur.Type_contratColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Type_contrat' dans la table 'Contrat_Cadre_Fournisseur"& _ 
                            "' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Cadre_Fournisseur.Type_contratColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fichier_PDF() As Object
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Cadre_Fournisseur.Fichier_PDFColumn),Object)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Fichier_PDF' dans la table 'Contrat_Cadre_Fournisseur'"& _ 
                            " est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Cadre_Fournisseur.Fichier_PDFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Commande() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Cadre_Fournisseur.CommandeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Commande' dans la table 'Contrat_Cadre_Fournisseur' es"& _ 
                            "t DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Cadre_Fournisseur.CommandeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Delai_Contractuelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Cadre_Fournisseur.Delai_ContractuelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Delai_Contractuelle' dans la table 'Contrat_Cadre_Four"& _ 
                            "nisseur' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Cadre_Fournisseur.Delai_ContractuelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClientNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Cadre_Fournisseur.ClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClientNull()
            Me(Me.tableContrat_Cadre_Fournisseur.ClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Cadre_Fournisseur.MontantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantNull()
            Me(Me.tableContrat_Cadre_Fournisseur.MontantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDate_SignatureNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Cadre_Fournisseur.Date_SignatureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDate_SignatureNull()
            Me(Me.tableContrat_Cadre_Fournisseur.Date_SignatureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRéfferrenceNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Cadre_Fournisseur.RéfferrenceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRéfferrenceNull()
            Me(Me.tableContrat_Cadre_Fournisseur.RéfferrenceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObjet_de_la_demandeNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Cadre_Fournisseur.Objet_de_la_demandeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObjet_de_la_demandeNull()
            Me(Me.tableContrat_Cadre_Fournisseur.Objet_de_la_demandeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMode_de_passationNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Cadre_Fournisseur.Mode_de_passationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMode_de_passationNull()
            Me(Me.tableContrat_Cadre_Fournisseur.Mode_de_passationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDurée_contratNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Cadre_Fournisseur.Durée_contratColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDurée_contratNull()
            Me(Me.tableContrat_Cadre_Fournisseur.Durée_contratColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsType_contratNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Cadre_Fournisseur.Type_contratColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetType_contratNull()
            Me(Me.tableContrat_Cadre_Fournisseur.Type_contratColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFichier_PDFNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Cadre_Fournisseur.Fichier_PDFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFichier_PDFNull()
            Me(Me.tableContrat_Cadre_Fournisseur.Fichier_PDFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommandeNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Cadre_Fournisseur.CommandeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommandeNull()
            Me(Me.tableContrat_Cadre_Fournisseur.CommandeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDelai_ContractuelleNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Cadre_Fournisseur.Delai_ContractuelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDelai_ContractuelleNull()
            Me(Me.tableContrat_Cadre_Fournisseur.Delai_ContractuelleColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Contrat_Etranger_ClientRow
        Inherits Global.System.Data.DataRow
        
        Private tableContrat_Etranger_Client As Contrat_Etranger_ClientDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableContrat_Etranger_Client = CType(Me.Table,Contrat_Etranger_ClientDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableContrat_Etranger_Client.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableContrat_Etranger_Client.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Client() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Etranger_Client.ClientColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Client' dans la table 'Contrat_Etranger_Client' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Etranger_Client.ClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Montant() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Etranger_Client.MontantColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Montant' dans la table 'Contrat_Etranger_Client' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Etranger_Client.MontantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Date_Signature() As Date
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Etranger_Client.Date_SignatureColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Date_Signature' dans la table 'Contrat_Etranger_Client"& _ 
                            "' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Etranger_Client.Date_SignatureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Réfferrence() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Etranger_Client.RéfferrenceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Réfferrence' dans la table 'Contrat_Etranger_Client' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Etranger_Client.RéfferrenceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Objet_de_la_demande() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Etranger_Client.Objet_de_la_demandeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Objet_de_la_demande' dans la table 'Contrat_Etranger_C"& _ 
                            "lient' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Etranger_Client.Objet_de_la_demandeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mode_de_passation() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Etranger_Client.Mode_de_passationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Mode_de_passation' dans la table 'Contrat_Etranger_Cli"& _ 
                            "ent' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Etranger_Client.Mode_de_passationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Durée_contrat() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Etranger_Client.Durée_contratColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Durée_contrat' dans la table 'Contrat_Etranger_Client'"& _ 
                            " est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Etranger_Client.Durée_contratColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type_contrat() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Etranger_Client.Type_contratColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Type_contrat' dans la table 'Contrat_Etranger_Client' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Etranger_Client.Type_contratColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fichier_PDF() As Object
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Etranger_Client.Fichier_PDFColumn),Object)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Fichier_PDF' dans la table 'Contrat_Etranger_Client' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Etranger_Client.Fichier_PDFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Commande() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Etranger_Client.CommandeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Commande' dans la table 'Contrat_Etranger_Client' est "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Etranger_Client.CommandeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Delai_Contractuelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Etranger_Client.Delai_ContractuelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Delai_Contractuelle' dans la table 'Contrat_Etranger_C"& _ 
                            "lient' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Etranger_Client.Delai_ContractuelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClientNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Etranger_Client.ClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClientNull()
            Me(Me.tableContrat_Etranger_Client.ClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Etranger_Client.MontantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantNull()
            Me(Me.tableContrat_Etranger_Client.MontantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDate_SignatureNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Etranger_Client.Date_SignatureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDate_SignatureNull()
            Me(Me.tableContrat_Etranger_Client.Date_SignatureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRéfferrenceNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Etranger_Client.RéfferrenceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRéfferrenceNull()
            Me(Me.tableContrat_Etranger_Client.RéfferrenceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObjet_de_la_demandeNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Etranger_Client.Objet_de_la_demandeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObjet_de_la_demandeNull()
            Me(Me.tableContrat_Etranger_Client.Objet_de_la_demandeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMode_de_passationNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Etranger_Client.Mode_de_passationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMode_de_passationNull()
            Me(Me.tableContrat_Etranger_Client.Mode_de_passationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDurée_contratNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Etranger_Client.Durée_contratColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDurée_contratNull()
            Me(Me.tableContrat_Etranger_Client.Durée_contratColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsType_contratNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Etranger_Client.Type_contratColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetType_contratNull()
            Me(Me.tableContrat_Etranger_Client.Type_contratColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFichier_PDFNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Etranger_Client.Fichier_PDFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFichier_PDFNull()
            Me(Me.tableContrat_Etranger_Client.Fichier_PDFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommandeNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Etranger_Client.CommandeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommandeNull()
            Me(Me.tableContrat_Etranger_Client.CommandeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDelai_ContractuelleNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Etranger_Client.Delai_ContractuelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDelai_ContractuelleNull()
            Me(Me.tableContrat_Etranger_Client.Delai_ContractuelleColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Contrat_Etranger_FournisseurRow
        Inherits Global.System.Data.DataRow
        
        Private tableContrat_Etranger_Fournisseur As Contrat_Etranger_FournisseurDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableContrat_Etranger_Fournisseur = CType(Me.Table,Contrat_Etranger_FournisseurDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableContrat_Etranger_Fournisseur.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableContrat_Etranger_Fournisseur.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Client() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Etranger_Fournisseur.ClientColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Client' dans la table 'Contrat_Etranger_Fournisseur' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Etranger_Fournisseur.ClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Montant() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Etranger_Fournisseur.MontantColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Montant' dans la table 'Contrat_Etranger_Fournisseur' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Etranger_Fournisseur.MontantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Date_Signature() As Date
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Etranger_Fournisseur.Date_SignatureColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Date_Signature' dans la table 'Contrat_Etranger_Fourni"& _ 
                            "sseur' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Etranger_Fournisseur.Date_SignatureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Réfferrence() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Etranger_Fournisseur.RéfferrenceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Réfferrence' dans la table 'Contrat_Etranger_Fournisse"& _ 
                            "ur' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Etranger_Fournisseur.RéfferrenceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Objet_de_la_demande() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Etranger_Fournisseur.Objet_de_la_demandeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Objet_de_la_demande' dans la table 'Contrat_Etranger_F"& _ 
                            "ournisseur' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Etranger_Fournisseur.Objet_de_la_demandeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mode_de_passation() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Etranger_Fournisseur.Mode_de_passationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Mode_de_passation' dans la table 'Contrat_Etranger_Fou"& _ 
                            "rnisseur' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Etranger_Fournisseur.Mode_de_passationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Durée_contrat() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Etranger_Fournisseur.Durée_contratColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Durée_contrat' dans la table 'Contrat_Etranger_Fournis"& _ 
                            "seur' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Etranger_Fournisseur.Durée_contratColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type_contrat() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Etranger_Fournisseur.Type_contratColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Type_contrat' dans la table 'Contrat_Etranger_Fourniss"& _ 
                            "eur' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Etranger_Fournisseur.Type_contratColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fichier_PDF() As Object
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Etranger_Fournisseur.Fichier_PDFColumn),Object)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Fichier_PDF' dans la table 'Contrat_Etranger_Fournisse"& _ 
                            "ur' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Etranger_Fournisseur.Fichier_PDFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Commande() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Etranger_Fournisseur.CommandeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Commande' dans la table 'Contrat_Etranger_Fournisseur'"& _ 
                            " est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Etranger_Fournisseur.CommandeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Delai_Contractuelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Etranger_Fournisseur.Delai_ContractuelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Delai_Contractuelle' dans la table 'Contrat_Etranger_F"& _ 
                            "ournisseur' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Etranger_Fournisseur.Delai_ContractuelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClientNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Etranger_Fournisseur.ClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClientNull()
            Me(Me.tableContrat_Etranger_Fournisseur.ClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Etranger_Fournisseur.MontantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantNull()
            Me(Me.tableContrat_Etranger_Fournisseur.MontantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDate_SignatureNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Etranger_Fournisseur.Date_SignatureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDate_SignatureNull()
            Me(Me.tableContrat_Etranger_Fournisseur.Date_SignatureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRéfferrenceNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Etranger_Fournisseur.RéfferrenceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRéfferrenceNull()
            Me(Me.tableContrat_Etranger_Fournisseur.RéfferrenceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObjet_de_la_demandeNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Etranger_Fournisseur.Objet_de_la_demandeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObjet_de_la_demandeNull()
            Me(Me.tableContrat_Etranger_Fournisseur.Objet_de_la_demandeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMode_de_passationNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Etranger_Fournisseur.Mode_de_passationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMode_de_passationNull()
            Me(Me.tableContrat_Etranger_Fournisseur.Mode_de_passationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDurée_contratNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Etranger_Fournisseur.Durée_contratColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDurée_contratNull()
            Me(Me.tableContrat_Etranger_Fournisseur.Durée_contratColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsType_contratNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Etranger_Fournisseur.Type_contratColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetType_contratNull()
            Me(Me.tableContrat_Etranger_Fournisseur.Type_contratColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFichier_PDFNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Etranger_Fournisseur.Fichier_PDFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFichier_PDFNull()
            Me(Me.tableContrat_Etranger_Fournisseur.Fichier_PDFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommandeNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Etranger_Fournisseur.CommandeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommandeNull()
            Me(Me.tableContrat_Etranger_Fournisseur.CommandeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDelai_ContractuelleNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Etranger_Fournisseur.Delai_ContractuelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDelai_ContractuelleNull()
            Me(Me.tableContrat_Etranger_Fournisseur.Delai_ContractuelleColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Contrat_FournisseurRow
        Inherits Global.System.Data.DataRow
        
        Private tableContrat_Fournisseur As Contrat_FournisseurDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableContrat_Fournisseur = CType(Me.Table,Contrat_FournisseurDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableContrat_Fournisseur.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableContrat_Fournisseur.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Client() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Fournisseur.ClientColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Client' dans la table 'Contrat_Fournisseur' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Fournisseur.ClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Montant() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Fournisseur.MontantColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Montant' dans la table 'Contrat_Fournisseur' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Fournisseur.MontantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Date_Signature() As Date
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Fournisseur.Date_SignatureColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Date_Signature' dans la table 'Contrat_Fournisseur' es"& _ 
                            "t DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Fournisseur.Date_SignatureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Réfferrence() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Fournisseur.RéfferrenceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Réfferrence' dans la table 'Contrat_Fournisseur' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Fournisseur.RéfferrenceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Objet_de_la_demande() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Fournisseur.Objet_de_la_demandeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Objet_de_la_demande' dans la table 'Contrat_Fournisseu"& _ 
                            "r' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Fournisseur.Objet_de_la_demandeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mode_de_passation() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Fournisseur.Mode_de_passationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Mode_de_passation' dans la table 'Contrat_Fournisseur'"& _ 
                            " est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Fournisseur.Mode_de_passationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Durée_contrat() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Fournisseur.Durée_contratColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Durée_contrat' dans la table 'Contrat_Fournisseur' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Fournisseur.Durée_contratColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type_contrat() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Fournisseur.Type_contratColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Type_contrat' dans la table 'Contrat_Fournisseur' est "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Fournisseur.Type_contratColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fichier_PDF() As Object
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Fournisseur.Fichier_PDFColumn),Object)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Fichier_PDF' dans la table 'Contrat_Fournisseur' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Fournisseur.Fichier_PDFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Commande() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Fournisseur.CommandeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Commande' dans la table 'Contrat_Fournisseur' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Fournisseur.CommandeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Delai_Contractuelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableContrat_Fournisseur.Delai_ContractuelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Delai_Contractuelle' dans la table 'Contrat_Fournisseu"& _ 
                            "r' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_Fournisseur.Delai_ContractuelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClientNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Fournisseur.ClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClientNull()
            Me(Me.tableContrat_Fournisseur.ClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Fournisseur.MontantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantNull()
            Me(Me.tableContrat_Fournisseur.MontantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDate_SignatureNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Fournisseur.Date_SignatureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDate_SignatureNull()
            Me(Me.tableContrat_Fournisseur.Date_SignatureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRéfferrenceNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Fournisseur.RéfferrenceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRéfferrenceNull()
            Me(Me.tableContrat_Fournisseur.RéfferrenceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObjet_de_la_demandeNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Fournisseur.Objet_de_la_demandeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObjet_de_la_demandeNull()
            Me(Me.tableContrat_Fournisseur.Objet_de_la_demandeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMode_de_passationNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Fournisseur.Mode_de_passationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMode_de_passationNull()
            Me(Me.tableContrat_Fournisseur.Mode_de_passationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDurée_contratNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Fournisseur.Durée_contratColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDurée_contratNull()
            Me(Me.tableContrat_Fournisseur.Durée_contratColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsType_contratNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Fournisseur.Type_contratColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetType_contratNull()
            Me(Me.tableContrat_Fournisseur.Type_contratColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFichier_PDFNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Fournisseur.Fichier_PDFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFichier_PDFNull()
            Me(Me.tableContrat_Fournisseur.Fichier_PDFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommandeNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Fournisseur.CommandeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommandeNull()
            Me(Me.tableContrat_Fournisseur.CommandeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDelai_ContractuelleNull() As Boolean
            Return Me.IsNull(Me.tableContrat_Fournisseur.Delai_ContractuelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDelai_ContractuelleNull()
            Me(Me.tableContrat_Fournisseur.Delai_ContractuelleColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Contrat_pour_RéviserRow
        Inherits Global.System.Data.DataRow
        
        Private tableContrat_pour_Réviser As Contrat_pour_RéviserDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableContrat_pour_Réviser = CType(Me.Table,Contrat_pour_RéviserDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateArriver() As Date
            Get
                Try 
                    Return CType(Me(Me.tableContrat_pour_Réviser.DateArriverColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DateArriver' dans la table 'Contrat_pour_Réviser' est "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_pour_Réviser.DateArriverColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateDepart() As Date
            Get
                Try 
                    Return CType(Me(Me.tableContrat_pour_Réviser.DateDepartColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DateDepart' dans la table 'Contrat_pour_Réviser' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_pour_Réviser.DateDepartColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateVerification() As Date
            Get
                Try 
                    Return CType(Me(Me.tableContrat_pour_Réviser.DateVerificationColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'DateVerification' dans la table 'Contrat_pour_Réviser'"& _ 
                            " est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContrat_pour_Réviser.DateVerificationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateArriverNull() As Boolean
            Return Me.IsNull(Me.tableContrat_pour_Réviser.DateArriverColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateArriverNull()
            Me(Me.tableContrat_pour_Réviser.DateArriverColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateDepartNull() As Boolean
            Return Me.IsNull(Me.tableContrat_pour_Réviser.DateDepartColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateDepartNull()
            Me(Me.tableContrat_pour_Réviser.DateDepartColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateVerificationNull() As Boolean
            Return Me.IsNull(Me.tableContrat_pour_Réviser.DateVerificationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateVerificationNull()
            Me(Me.tableContrat_pour_Réviser.DateVerificationColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class loginRow
        Inherits Global.System.Data.DataRow
        
        Private tablelogin As loginDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablelogin = CType(Me.Table,loginDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property username() As String
            Get
                Try 
                    Return CType(Me(Me.tablelogin.usernameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'username' dans la table 'login' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelogin.usernameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property password() As String
            Get
                Try 
                    Return CType(Me(Me.tablelogin.passwordColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'password' dans la table 'login' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelogin.passwordColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property usertype() As String
            Get
                Try 
                    Return CType(Me(Me.tablelogin.usertypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'usertype' dans la table 'login' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelogin.usertypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsusernameNull() As Boolean
            Return Me.IsNull(Me.tablelogin.usernameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetusernameNull()
            Me(Me.tablelogin.usernameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspasswordNull() As Boolean
            Return Me.IsNull(Me.tablelogin.passwordColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpasswordNull()
            Me(Me.tablelogin.passwordColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsusertypeNull() As Boolean
            Return Me.IsNull(Me.tablelogin.usertypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetusertypeNull()
            Me(Me.tablelogin.usertypeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class login_1Row
        Inherits Global.System.Data.DataRow
        
        Private tablelogin_1 As login_1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablelogin_1 = CType(Me.Table,login_1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id() As Integer
            Get
                Return CType(Me(Me.tablelogin_1.idColumn),Integer)
            End Get
            Set
                Me(Me.tablelogin_1.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property username() As String
            Get
                Try 
                    Return CType(Me(Me.tablelogin_1.usernameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'username' dans la table 'login_1' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelogin_1.usernameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property password() As String
            Get
                Try 
                    Return CType(Me(Me.tablelogin_1.passwordColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'password' dans la table 'login_1' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelogin_1.passwordColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property usertype() As String
            Get
                Try 
                    Return CType(Me(Me.tablelogin_1.usertypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'usertype' dans la table 'login_1' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablelogin_1.usertypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsusernameNull() As Boolean
            Return Me.IsNull(Me.tablelogin_1.usernameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetusernameNull()
            Me(Me.tablelogin_1.usernameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspasswordNull() As Boolean
            Return Me.IsNull(Me.tablelogin_1.passwordColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpasswordNull()
            Me(Me.tablelogin_1.passwordColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsusertypeNull() As Boolean
            Return Me.IsNull(Me.tablelogin_1.usertypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetusertypeNull()
            Me(Me.tablelogin_1.usertypeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Note_des_Réserves_ClientRow
        Inherits Global.System.Data.DataRow
        
        Private tableNote_des_Réserves_Client As Note_des_Réserves_ClientDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNote_des_Réserves_Client = CType(Me.Table,Note_des_Réserves_ClientDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id() As Integer
            Get
                Return CType(Me(Me.tableNote_des_Réserves_Client.idColumn),Integer)
            End Get
            Set
                Me(Me.tableNote_des_Réserves_Client.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property client() As String
            Get
                Try 
                    Return CType(Me(Me.tableNote_des_Réserves_Client.clientColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'client' dans la table 'Note_des_Réserves_Client' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNote_des_Réserves_Client.clientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mode_passation() As String
            Get
                Try 
                    Return CType(Me(Me.tableNote_des_Réserves_Client.Mode_passationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Mode_passation' dans la table 'Note_des_Réserves_Clien"& _ 
                            "t' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNote_des_Réserves_Client.Mode_passationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property projet_contrat() As String
            Get
                Try 
                    Return CType(Me(Me.tableNote_des_Réserves_Client.projet_contratColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'projet_contrat' dans la table 'Note_des_Réserves_Clien"& _ 
                            "t' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNote_des_Réserves_Client.projet_contratColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property note() As String
            Get
                Try 
                    Return CType(Me(Me.tableNote_des_Réserves_Client.noteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'note' dans la table 'Note_des_Réserves_Client' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNote_des_Réserves_Client.noteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsclientNull() As Boolean
            Return Me.IsNull(Me.tableNote_des_Réserves_Client.clientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetclientNull()
            Me(Me.tableNote_des_Réserves_Client.clientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMode_passationNull() As Boolean
            Return Me.IsNull(Me.tableNote_des_Réserves_Client.Mode_passationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMode_passationNull()
            Me(Me.tableNote_des_Réserves_Client.Mode_passationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isprojet_contratNull() As Boolean
            Return Me.IsNull(Me.tableNote_des_Réserves_Client.projet_contratColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setprojet_contratNull()
            Me(Me.tableNote_des_Réserves_Client.projet_contratColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnoteNull() As Boolean
            Return Me.IsNull(Me.tableNote_des_Réserves_Client.noteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnoteNull()
            Me(Me.tableNote_des_Réserves_Client.noteColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ODSRow
        Inherits Global.System.Data.DataRow
        
        Private tableODS As ODSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableODS = CType(Me.Table,ODSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id() As Integer
            Get
                Return CType(Me(Me.tableODS.idColumn),Integer)
            End Get
            Set
                Me(Me.tableODS.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Client() As String
            Get
                Try 
                    Return CType(Me(Me.tableODS.ClientColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Client' dans la table 'ODS' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODS.ClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Contrat_de_Réfferrence() As String
            Get
                Try 
                    Return CType(Me(Me.tableODS.Contrat_de_RéfferrenceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Contrat_de_Réfferrence' dans la table 'ODS' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableODS.Contrat_de_RéfferrenceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Objet_de_la_Demande() As String
            Get
                Try 
                    Return CType(Me(Me.tableODS.Objet_de_la_DemandeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Objet_de_la_Demande' dans la table 'ODS' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODS.Objet_de_la_DemandeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Montant() As String
            Get
                Try 
                    Return CType(Me(Me.tableODS.MontantColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Montant' dans la table 'ODS' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODS.MontantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Structure() As String
            Get
                Try 
                    Return CType(Me(Me.tableODS.StructureColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Structure' dans la table 'ODS' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODS.StructureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Date_Signature() As Date
            Get
                Try 
                    Return CType(Me(Me.tableODS.Date_SignatureColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Date_Signature' dans la table 'ODS' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODS.Date_SignatureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Réfferrence() As String
            Get
                Try 
                    Return CType(Me(Me.tableODS.RéfferrenceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Réfferrence' dans la table 'ODS' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODS.RéfferrenceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fichier_PDF() As Object
            Get
                Try 
                    Return CType(Me(Me.tableODS.Fichier_PDFColumn),Object)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Fichier_PDF' dans la table 'ODS' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODS.Fichier_PDFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Commande() As String
            Get
                Try 
                    Return CType(Me(Me.tableODS.CommandeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Commande' dans la table 'ODS' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODS.CommandeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Delai_Contractuelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableODS.Delai_ContractuelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Delai_Contractuelle' dans la table 'ODS' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODS.Delai_ContractuelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClientNull() As Boolean
            Return Me.IsNull(Me.tableODS.ClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClientNull()
            Me(Me.tableODS.ClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContrat_de_RéfferrenceNull() As Boolean
            Return Me.IsNull(Me.tableODS.Contrat_de_RéfferrenceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContrat_de_RéfferrenceNull()
            Me(Me.tableODS.Contrat_de_RéfferrenceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObjet_de_la_DemandeNull() As Boolean
            Return Me.IsNull(Me.tableODS.Objet_de_la_DemandeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObjet_de_la_DemandeNull()
            Me(Me.tableODS.Objet_de_la_DemandeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantNull() As Boolean
            Return Me.IsNull(Me.tableODS.MontantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantNull()
            Me(Me.tableODS.MontantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_StructureNull() As Boolean
            Return Me.IsNull(Me.tableODS.StructureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_StructureNull()
            Me(Me.tableODS.StructureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDate_SignatureNull() As Boolean
            Return Me.IsNull(Me.tableODS.Date_SignatureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDate_SignatureNull()
            Me(Me.tableODS.Date_SignatureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRéfferrenceNull() As Boolean
            Return Me.IsNull(Me.tableODS.RéfferrenceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRéfferrenceNull()
            Me(Me.tableODS.RéfferrenceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFichier_PDFNull() As Boolean
            Return Me.IsNull(Me.tableODS.Fichier_PDFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFichier_PDFNull()
            Me(Me.tableODS.Fichier_PDFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommandeNull() As Boolean
            Return Me.IsNull(Me.tableODS.CommandeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommandeNull()
            Me(Me.tableODS.CommandeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDelai_ContractuelleNull() As Boolean
            Return Me.IsNull(Me.tableODS.Delai_ContractuelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDelai_ContractuelleNull()
            Me(Me.tableODS.Delai_ContractuelleColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ODS_APR_PROGRow
        Inherits Global.System.Data.DataRow
        
        Private tableODS_APR_PROG As ODS_APR_PROGDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableODS_APR_PROG = CType(Me.Table,ODS_APR_PROGDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id() As Integer
            Get
                Return CType(Me(Me.tableODS_APR_PROG.idColumn),Integer)
            End Get
            Set
                Me(Me.tableODS_APR_PROG.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Client() As String
            Get
                Try 
                    Return CType(Me(Me.tableODS_APR_PROG.ClientColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Client' dans la table 'ODS_APR_PROG' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODS_APR_PROG.ClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Contrat_de_Réfferrence() As String
            Get
                Try 
                    Return CType(Me(Me.tableODS_APR_PROG.Contrat_de_RéfferrenceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Contrat_de_Réfferrence' dans la table 'ODS_APR_PROG' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODS_APR_PROG.Contrat_de_RéfferrenceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Objet_de_la_Demande() As String
            Get
                Try 
                    Return CType(Me(Me.tableODS_APR_PROG.Objet_de_la_DemandeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Objet_de_la_Demande' dans la table 'ODS_APR_PROG' est "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODS_APR_PROG.Objet_de_la_DemandeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Montant() As String
            Get
                Try 
                    Return CType(Me(Me.tableODS_APR_PROG.MontantColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Montant' dans la table 'ODS_APR_PROG' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODS_APR_PROG.MontantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Structure() As String
            Get
                Try 
                    Return CType(Me(Me.tableODS_APR_PROG.StructureColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Structure' dans la table 'ODS_APR_PROG' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODS_APR_PROG.StructureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Date_Signature() As Date
            Get
                Try 
                    Return CType(Me(Me.tableODS_APR_PROG.Date_SignatureColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Date_Signature' dans la table 'ODS_APR_PROG' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableODS_APR_PROG.Date_SignatureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Réfferrence() As String
            Get
                Try 
                    Return CType(Me(Me.tableODS_APR_PROG.RéfferrenceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Réfferrence' dans la table 'ODS_APR_PROG' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODS_APR_PROG.RéfferrenceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fichier_PDF() As Object
            Get
                Try 
                    Return CType(Me(Me.tableODS_APR_PROG.Fichier_PDFColumn),Object)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Fichier_PDF' dans la table 'ODS_APR_PROG' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODS_APR_PROG.Fichier_PDFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Commande() As String
            Get
                Try 
                    Return CType(Me(Me.tableODS_APR_PROG.CommandeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Commande' dans la table 'ODS_APR_PROG' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODS_APR_PROG.CommandeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Delai_Contractuelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableODS_APR_PROG.Delai_ContractuelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Delai_Contractuelle' dans la table 'ODS_APR_PROG' est "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODS_APR_PROG.Delai_ContractuelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClientNull() As Boolean
            Return Me.IsNull(Me.tableODS_APR_PROG.ClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClientNull()
            Me(Me.tableODS_APR_PROG.ClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContrat_de_RéfferrenceNull() As Boolean
            Return Me.IsNull(Me.tableODS_APR_PROG.Contrat_de_RéfferrenceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContrat_de_RéfferrenceNull()
            Me(Me.tableODS_APR_PROG.Contrat_de_RéfferrenceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObjet_de_la_DemandeNull() As Boolean
            Return Me.IsNull(Me.tableODS_APR_PROG.Objet_de_la_DemandeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObjet_de_la_DemandeNull()
            Me(Me.tableODS_APR_PROG.Objet_de_la_DemandeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantNull() As Boolean
            Return Me.IsNull(Me.tableODS_APR_PROG.MontantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantNull()
            Me(Me.tableODS_APR_PROG.MontantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_StructureNull() As Boolean
            Return Me.IsNull(Me.tableODS_APR_PROG.StructureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_StructureNull()
            Me(Me.tableODS_APR_PROG.StructureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDate_SignatureNull() As Boolean
            Return Me.IsNull(Me.tableODS_APR_PROG.Date_SignatureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDate_SignatureNull()
            Me(Me.tableODS_APR_PROG.Date_SignatureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRéfferrenceNull() As Boolean
            Return Me.IsNull(Me.tableODS_APR_PROG.RéfferrenceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRéfferrenceNull()
            Me(Me.tableODS_APR_PROG.RéfferrenceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFichier_PDFNull() As Boolean
            Return Me.IsNull(Me.tableODS_APR_PROG.Fichier_PDFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFichier_PDFNull()
            Me(Me.tableODS_APR_PROG.Fichier_PDFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommandeNull() As Boolean
            Return Me.IsNull(Me.tableODS_APR_PROG.CommandeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommandeNull()
            Me(Me.tableODS_APR_PROG.CommandeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDelai_ContractuelleNull() As Boolean
            Return Me.IsNull(Me.tableODS_APR_PROG.Delai_ContractuelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDelai_ContractuelleNull()
            Me(Me.tableODS_APR_PROG.Delai_ContractuelleColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class projet_du_contratRow
        Inherits Global.System.Data.DataRow
        
        Private tableprojet_du_contrat As projet_du_contratDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableprojet_du_contrat = CType(Me.Table,projet_du_contratDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dateArriver() As Date
            Get
                Try 
                    Return CType(Me(Me.tableprojet_du_contrat.dateArriverColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'dateArriver' dans la table 'projet_du_contrat' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableprojet_du_contrat.dateArriverColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Structure() As String
            Get
                Try 
                    Return CType(Me(Me.tableprojet_du_contrat.StructureColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Structure' dans la table 'projet_du_contrat' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableprojet_du_contrat.StructureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codeStructure() As String
            Get
                Try 
                    Return CType(Me(Me.tableprojet_du_contrat.codeStructureColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'codeStructure' dans la table 'projet_du_contrat' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableprojet_du_contrat.codeStructureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property typeContrat() As String
            Get
                Try 
                    Return CType(Me(Me.tableprojet_du_contrat.typeContratColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'typeContrat' dans la table 'projet_du_contrat' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableprojet_du_contrat.typeContratColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Réferrence() As String
            Get
                Try 
                    Return CType(Me(Me.tableprojet_du_contrat.RéferrenceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Réferrence' dans la table 'projet_du_contrat' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableprojet_du_contrat.RéferrenceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Objet_De_Demande() As String
            Get
                Try 
                    Return CType(Me(Me.tableprojet_du_contrat.Objet_De_DemandeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Objet_De_Demande' dans la table 'projet_du_contrat' es"& _ 
                            "t DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableprojet_du_contrat.Objet_De_DemandeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdateArriverNull() As Boolean
            Return Me.IsNull(Me.tableprojet_du_contrat.dateArriverColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdateArriverNull()
            Me(Me.tableprojet_du_contrat.dateArriverColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_StructureNull() As Boolean
            Return Me.IsNull(Me.tableprojet_du_contrat.StructureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_StructureNull()
            Me(Me.tableprojet_du_contrat.StructureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodeStructureNull() As Boolean
            Return Me.IsNull(Me.tableprojet_du_contrat.codeStructureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodeStructureNull()
            Me(Me.tableprojet_du_contrat.codeStructureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstypeContratNull() As Boolean
            Return Me.IsNull(Me.tableprojet_du_contrat.typeContratColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettypeContratNull()
            Me(Me.tableprojet_du_contrat.typeContratColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRéferrenceNull() As Boolean
            Return Me.IsNull(Me.tableprojet_du_contrat.RéferrenceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRéferrenceNull()
            Me(Me.tableprojet_du_contrat.RéferrenceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObjet_De_DemandeNull() As Boolean
            Return Me.IsNull(Me.tableprojet_du_contrat.Objet_De_DemandeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObjet_De_DemandeNull()
            Me(Me.tableprojet_du_contrat.Objet_De_DemandeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Protocole_Accord_ClientRow
        Inherits Global.System.Data.DataRow
        
        Private tableProtocole_Accord_Client As Protocole_Accord_ClientDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProtocole_Accord_Client = CType(Me.Table,Protocole_Accord_ClientDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableProtocole_Accord_Client.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableProtocole_Accord_Client.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Client() As String
            Get
                Try 
                    Return CType(Me(Me.tableProtocole_Accord_Client.ClientColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Client' dans la table 'Protocole_Accord_Client' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableProtocole_Accord_Client.ClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Montant() As String
            Get
                Try 
                    Return CType(Me(Me.tableProtocole_Accord_Client.MontantColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Montant' dans la table 'Protocole_Accord_Client' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProtocole_Accord_Client.MontantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Date_Signature() As Date
            Get
                Try 
                    Return CType(Me(Me.tableProtocole_Accord_Client.Date_SignatureColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Date_Signature' dans la table 'Protocole_Accord_Client"& _ 
                            "' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProtocole_Accord_Client.Date_SignatureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Réfferrence() As String
            Get
                Try 
                    Return CType(Me(Me.tableProtocole_Accord_Client.RéfferrenceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Réfferrence' dans la table 'Protocole_Accord_Client' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProtocole_Accord_Client.RéfferrenceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Objet_de_la_demande() As String
            Get
                Try 
                    Return CType(Me(Me.tableProtocole_Accord_Client.Objet_de_la_demandeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Objet_de_la_demande' dans la table 'Protocole_Accord_C"& _ 
                            "lient' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProtocole_Accord_Client.Objet_de_la_demandeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mode_de_passation() As String
            Get
                Try 
                    Return CType(Me(Me.tableProtocole_Accord_Client.Mode_de_passationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Mode_de_passation' dans la table 'Protocole_Accord_Cli"& _ 
                            "ent' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProtocole_Accord_Client.Mode_de_passationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Durée_contrat() As String
            Get
                Try 
                    Return CType(Me(Me.tableProtocole_Accord_Client.Durée_contratColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Durée_contrat' dans la table 'Protocole_Accord_Client'"& _ 
                            " est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProtocole_Accord_Client.Durée_contratColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type_contrat() As String
            Get
                Try 
                    Return CType(Me(Me.tableProtocole_Accord_Client.Type_contratColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Type_contrat' dans la table 'Protocole_Accord_Client' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProtocole_Accord_Client.Type_contratColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fichier_PDF() As Object
            Get
                Try 
                    Return CType(Me(Me.tableProtocole_Accord_Client.Fichier_PDFColumn),Object)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Fichier_PDF' dans la table 'Protocole_Accord_Client' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProtocole_Accord_Client.Fichier_PDFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Commande() As String
            Get
                Try 
                    Return CType(Me(Me.tableProtocole_Accord_Client.CommandeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Commande' dans la table 'Protocole_Accord_Client' est "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProtocole_Accord_Client.CommandeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Delai_Contractuelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableProtocole_Accord_Client.Delai_ContractuelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Delai_Contractuelle' dans la table 'Protocole_Accord_C"& _ 
                            "lient' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProtocole_Accord_Client.Delai_ContractuelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClientNull() As Boolean
            Return Me.IsNull(Me.tableProtocole_Accord_Client.ClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClientNull()
            Me(Me.tableProtocole_Accord_Client.ClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantNull() As Boolean
            Return Me.IsNull(Me.tableProtocole_Accord_Client.MontantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantNull()
            Me(Me.tableProtocole_Accord_Client.MontantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDate_SignatureNull() As Boolean
            Return Me.IsNull(Me.tableProtocole_Accord_Client.Date_SignatureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDate_SignatureNull()
            Me(Me.tableProtocole_Accord_Client.Date_SignatureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRéfferrenceNull() As Boolean
            Return Me.IsNull(Me.tableProtocole_Accord_Client.RéfferrenceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRéfferrenceNull()
            Me(Me.tableProtocole_Accord_Client.RéfferrenceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObjet_de_la_demandeNull() As Boolean
            Return Me.IsNull(Me.tableProtocole_Accord_Client.Objet_de_la_demandeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObjet_de_la_demandeNull()
            Me(Me.tableProtocole_Accord_Client.Objet_de_la_demandeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMode_de_passationNull() As Boolean
            Return Me.IsNull(Me.tableProtocole_Accord_Client.Mode_de_passationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMode_de_passationNull()
            Me(Me.tableProtocole_Accord_Client.Mode_de_passationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDurée_contratNull() As Boolean
            Return Me.IsNull(Me.tableProtocole_Accord_Client.Durée_contratColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDurée_contratNull()
            Me(Me.tableProtocole_Accord_Client.Durée_contratColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsType_contratNull() As Boolean
            Return Me.IsNull(Me.tableProtocole_Accord_Client.Type_contratColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetType_contratNull()
            Me(Me.tableProtocole_Accord_Client.Type_contratColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFichier_PDFNull() As Boolean
            Return Me.IsNull(Me.tableProtocole_Accord_Client.Fichier_PDFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFichier_PDFNull()
            Me(Me.tableProtocole_Accord_Client.Fichier_PDFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommandeNull() As Boolean
            Return Me.IsNull(Me.tableProtocole_Accord_Client.CommandeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommandeNull()
            Me(Me.tableProtocole_Accord_Client.CommandeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDelai_ContractuelleNull() As Boolean
            Return Me.IsNull(Me.tableProtocole_Accord_Client.Delai_ContractuelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDelai_ContractuelleNull()
            Me(Me.tableProtocole_Accord_Client.Delai_ContractuelleColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Protocole_Accord_FournisseurRow
        Inherits Global.System.Data.DataRow
        
        Private tableProtocole_Accord_Fournisseur As Protocole_Accord_FournisseurDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProtocole_Accord_Fournisseur = CType(Me.Table,Protocole_Accord_FournisseurDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableProtocole_Accord_Fournisseur.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableProtocole_Accord_Fournisseur.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Client() As String
            Get
                Try 
                    Return CType(Me(Me.tableProtocole_Accord_Fournisseur.ClientColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Client' dans la table 'Protocole_Accord_Fournisseur' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProtocole_Accord_Fournisseur.ClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Montant() As String
            Get
                Try 
                    Return CType(Me(Me.tableProtocole_Accord_Fournisseur.MontantColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Montant' dans la table 'Protocole_Accord_Fournisseur' "& _ 
                            "est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProtocole_Accord_Fournisseur.MontantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Date_Signature() As Date
            Get
                Try 
                    Return CType(Me(Me.tableProtocole_Accord_Fournisseur.Date_SignatureColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Date_Signature' dans la table 'Protocole_Accord_Fourni"& _ 
                            "sseur' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProtocole_Accord_Fournisseur.Date_SignatureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Réfferrence() As String
            Get
                Try 
                    Return CType(Me(Me.tableProtocole_Accord_Fournisseur.RéfferrenceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Réfferrence' dans la table 'Protocole_Accord_Fournisse"& _ 
                            "ur' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProtocole_Accord_Fournisseur.RéfferrenceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Objet_de_la_demande() As String
            Get
                Try 
                    Return CType(Me(Me.tableProtocole_Accord_Fournisseur.Objet_de_la_demandeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Objet_de_la_demande' dans la table 'Protocole_Accord_F"& _ 
                            "ournisseur' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProtocole_Accord_Fournisseur.Objet_de_la_demandeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mode_de_passation() As String
            Get
                Try 
                    Return CType(Me(Me.tableProtocole_Accord_Fournisseur.Mode_de_passationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Mode_de_passation' dans la table 'Protocole_Accord_Fou"& _ 
                            "rnisseur' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProtocole_Accord_Fournisseur.Mode_de_passationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Durée_contrat() As String
            Get
                Try 
                    Return CType(Me(Me.tableProtocole_Accord_Fournisseur.Durée_contratColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Durée_contrat' dans la table 'Protocole_Accord_Fournis"& _ 
                            "seur' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProtocole_Accord_Fournisseur.Durée_contratColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type_contrat() As String
            Get
                Try 
                    Return CType(Me(Me.tableProtocole_Accord_Fournisseur.Type_contratColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Type_contrat' dans la table 'Protocole_Accord_Fourniss"& _ 
                            "eur' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProtocole_Accord_Fournisseur.Type_contratColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fichier_PDF() As Object
            Get
                Try 
                    Return CType(Me(Me.tableProtocole_Accord_Fournisseur.Fichier_PDFColumn),Object)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Fichier_PDF' dans la table 'Protocole_Accord_Fournisse"& _ 
                            "ur' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProtocole_Accord_Fournisseur.Fichier_PDFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Commande() As String
            Get
                Try 
                    Return CType(Me(Me.tableProtocole_Accord_Fournisseur.CommandeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Commande' dans la table 'Protocole_Accord_Fournisseur'"& _ 
                            " est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProtocole_Accord_Fournisseur.CommandeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Delai_Contractuelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableProtocole_Accord_Fournisseur.Delai_ContractuelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Delai_Contractuelle' dans la table 'Protocole_Accord_F"& _ 
                            "ournisseur' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProtocole_Accord_Fournisseur.Delai_ContractuelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClientNull() As Boolean
            Return Me.IsNull(Me.tableProtocole_Accord_Fournisseur.ClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClientNull()
            Me(Me.tableProtocole_Accord_Fournisseur.ClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantNull() As Boolean
            Return Me.IsNull(Me.tableProtocole_Accord_Fournisseur.MontantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantNull()
            Me(Me.tableProtocole_Accord_Fournisseur.MontantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDate_SignatureNull() As Boolean
            Return Me.IsNull(Me.tableProtocole_Accord_Fournisseur.Date_SignatureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDate_SignatureNull()
            Me(Me.tableProtocole_Accord_Fournisseur.Date_SignatureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRéfferrenceNull() As Boolean
            Return Me.IsNull(Me.tableProtocole_Accord_Fournisseur.RéfferrenceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRéfferrenceNull()
            Me(Me.tableProtocole_Accord_Fournisseur.RéfferrenceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObjet_de_la_demandeNull() As Boolean
            Return Me.IsNull(Me.tableProtocole_Accord_Fournisseur.Objet_de_la_demandeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObjet_de_la_demandeNull()
            Me(Me.tableProtocole_Accord_Fournisseur.Objet_de_la_demandeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMode_de_passationNull() As Boolean
            Return Me.IsNull(Me.tableProtocole_Accord_Fournisseur.Mode_de_passationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMode_de_passationNull()
            Me(Me.tableProtocole_Accord_Fournisseur.Mode_de_passationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDurée_contratNull() As Boolean
            Return Me.IsNull(Me.tableProtocole_Accord_Fournisseur.Durée_contratColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDurée_contratNull()
            Me(Me.tableProtocole_Accord_Fournisseur.Durée_contratColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsType_contratNull() As Boolean
            Return Me.IsNull(Me.tableProtocole_Accord_Fournisseur.Type_contratColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetType_contratNull()
            Me(Me.tableProtocole_Accord_Fournisseur.Type_contratColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFichier_PDFNull() As Boolean
            Return Me.IsNull(Me.tableProtocole_Accord_Fournisseur.Fichier_PDFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFichier_PDFNull()
            Me(Me.tableProtocole_Accord_Fournisseur.Fichier_PDFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommandeNull() As Boolean
            Return Me.IsNull(Me.tableProtocole_Accord_Fournisseur.CommandeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommandeNull()
            Me(Me.tableProtocole_Accord_Fournisseur.CommandeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDelai_ContractuelleNull() As Boolean
            Return Me.IsNull(Me.tableProtocole_Accord_Fournisseur.Delai_ContractuelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDelai_ContractuelleNull()
            Me(Me.tableProtocole_Accord_Fournisseur.Delai_ContractuelleColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Table_ContratRow
        Inherits Global.System.Data.DataRow
        
        Private tableTable_Contrat As Table_ContratDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTable_Contrat = CType(Me.Table,Table_ContratDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableTable_Contrat.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableTable_Contrat.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Client() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Contrat.ClientColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Client' dans la table 'Table_Contrat' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Contrat.ClientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Montant() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Contrat.MontantColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Montant' dans la table 'Table_Contrat' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Contrat.MontantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Date_Signature() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTable_Contrat.Date_SignatureColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Date_Signature' dans la table 'Table_Contrat' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Contrat.Date_SignatureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Réfferrence() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Contrat.RéfferrenceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Réfferrence' dans la table 'Table_Contrat' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Contrat.RéfferrenceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Objet_de_la_demande() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Contrat.Objet_de_la_demandeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Objet_de_la_demande' dans la table 'Table_Contrat' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Contrat.Objet_de_la_demandeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mode_de_passation() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Contrat.Mode_de_passationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Mode_de_passation' dans la table 'Table_Contrat' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Contrat.Mode_de_passationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Durée_contrat() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Contrat.Durée_contratColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Durée_contrat' dans la table 'Table_Contrat' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Contrat.Durée_contratColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type_contrat() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Contrat.Type_contratColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Type_contrat' dans la table 'Table_Contrat' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Contrat.Type_contratColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fichier_PDF() As Object
            Get
                Try 
                    Return CType(Me(Me.tableTable_Contrat.Fichier_PDFColumn),Object)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Fichier_PDF' dans la table 'Table_Contrat' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Contrat.Fichier_PDFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Commande() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Contrat.CommandeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Commande' dans la table 'Table_Contrat' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Contrat.CommandeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Delai_Contractuelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableTable_Contrat.Delai_ContractuelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Delai_Contractuelle' dans la table 'Table_Contrat' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTable_Contrat.Delai_ContractuelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClientNull() As Boolean
            Return Me.IsNull(Me.tableTable_Contrat.ClientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClientNull()
            Me(Me.tableTable_Contrat.ClientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontantNull() As Boolean
            Return Me.IsNull(Me.tableTable_Contrat.MontantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontantNull()
            Me(Me.tableTable_Contrat.MontantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDate_SignatureNull() As Boolean
            Return Me.IsNull(Me.tableTable_Contrat.Date_SignatureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDate_SignatureNull()
            Me(Me.tableTable_Contrat.Date_SignatureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRéfferrenceNull() As Boolean
            Return Me.IsNull(Me.tableTable_Contrat.RéfferrenceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRéfferrenceNull()
            Me(Me.tableTable_Contrat.RéfferrenceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObjet_de_la_demandeNull() As Boolean
            Return Me.IsNull(Me.tableTable_Contrat.Objet_de_la_demandeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObjet_de_la_demandeNull()
            Me(Me.tableTable_Contrat.Objet_de_la_demandeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMode_de_passationNull() As Boolean
            Return Me.IsNull(Me.tableTable_Contrat.Mode_de_passationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMode_de_passationNull()
            Me(Me.tableTable_Contrat.Mode_de_passationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDurée_contratNull() As Boolean
            Return Me.IsNull(Me.tableTable_Contrat.Durée_contratColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDurée_contratNull()
            Me(Me.tableTable_Contrat.Durée_contratColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsType_contratNull() As Boolean
            Return Me.IsNull(Me.tableTable_Contrat.Type_contratColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetType_contratNull()
            Me(Me.tableTable_Contrat.Type_contratColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFichier_PDFNull() As Boolean
            Return Me.IsNull(Me.tableTable_Contrat.Fichier_PDFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFichier_PDFNull()
            Me(Me.tableTable_Contrat.Fichier_PDFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommandeNull() As Boolean
            Return Me.IsNull(Me.tableTable_Contrat.CommandeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommandeNull()
            Me(Me.tableTable_Contrat.CommandeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDelai_ContractuelleNull() As Boolean
            Return Me.IsNull(Me.tableTable_Contrat.Delai_ContractuelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDelai_ContractuelleNull()
            Me(Me.tableTable_Contrat.Delai_ContractuelleColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Validation_contratRow
        Inherits Global.System.Data.DataRow
        
        Private tableValidation_contrat As Validation_contratDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableValidation_contrat = CType(Me.Table,Validation_contratDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id() As Integer
            Get
                Return CType(Me(Me.tableValidation_contrat.idColumn),Integer)
            End Get
            Set
                Me(Me.tableValidation_contrat.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property client() As String
            Get
                Try 
                    Return CType(Me(Me.tableValidation_contrat.clientColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'client' dans la table 'Validation_contrat' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableValidation_contrat.clientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property durée_contrat() As String
            Get
                Try 
                    Return CType(Me(Me.tableValidation_contrat.durée_contratColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'durée_contrat' dans la table 'Validation_contrat' est "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableValidation_contrat.durée_contratColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property refference() As String
            Get
                Try 
                    Return CType(Me(Me.tableValidation_contrat.refferenceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'refference' dans la table 'Validation_contrat' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableValidation_contrat.refferenceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property date_signature() As Date
            Get
                Try 
                    Return CType(Me(Me.tableValidation_contrat.date_signatureColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'date_signature' dans la table 'Validation_contrat' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableValidation_contrat.date_signatureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property mode_passation() As String
            Get
                Try 
                    Return CType(Me(Me.tableValidation_contrat.mode_passationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'mode_passation' dans la table 'Validation_contrat' est"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableValidation_contrat.mode_passationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property type_contrat() As String
            Get
                Try 
                    Return CType(Me(Me.tableValidation_contrat.type_contratColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'type_contrat' dans la table 'Validation_contrat' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableValidation_contrat.type_contratColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property montant() As String
            Get
                Try 
                    Return CType(Me(Me.tableValidation_contrat.montantColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'montant' dans la table 'Validation_contrat' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableValidation_contrat.montantColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Objet_de_la_demande() As String
            Get
                Try 
                    Return CType(Me(Me.tableValidation_contrat.Objet_de_la_demandeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Objet_de_la_demande' dans la table 'Validation_contrat"& _ 
                            "' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableValidation_contrat.Objet_de_la_demandeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Date_validation() As Date
            Get
                Try 
                    Return CType(Me(Me.tableValidation_contrat.Date_validationColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Date_validation' dans la table 'Validation_contrat' es"& _ 
                            "t DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableValidation_contrat.Date_validationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Date_Retour() As Date
            Get
                Try 
                    Return CType(Me(Me.tableValidation_contrat.Date_RetourColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Date_Retour' dans la table 'Validation_contrat' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableValidation_contrat.Date_RetourColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fichier_PDF() As String
            Get
                Try 
                    Return CType(Me(Me.tableValidation_contrat.Fichier_PDFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Fichier_PDF' dans la table 'Validation_contrat' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableValidation_contrat.Fichier_PDFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Commande() As String
            Get
                Try 
                    Return CType(Me(Me.tableValidation_contrat.CommandeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Commande' dans la table 'Validation_contrat' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableValidation_contrat.CommandeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Delai_Contractuelle() As String
            Get
                Try 
                    Return CType(Me(Me.tableValidation_contrat.Delai_ContractuelleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("La valeur pour la colonne 'Delai_Contractuelle' dans la table 'Validation_contrat"& _ 
                            "' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableValidation_contrat.Delai_ContractuelleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsclientNull() As Boolean
            Return Me.IsNull(Me.tableValidation_contrat.clientColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetclientNull()
            Me(Me.tableValidation_contrat.clientColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdurée_contratNull() As Boolean
            Return Me.IsNull(Me.tableValidation_contrat.durée_contratColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdurée_contratNull()
            Me(Me.tableValidation_contrat.durée_contratColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrefferenceNull() As Boolean
            Return Me.IsNull(Me.tableValidation_contrat.refferenceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrefferenceNull()
            Me(Me.tableValidation_contrat.refferenceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdate_signatureNull() As Boolean
            Return Me.IsNull(Me.tableValidation_contrat.date_signatureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdate_signatureNull()
            Me(Me.tableValidation_contrat.date_signatureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ismode_passationNull() As Boolean
            Return Me.IsNull(Me.tableValidation_contrat.mode_passationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setmode_passationNull()
            Me(Me.tableValidation_contrat.mode_passationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Istype_contratNull() As Boolean
            Return Me.IsNull(Me.tableValidation_contrat.type_contratColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Settype_contratNull()
            Me(Me.tableValidation_contrat.type_contratColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmontantNull() As Boolean
            Return Me.IsNull(Me.tableValidation_contrat.montantColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmontantNull()
            Me(Me.tableValidation_contrat.montantColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObjet_de_la_demandeNull() As Boolean
            Return Me.IsNull(Me.tableValidation_contrat.Objet_de_la_demandeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObjet_de_la_demandeNull()
            Me(Me.tableValidation_contrat.Objet_de_la_demandeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDate_validationNull() As Boolean
            Return Me.IsNull(Me.tableValidation_contrat.Date_validationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDate_validationNull()
            Me(Me.tableValidation_contrat.Date_validationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDate_RetourNull() As Boolean
            Return Me.IsNull(Me.tableValidation_contrat.Date_RetourColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDate_RetourNull()
            Me(Me.tableValidation_contrat.Date_RetourColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFichier_PDFNull() As Boolean
            Return Me.IsNull(Me.tableValidation_contrat.Fichier_PDFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFichier_PDFNull()
            Me(Me.tableValidation_contrat.Fichier_PDFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommandeNull() As Boolean
            Return Me.IsNull(Me.tableValidation_contrat.CommandeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommandeNull()
            Me(Me.tableValidation_contrat.CommandeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDelai_ContractuelleNull() As Boolean
            Return Me.IsNull(Me.tableValidation_contrat.Delai_ContractuelleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDelai_ContractuelleNull()
            Me(Me.tableValidation_contrat.Delai_ContractuelleColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Cahier_des_charges1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Cahier_des_charges1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Cahier_des_charges1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Cahier_des_charges1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ContratRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ContratRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ContratRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ContratRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Contrat_Cadre_ClientRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Contrat_Cadre_ClientRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Contrat_Cadre_ClientRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Contrat_Cadre_ClientRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Contrat_Cadre_FournisseurRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Contrat_Cadre_FournisseurRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Contrat_Cadre_FournisseurRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Contrat_Cadre_FournisseurRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Contrat_Etranger_ClientRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Contrat_Etranger_ClientRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Contrat_Etranger_ClientRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Contrat_Etranger_ClientRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Contrat_Etranger_FournisseurRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Contrat_Etranger_FournisseurRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Contrat_Etranger_FournisseurRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Contrat_Etranger_FournisseurRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Contrat_FournisseurRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Contrat_FournisseurRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Contrat_FournisseurRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Contrat_FournisseurRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Contrat_pour_RéviserRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Contrat_pour_RéviserRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Contrat_pour_RéviserRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Contrat_pour_RéviserRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class loginRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As loginRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As loginRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As loginRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class login_1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As login_1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As login_1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As login_1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Note_des_Réserves_ClientRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Note_des_Réserves_ClientRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Note_des_Réserves_ClientRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Note_des_Réserves_ClientRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ODSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ODSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ODSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ODSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ODS_APR_PROGRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ODS_APR_PROGRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ODS_APR_PROGRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ODS_APR_PROGRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class projet_du_contratRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As projet_du_contratRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As projet_du_contratRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As projet_du_contratRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Protocole_Accord_ClientRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Protocole_Accord_ClientRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Protocole_Accord_ClientRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Protocole_Accord_ClientRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Protocole_Accord_FournisseurRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Protocole_Accord_FournisseurRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Protocole_Accord_FournisseurRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Protocole_Accord_FournisseurRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Table_ContratRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Table_ContratRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Table_ContratRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Table_ContratRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Validation_contratRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Validation_contratRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Validation_contratRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Validation_contratRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace loginformDataSet13TableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Cahier_des_charges1TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Cahier_des_charges1"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("Objet_de_la_demande", "Objet_de_la_demande")
            tableMapping.ColumnMappings.Add("Réfferrence", "Réfferrence")
            tableMapping.ColumnMappings.Add("Structure", "Structure")
            tableMapping.ColumnMappings.Add("Mode_Passation", "Mode_Passation")
            tableMapping.ColumnMappings.Add("Fichier_PDF", "Fichier_PDF")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Cahier_des_charges1] ([Objet_de_la_demande], [Réfferrence], [S"& _ 
                "tructure], [Mode_Passation], [Fichier_PDF]) VALUES (@Objet_de_la_demande, @Réffe"& _ 
                "rrence, @Structure, @Mode_Passation, @Fichier_PDF)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Objet_de_la_demande", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Objet_de_la_demande", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Réfferrence", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Réfferrence", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Structure", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Structure", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Mode_Passation", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Mode_Passation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fichier_PDF", Global.System.Data.SqlDbType.[Variant], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fichier_PDF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.GestionContrats.My.MySettings.Default.loginformConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT id, Objet_de_la_demande, Réfferrence, Structure, Mode_Passation, Fichier_P"& _ 
                "DF FROM dbo.Cahier_des_charges1"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As loginformDataSet13.Cahier_des_charges1DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As loginformDataSet13.Cahier_des_charges1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As loginformDataSet13.Cahier_des_charges1DataTable = New loginformDataSet13.Cahier_des_charges1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As loginformDataSet13.Cahier_des_charges1DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As loginformDataSet13) As Integer
            Return Me.Adapter.Update(dataSet, "Cahier_des_charges1")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Objet_de_la_demande As String, ByVal Réfferrence As String, ByVal _Structure As String, ByVal Mode_Passation As String, ByVal Fichier_PDF As Object) As Integer
            If (Objet_de_la_demande Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Objet_de_la_demande,String)
            End If
            If (Réfferrence Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Réfferrence,String)
            End If
            If (_Structure Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(_Structure,String)
            End If
            If (Mode_Passation Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Mode_Passation,String)
            End If
            If (Fichier_PDF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Fichier_PDF,Object)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ContratTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Contrat"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Client", "Client")
            tableMapping.ColumnMappings.Add("Montant", "Montant")
            tableMapping.ColumnMappings.Add("Date_Signature", "Date_Signature")
            tableMapping.ColumnMappings.Add("Réfferrence", "Réfferrence")
            tableMapping.ColumnMappings.Add("Objet_de_la_demane", "Objet_de_la_demane")
            tableMapping.ColumnMappings.Add("Mode_de_passation", "Mode_de_passation")
            tableMapping.ColumnMappings.Add("Delai d'execution", "Delai d'execution")
            tableMapping.ColumnMappings.Add("Durée_de_contrat", "Durée_de_contrat")
            tableMapping.ColumnMappings.Add("type_contrat", "type_contrat")
            tableMapping.ColumnMappings.Add("Mode_Execution", "Mode_Execution")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Contrat] ([Client], [Montant], [Date_Signature], [Réfferrence]"& _ 
                ", [Objet_de_la_demane], [Mode_de_passation], [Delai d'execution], [Durée_de_cont"& _ 
                "rat], [type_contrat], [Mode_Execution]) VALUES (@Client, @Montant, @Date_Signatu"& _ 
                "re, @Réfferrence, @Objet_de_la_demane, @Mode_de_passation, @p1, @Durée_de_contra"& _ 
                "t, @type_contrat, @Mode_Execution)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Client", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Montant", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Montant", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Date_Signature", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Date_Signature", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Réfferrence", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Réfferrence", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Objet_de_la_demane", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Objet_de_la_demane", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Mode_de_passation", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Mode_de_passation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Delai d'execution", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Durée_de_contrat", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Durée_de_contrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@type_contrat", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "type_contrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Mode_Execution", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Mode_Execution", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.GestionContrats.My.MySettings.Default.loginformConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, Client, Montant, Date_Signature, Réfferrence, Objet_de_la_demane, Mode"& _ 
                "_de_passation, [Delai d'execution], Durée_de_contrat, type_contrat, Mode_Executi"& _ 
                "on FROM dbo.Contrat"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As loginformDataSet13.ContratDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As loginformDataSet13.ContratDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As loginformDataSet13.ContratDataTable = New loginformDataSet13.ContratDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As loginformDataSet13.ContratDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As loginformDataSet13) As Integer
            Return Me.Adapter.Update(dataSet, "Contrat")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Client As String, ByVal Montant As String, ByVal Date_Signature As String, ByVal Réfferrence As String, ByVal Objet_de_la_demane As String, ByVal Mode_de_passation As String, ByVal p1 As String, ByVal Durée_de_contrat As String, ByVal type_contrat As String, ByVal Mode_Execution As String) As Integer
            If (Client Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Client,String)
            End If
            If (Montant Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Montant,String)
            End If
            If (Date_Signature Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Date_Signature,String)
            End If
            If (Réfferrence Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Réfferrence,String)
            End If
            If (Objet_de_la_demane Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Objet_de_la_demane,String)
            End If
            If (Mode_de_passation Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Mode_de_passation,String)
            End If
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(p1,String)
            End If
            If (Durée_de_contrat Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Durée_de_contrat,String)
            End If
            If (type_contrat Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(type_contrat,String)
            End If
            If (Mode_Execution Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Mode_Execution,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Contrat_Cadre_ClientTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Contrat_Cadre_Client"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Client", "Client")
            tableMapping.ColumnMappings.Add("Montant", "Montant")
            tableMapping.ColumnMappings.Add("Date_Signature", "Date_Signature")
            tableMapping.ColumnMappings.Add("Réfferrence", "Réfferrence")
            tableMapping.ColumnMappings.Add("Objet_de_la_demande", "Objet_de_la_demande")
            tableMapping.ColumnMappings.Add("Mode_de_passation", "Mode_de_passation")
            tableMapping.ColumnMappings.Add("Durée_contrat", "Durée_contrat")
            tableMapping.ColumnMappings.Add("Type_contrat", "Type_contrat")
            tableMapping.ColumnMappings.Add("Fichier_PDF", "Fichier_PDF")
            tableMapping.ColumnMappings.Add("Commande", "Commande")
            tableMapping.ColumnMappings.Add("Delai_Contractuelle", "Delai_Contractuelle")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Contrat_Cadre_Client] ([ID], [Client], [Montant], [Date_Signat"& _ 
                "ure], [Réfferrence], [Objet_de_la_demande], [Mode_de_passation], [Durée_contrat]"& _ 
                ", [Type_contrat], [Fichier_PDF], [Commande], [Delai_Contractuelle]) VALUES (@ID,"& _ 
                " @Client, @Montant, @Date_Signature, @Réfferrence, @Objet_de_la_demande, @Mode_d"& _ 
                "e_passation, @Durée_contrat, @Type_contrat, @Fichier_PDF, @Commande, @Delai_Cont"& _ 
                "ractuelle)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Client", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Montant", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Montant", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Date_Signature", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Date_Signature", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Réfferrence", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Réfferrence", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Objet_de_la_demande", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Objet_de_la_demande", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Mode_de_passation", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Mode_de_passation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Durée_contrat", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Durée_contrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Type_contrat", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Type_contrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fichier_PDF", Global.System.Data.SqlDbType.[Variant], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fichier_PDF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Commande", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Commande", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Delai_Contractuelle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Delai_Contractuelle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.GestionContrats.My.MySettings.Default.loginformConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, Client, Montant, Date_Signature, Réfferrence, Objet_de_la_demande, Mod"& _ 
                "e_de_passation, Durée_contrat, Type_contrat, Fichier_PDF, Commande, Delai_Contra"& _ 
                "ctuelle FROM dbo.Contrat_Cadre_Client"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As loginformDataSet13.Contrat_Cadre_ClientDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As loginformDataSet13.Contrat_Cadre_ClientDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As loginformDataSet13.Contrat_Cadre_ClientDataTable = New loginformDataSet13.Contrat_Cadre_ClientDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As loginformDataSet13.Contrat_Cadre_ClientDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As loginformDataSet13) As Integer
            Return Me.Adapter.Update(dataSet, "Contrat_Cadre_Client")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID As Integer, ByVal Client As String, ByVal Montant As String, ByVal Date_Signature As Global.System.Nullable(Of Date), ByVal Réfferrence As String, ByVal Objet_de_la_demande As String, ByVal Mode_de_passation As String, ByVal Durée_contrat As String, ByVal Type_contrat As String, ByVal Fichier_PDF As Object, ByVal Commande As String, ByVal Delai_Contractuelle As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID,Integer)
            If (Client Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Client,String)
            End If
            If (Montant Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Montant,String)
            End If
            If (Date_Signature.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Date_Signature.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Réfferrence Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Réfferrence,String)
            End If
            If (Objet_de_la_demande Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Objet_de_la_demande,String)
            End If
            If (Mode_de_passation Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Mode_de_passation,String)
            End If
            If (Durée_contrat Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Durée_contrat,String)
            End If
            If (Type_contrat Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Type_contrat,String)
            End If
            If (Fichier_PDF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Fichier_PDF,Object)
            End If
            If (Commande Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Commande,String)
            End If
            If (Delai_Contractuelle Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Delai_Contractuelle,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Contrat_Cadre_FournisseurTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Contrat_Cadre_Fournisseur"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Client", "Client")
            tableMapping.ColumnMappings.Add("Montant", "Montant")
            tableMapping.ColumnMappings.Add("Date_Signature", "Date_Signature")
            tableMapping.ColumnMappings.Add("Réfferrence", "Réfferrence")
            tableMapping.ColumnMappings.Add("Objet_de_la_demande", "Objet_de_la_demande")
            tableMapping.ColumnMappings.Add("Mode_de_passation", "Mode_de_passation")
            tableMapping.ColumnMappings.Add("Durée_contrat", "Durée_contrat")
            tableMapping.ColumnMappings.Add("Type_contrat", "Type_contrat")
            tableMapping.ColumnMappings.Add("Fichier_PDF", "Fichier_PDF")
            tableMapping.ColumnMappings.Add("Commande", "Commande")
            tableMapping.ColumnMappings.Add("Delai_Contractuelle", "Delai_Contractuelle")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Contrat_Cadre_Fournisseur] ([ID], [Client], [Montant], [Date_S"& _ 
                "ignature], [Réfferrence], [Objet_de_la_demande], [Mode_de_passation], [Durée_con"& _ 
                "trat], [Type_contrat], [Fichier_PDF], [Commande], [Delai_Contractuelle]) VALUES "& _ 
                "(@ID, @Client, @Montant, @Date_Signature, @Réfferrence, @Objet_de_la_demande, @M"& _ 
                "ode_de_passation, @Durée_contrat, @Type_contrat, @Fichier_PDF, @Commande, @Delai"& _ 
                "_Contractuelle)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Client", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Montant", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Montant", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Date_Signature", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Date_Signature", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Réfferrence", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Réfferrence", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Objet_de_la_demande", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Objet_de_la_demande", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Mode_de_passation", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Mode_de_passation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Durée_contrat", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Durée_contrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Type_contrat", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Type_contrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fichier_PDF", Global.System.Data.SqlDbType.[Variant], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fichier_PDF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Commande", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Commande", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Delai_Contractuelle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Delai_Contractuelle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.GestionContrats.My.MySettings.Default.loginformConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, Client, Montant, Date_Signature, Réfferrence, Objet_de_la_demande, Mod"& _ 
                "e_de_passation, Durée_contrat, Type_contrat, Fichier_PDF, Commande, Delai_Contra"& _ 
                "ctuelle FROM dbo.Contrat_Cadre_Fournisseur"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As loginformDataSet13.Contrat_Cadre_FournisseurDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As loginformDataSet13.Contrat_Cadre_FournisseurDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As loginformDataSet13.Contrat_Cadre_FournisseurDataTable = New loginformDataSet13.Contrat_Cadre_FournisseurDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As loginformDataSet13.Contrat_Cadre_FournisseurDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As loginformDataSet13) As Integer
            Return Me.Adapter.Update(dataSet, "Contrat_Cadre_Fournisseur")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID As Integer, ByVal Client As String, ByVal Montant As String, ByVal Date_Signature As Global.System.Nullable(Of Date), ByVal Réfferrence As String, ByVal Objet_de_la_demande As String, ByVal Mode_de_passation As String, ByVal Durée_contrat As String, ByVal Type_contrat As String, ByVal Fichier_PDF As Object, ByVal Commande As String, ByVal Delai_Contractuelle As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID,Integer)
            If (Client Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Client,String)
            End If
            If (Montant Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Montant,String)
            End If
            If (Date_Signature.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Date_Signature.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Réfferrence Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Réfferrence,String)
            End If
            If (Objet_de_la_demande Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Objet_de_la_demande,String)
            End If
            If (Mode_de_passation Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Mode_de_passation,String)
            End If
            If (Durée_contrat Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Durée_contrat,String)
            End If
            If (Type_contrat Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Type_contrat,String)
            End If
            If (Fichier_PDF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Fichier_PDF,Object)
            End If
            If (Commande Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Commande,String)
            End If
            If (Delai_Contractuelle Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Delai_Contractuelle,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Contrat_Etranger_ClientTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Contrat_Etranger_Client"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Client", "Client")
            tableMapping.ColumnMappings.Add("Montant", "Montant")
            tableMapping.ColumnMappings.Add("Date_Signature", "Date_Signature")
            tableMapping.ColumnMappings.Add("Réfferrence", "Réfferrence")
            tableMapping.ColumnMappings.Add("Objet_de_la_demande", "Objet_de_la_demande")
            tableMapping.ColumnMappings.Add("Mode_de_passation", "Mode_de_passation")
            tableMapping.ColumnMappings.Add("Durée_contrat", "Durée_contrat")
            tableMapping.ColumnMappings.Add("Type_contrat", "Type_contrat")
            tableMapping.ColumnMappings.Add("Fichier_PDF", "Fichier_PDF")
            tableMapping.ColumnMappings.Add("Commande", "Commande")
            tableMapping.ColumnMappings.Add("Delai_Contractuelle", "Delai_Contractuelle")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Contrat_Etranger_Client] ([ID], [Client], [Montant], [Date_Sig"& _ 
                "nature], [Réfferrence], [Objet_de_la_demande], [Mode_de_passation], [Durée_contr"& _ 
                "at], [Type_contrat], [Fichier_PDF], [Commande], [Delai_Contractuelle]) VALUES (@"& _ 
                "ID, @Client, @Montant, @Date_Signature, @Réfferrence, @Objet_de_la_demande, @Mod"& _ 
                "e_de_passation, @Durée_contrat, @Type_contrat, @Fichier_PDF, @Commande, @Delai_C"& _ 
                "ontractuelle)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Client", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Montant", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Montant", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Date_Signature", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Date_Signature", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Réfferrence", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Réfferrence", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Objet_de_la_demande", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Objet_de_la_demande", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Mode_de_passation", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Mode_de_passation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Durée_contrat", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Durée_contrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Type_contrat", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Type_contrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fichier_PDF", Global.System.Data.SqlDbType.[Variant], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fichier_PDF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Commande", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Commande", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Delai_Contractuelle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Delai_Contractuelle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.GestionContrats.My.MySettings.Default.loginformConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, Client, Montant, Date_Signature, Réfferrence, Objet_de_la_demande, Mod"& _ 
                "e_de_passation, Durée_contrat, Type_contrat, Fichier_PDF, Commande, Delai_Contra"& _ 
                "ctuelle FROM dbo.Contrat_Etranger_Client"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As loginformDataSet13.Contrat_Etranger_ClientDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As loginformDataSet13.Contrat_Etranger_ClientDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As loginformDataSet13.Contrat_Etranger_ClientDataTable = New loginformDataSet13.Contrat_Etranger_ClientDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As loginformDataSet13.Contrat_Etranger_ClientDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As loginformDataSet13) As Integer
            Return Me.Adapter.Update(dataSet, "Contrat_Etranger_Client")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID As Integer, ByVal Client As String, ByVal Montant As String, ByVal Date_Signature As Global.System.Nullable(Of Date), ByVal Réfferrence As String, ByVal Objet_de_la_demande As String, ByVal Mode_de_passation As String, ByVal Durée_contrat As String, ByVal Type_contrat As String, ByVal Fichier_PDF As Object, ByVal Commande As String, ByVal Delai_Contractuelle As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID,Integer)
            If (Client Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Client,String)
            End If
            If (Montant Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Montant,String)
            End If
            If (Date_Signature.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Date_Signature.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Réfferrence Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Réfferrence,String)
            End If
            If (Objet_de_la_demande Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Objet_de_la_demande,String)
            End If
            If (Mode_de_passation Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Mode_de_passation,String)
            End If
            If (Durée_contrat Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Durée_contrat,String)
            End If
            If (Type_contrat Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Type_contrat,String)
            End If
            If (Fichier_PDF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Fichier_PDF,Object)
            End If
            If (Commande Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Commande,String)
            End If
            If (Delai_Contractuelle Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Delai_Contractuelle,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Contrat_Etranger_FournisseurTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Contrat_Etranger_Fournisseur"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Client", "Client")
            tableMapping.ColumnMappings.Add("Montant", "Montant")
            tableMapping.ColumnMappings.Add("Date_Signature", "Date_Signature")
            tableMapping.ColumnMappings.Add("Réfferrence", "Réfferrence")
            tableMapping.ColumnMappings.Add("Objet_de_la_demande", "Objet_de_la_demande")
            tableMapping.ColumnMappings.Add("Mode_de_passation", "Mode_de_passation")
            tableMapping.ColumnMappings.Add("Durée_contrat", "Durée_contrat")
            tableMapping.ColumnMappings.Add("Type_contrat", "Type_contrat")
            tableMapping.ColumnMappings.Add("Fichier_PDF", "Fichier_PDF")
            tableMapping.ColumnMappings.Add("Commande", "Commande")
            tableMapping.ColumnMappings.Add("Delai_Contractuelle", "Delai_Contractuelle")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Contrat_Etranger_Fournisseur] ([ID], [Client], [Montant], [Dat"& _ 
                "e_Signature], [Réfferrence], [Objet_de_la_demande], [Mode_de_passation], [Durée_"& _ 
                "contrat], [Type_contrat], [Fichier_PDF], [Commande], [Delai_Contractuelle]) VALU"& _ 
                "ES (@ID, @Client, @Montant, @Date_Signature, @Réfferrence, @Objet_de_la_demande,"& _ 
                " @Mode_de_passation, @Durée_contrat, @Type_contrat, @Fichier_PDF, @Commande, @De"& _ 
                "lai_Contractuelle)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Client", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Montant", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Montant", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Date_Signature", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Date_Signature", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Réfferrence", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Réfferrence", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Objet_de_la_demande", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Objet_de_la_demande", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Mode_de_passation", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Mode_de_passation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Durée_contrat", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Durée_contrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Type_contrat", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Type_contrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fichier_PDF", Global.System.Data.SqlDbType.[Variant], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fichier_PDF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Commande", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Commande", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Delai_Contractuelle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Delai_Contractuelle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.GestionContrats.My.MySettings.Default.loginformConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, Client, Montant, Date_Signature, Réfferrence, Objet_de_la_demande, Mod"& _ 
                "e_de_passation, Durée_contrat, Type_contrat, Fichier_PDF, Commande, Delai_Contra"& _ 
                "ctuelle FROM dbo.Contrat_Etranger_Fournisseur"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As loginformDataSet13.Contrat_Etranger_FournisseurDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As loginformDataSet13.Contrat_Etranger_FournisseurDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As loginformDataSet13.Contrat_Etranger_FournisseurDataTable = New loginformDataSet13.Contrat_Etranger_FournisseurDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As loginformDataSet13.Contrat_Etranger_FournisseurDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As loginformDataSet13) As Integer
            Return Me.Adapter.Update(dataSet, "Contrat_Etranger_Fournisseur")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID As Integer, ByVal Client As String, ByVal Montant As String, ByVal Date_Signature As Global.System.Nullable(Of Date), ByVal Réfferrence As String, ByVal Objet_de_la_demande As String, ByVal Mode_de_passation As String, ByVal Durée_contrat As String, ByVal Type_contrat As String, ByVal Fichier_PDF As Object, ByVal Commande As String, ByVal Delai_Contractuelle As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID,Integer)
            If (Client Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Client,String)
            End If
            If (Montant Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Montant,String)
            End If
            If (Date_Signature.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Date_Signature.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Réfferrence Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Réfferrence,String)
            End If
            If (Objet_de_la_demande Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Objet_de_la_demande,String)
            End If
            If (Mode_de_passation Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Mode_de_passation,String)
            End If
            If (Durée_contrat Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Durée_contrat,String)
            End If
            If (Type_contrat Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Type_contrat,String)
            End If
            If (Fichier_PDF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Fichier_PDF,Object)
            End If
            If (Commande Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Commande,String)
            End If
            If (Delai_Contractuelle Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Delai_Contractuelle,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Contrat_FournisseurTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Contrat_Fournisseur"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Client", "Client")
            tableMapping.ColumnMappings.Add("Montant", "Montant")
            tableMapping.ColumnMappings.Add("Date_Signature", "Date_Signature")
            tableMapping.ColumnMappings.Add("Réfferrence", "Réfferrence")
            tableMapping.ColumnMappings.Add("Objet_de_la_demande", "Objet_de_la_demande")
            tableMapping.ColumnMappings.Add("Mode_de_passation", "Mode_de_passation")
            tableMapping.ColumnMappings.Add("Durée_contrat", "Durée_contrat")
            tableMapping.ColumnMappings.Add("Type_contrat", "Type_contrat")
            tableMapping.ColumnMappings.Add("Fichier_PDF", "Fichier_PDF")
            tableMapping.ColumnMappings.Add("Commande", "Commande")
            tableMapping.ColumnMappings.Add("Delai_Contractuelle", "Delai_Contractuelle")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Contrat_Fournisseur] ([ID], [Client], [Montant], [Date_Signatu"& _ 
                "re], [Réfferrence], [Objet_de_la_demande], [Mode_de_passation], [Durée_contrat],"& _ 
                " [Type_contrat], [Fichier_PDF], [Commande], [Delai_Contractuelle]) VALUES (@ID, "& _ 
                "@Client, @Montant, @Date_Signature, @Réfferrence, @Objet_de_la_demande, @Mode_de"& _ 
                "_passation, @Durée_contrat, @Type_contrat, @Fichier_PDF, @Commande, @Delai_Contr"& _ 
                "actuelle)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Client", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Montant", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Montant", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Date_Signature", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Date_Signature", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Réfferrence", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Réfferrence", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Objet_de_la_demande", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Objet_de_la_demande", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Mode_de_passation", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Mode_de_passation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Durée_contrat", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Durée_contrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Type_contrat", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Type_contrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fichier_PDF", Global.System.Data.SqlDbType.[Variant], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fichier_PDF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Commande", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Commande", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Delai_Contractuelle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Delai_Contractuelle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.GestionContrats.My.MySettings.Default.loginformConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, Client, Montant, Date_Signature, Réfferrence, Objet_de_la_demande, Mod"& _ 
                "e_de_passation, Durée_contrat, Type_contrat, Fichier_PDF, Commande, Delai_Contra"& _ 
                "ctuelle FROM dbo.Contrat_Fournisseur"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As loginformDataSet13.Contrat_FournisseurDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As loginformDataSet13.Contrat_FournisseurDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As loginformDataSet13.Contrat_FournisseurDataTable = New loginformDataSet13.Contrat_FournisseurDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As loginformDataSet13.Contrat_FournisseurDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As loginformDataSet13) As Integer
            Return Me.Adapter.Update(dataSet, "Contrat_Fournisseur")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID As Integer, ByVal Client As String, ByVal Montant As String, ByVal Date_Signature As Global.System.Nullable(Of Date), ByVal Réfferrence As String, ByVal Objet_de_la_demande As String, ByVal Mode_de_passation As String, ByVal Durée_contrat As String, ByVal Type_contrat As String, ByVal Fichier_PDF As Object, ByVal Commande As String, ByVal Delai_Contractuelle As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID,Integer)
            If (Client Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Client,String)
            End If
            If (Montant Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Montant,String)
            End If
            If (Date_Signature.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Date_Signature.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Réfferrence Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Réfferrence,String)
            End If
            If (Objet_de_la_demande Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Objet_de_la_demande,String)
            End If
            If (Mode_de_passation Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Mode_de_passation,String)
            End If
            If (Durée_contrat Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Durée_contrat,String)
            End If
            If (Type_contrat Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Type_contrat,String)
            End If
            If (Fichier_PDF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Fichier_PDF,Object)
            End If
            If (Commande Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Commande,String)
            End If
            If (Delai_Contractuelle Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Delai_Contractuelle,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Contrat_pour_RéviserTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Contrat_pour_Réviser"
            tableMapping.ColumnMappings.Add("DateArriver", "DateArriver")
            tableMapping.ColumnMappings.Add("DateDepart", "DateDepart")
            tableMapping.ColumnMappings.Add("DateVerification", "DateVerification")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Contrat_pour_Réviser] ([DateArriver], [DateDepart], [DateVerif"& _ 
                "ication]) VALUES (@DateArriver, @DateDepart, @DateVerification)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateArriver", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateArriver", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateDepart", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateDepart", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateVerification", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateVerification", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.GestionContrats.My.MySettings.Default.loginformConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT DateArriver, DateDepart, DateVerification FROM dbo.Contrat_pour_Réviser"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As loginformDataSet13.Contrat_pour_RéviserDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As loginformDataSet13.Contrat_pour_RéviserDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As loginformDataSet13.Contrat_pour_RéviserDataTable = New loginformDataSet13.Contrat_pour_RéviserDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As loginformDataSet13.Contrat_pour_RéviserDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As loginformDataSet13) As Integer
            Return Me.Adapter.Update(dataSet, "Contrat_pour_Réviser")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal DateArriver As Global.System.Nullable(Of Date), ByVal DateDepart As Global.System.Nullable(Of Date), ByVal DateVerification As Global.System.Nullable(Of Date)) As Integer
            If (DateArriver.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(DateArriver.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DateDepart.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(DateDepart.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (DateVerification.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(DateVerification.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class loginTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "login"
            tableMapping.ColumnMappings.Add("username", "username")
            tableMapping.ColumnMappings.Add("password", "password")
            tableMapping.ColumnMappings.Add("usertype", "usertype")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[login] ([username], [password], [usertype]) VALUES (@username,"& _ 
                " @password, @usertype)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@username", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "username", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@password", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "password", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@usertype", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "usertype", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.GestionContrats.My.MySettings.Default.loginformConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT username, password, usertype FROM dbo.login"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As loginformDataSet13.loginDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As loginformDataSet13.loginDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As loginformDataSet13.loginDataTable = New loginformDataSet13.loginDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As loginformDataSet13.loginDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As loginformDataSet13) As Integer
            Return Me.Adapter.Update(dataSet, "login")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal username As String, ByVal password As String, ByVal usertype As String) As Integer
            If (username Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(username,String)
            End If
            If (password Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(password,String)
            End If
            If (usertype Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(usertype,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class login_1TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "login_1"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("username", "username")
            tableMapping.ColumnMappings.Add("password", "password")
            tableMapping.ColumnMappings.Add("usertype", "usertype")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[login_1] ([username], [password], [usertype]) VALUES (@usernam"& _ 
                "e, @password, @usertype)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@username", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "username", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@password", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "password", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@usertype", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "usertype", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.GestionContrats.My.MySettings.Default.loginformConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT id, username, password, usertype FROM dbo.login_1"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As loginformDataSet13.login_1DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As loginformDataSet13.login_1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As loginformDataSet13.login_1DataTable = New loginformDataSet13.login_1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As loginformDataSet13.login_1DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As loginformDataSet13) As Integer
            Return Me.Adapter.Update(dataSet, "login_1")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal username As String, ByVal password As String, ByVal usertype As String) As Integer
            If (username Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(username,String)
            End If
            If (password Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(password,String)
            End If
            If (usertype Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(usertype,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Note_des_Réserves_ClientTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Note_des_Réserves_Client"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("client", "client")
            tableMapping.ColumnMappings.Add("Mode_passation", "Mode_passation")
            tableMapping.ColumnMappings.Add("projet_contrat", "projet_contrat")
            tableMapping.ColumnMappings.Add("note", "note")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Note_des_Réserves_Client] ([client], [Mode_passation], [projet"& _ 
                "_contrat], [note]) VALUES (@client, @Mode_passation, @projet_contrat, @note)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@client", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "client", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Mode_passation", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Mode_passation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@projet_contrat", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "projet_contrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@note", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "note", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.GestionContrats.My.MySettings.Default.loginformConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT id, client, Mode_passation, projet_contrat, note FROM dbo.Note_des_Réserve"& _ 
                "s_Client"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As loginformDataSet13.Note_des_Réserves_ClientDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As loginformDataSet13.Note_des_Réserves_ClientDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As loginformDataSet13.Note_des_Réserves_ClientDataTable = New loginformDataSet13.Note_des_Réserves_ClientDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As loginformDataSet13.Note_des_Réserves_ClientDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As loginformDataSet13) As Integer
            Return Me.Adapter.Update(dataSet, "Note_des_Réserves_Client")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal client As String, ByVal Mode_passation As String, ByVal projet_contrat As String, ByVal note As String) As Integer
            If (client Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(client,String)
            End If
            If (Mode_passation Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Mode_passation,String)
            End If
            If (projet_contrat Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(projet_contrat,String)
            End If
            If (note Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(note,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ODSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ODS"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("Client", "Client")
            tableMapping.ColumnMappings.Add("Contrat_de_Réfferrence", "Contrat_de_Réfferrence")
            tableMapping.ColumnMappings.Add("Objet_de_la_Demande", "Objet_de_la_Demande")
            tableMapping.ColumnMappings.Add("Montant", "Montant")
            tableMapping.ColumnMappings.Add("Structure", "Structure")
            tableMapping.ColumnMappings.Add("Date_Signature", "Date_Signature")
            tableMapping.ColumnMappings.Add("Réfferrence", "Réfferrence")
            tableMapping.ColumnMappings.Add("Fichier_PDF", "Fichier_PDF")
            tableMapping.ColumnMappings.Add("Commande", "Commande")
            tableMapping.ColumnMappings.Add("Delai_Contractuelle", "Delai_Contractuelle")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ODS] ([Client], [Contrat_de_Réfferrence], [Objet_de_la_Demande"& _ 
                "], [Montant], [Structure], [Date_Signature], [Réfferrence], [Fichier_PDF], [Comm"& _ 
                "ande], [Delai_Contractuelle]) VALUES (@Client, @Contrat_de_Réfferrence, @Objet_d"& _ 
                "e_la_Demande, @Montant, @Structure, @Date_Signature, @Réfferrence, @Fichier_PDF,"& _ 
                " @Commande, @Delai_Contractuelle)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Client", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Contrat_de_Réfferrence", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contrat_de_Réfferrence", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Objet_de_la_Demande", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Objet_de_la_Demande", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Montant", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Montant", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Structure", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Structure", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Date_Signature", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Date_Signature", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Réfferrence", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Réfferrence", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fichier_PDF", Global.System.Data.SqlDbType.[Variant], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fichier_PDF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Commande", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Commande", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Delai_Contractuelle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Delai_Contractuelle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.GestionContrats.My.MySettings.Default.loginformConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT id, Client, Contrat_de_Réfferrence, Objet_de_la_Demande, Montant, Structur"& _ 
                "e, Date_Signature, Réfferrence, Fichier_PDF, Commande, Delai_Contractuelle FROM "& _ 
                "dbo.ODS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As loginformDataSet13.ODSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As loginformDataSet13.ODSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As loginformDataSet13.ODSDataTable = New loginformDataSet13.ODSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As loginformDataSet13.ODSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As loginformDataSet13) As Integer
            Return Me.Adapter.Update(dataSet, "ODS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Client As String, ByVal Contrat_de_Réfferrence As String, ByVal Objet_de_la_Demande As String, ByVal Montant As String, ByVal _Structure As String, ByVal Date_Signature As Global.System.Nullable(Of Date), ByVal Réfferrence As String, ByVal Fichier_PDF As Object, ByVal Commande As String, ByVal Delai_Contractuelle As String) As Integer
            If (Client Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Client,String)
            End If
            If (Contrat_de_Réfferrence Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Contrat_de_Réfferrence,String)
            End If
            If (Objet_de_la_Demande Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Objet_de_la_Demande,String)
            End If
            If (Montant Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Montant,String)
            End If
            If (_Structure Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(_Structure,String)
            End If
            If (Date_Signature.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Date_Signature.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Réfferrence Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Réfferrence,String)
            End If
            If (Fichier_PDF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Fichier_PDF,Object)
            End If
            If (Commande Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Commande,String)
            End If
            If (Delai_Contractuelle Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Delai_Contractuelle,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ODS_APR_PROGTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ODS_APR_PROG"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("Client", "Client")
            tableMapping.ColumnMappings.Add("Contrat_de_Réfferrence", "Contrat_de_Réfferrence")
            tableMapping.ColumnMappings.Add("Objet_de_la_Demande", "Objet_de_la_Demande")
            tableMapping.ColumnMappings.Add("Montant", "Montant")
            tableMapping.ColumnMappings.Add("Structure", "Structure")
            tableMapping.ColumnMappings.Add("Date_Signature", "Date_Signature")
            tableMapping.ColumnMappings.Add("Réfferrence", "Réfferrence")
            tableMapping.ColumnMappings.Add("Fichier_PDF", "Fichier_PDF")
            tableMapping.ColumnMappings.Add("Commande", "Commande")
            tableMapping.ColumnMappings.Add("Delai_Contractuelle", "Delai_Contractuelle")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ODS_APR_PROG] ([id], [Client], [Contrat_de_Réfferrence], [Obje"& _ 
                "t_de_la_Demande], [Montant], [Structure], [Date_Signature], [Réfferrence], [Fich"& _ 
                "ier_PDF], [Commande], [Delai_Contractuelle]) VALUES (@id, @Client, @Contrat_de_R"& _ 
                "éfferrence, @Objet_de_la_Demande, @Montant, @Structure, @Date_Signature, @Réffer"& _ 
                "rence, @Fichier_PDF, @Commande, @Delai_Contractuelle)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Client", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Contrat_de_Réfferrence", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contrat_de_Réfferrence", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Objet_de_la_Demande", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Objet_de_la_Demande", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Montant", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Montant", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Structure", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Structure", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Date_Signature", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Date_Signature", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Réfferrence", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Réfferrence", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fichier_PDF", Global.System.Data.SqlDbType.[Variant], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fichier_PDF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Commande", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Commande", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Delai_Contractuelle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Delai_Contractuelle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.GestionContrats.My.MySettings.Default.loginformConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT id, Client, Contrat_de_Réfferrence, Objet_de_la_Demande, Montant, Structur"& _ 
                "e, Date_Signature, Réfferrence, Fichier_PDF, Commande, Delai_Contractuelle FROM "& _ 
                "dbo.ODS_APR_PROG"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As loginformDataSet13.ODS_APR_PROGDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As loginformDataSet13.ODS_APR_PROGDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As loginformDataSet13.ODS_APR_PROGDataTable = New loginformDataSet13.ODS_APR_PROGDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As loginformDataSet13.ODS_APR_PROGDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As loginformDataSet13) As Integer
            Return Me.Adapter.Update(dataSet, "ODS_APR_PROG")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal id As Integer, ByVal Client As String, ByVal Contrat_de_Réfferrence As String, ByVal Objet_de_la_Demande As String, ByVal Montant As String, ByVal _Structure As String, ByVal Date_Signature As Global.System.Nullable(Of Date), ByVal Réfferrence As String, ByVal Fichier_PDF As Object, ByVal Commande As String, ByVal Delai_Contractuelle As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(id,Integer)
            If (Client Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Client,String)
            End If
            If (Contrat_de_Réfferrence Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Contrat_de_Réfferrence,String)
            End If
            If (Objet_de_la_Demande Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Objet_de_la_Demande,String)
            End If
            If (Montant Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Montant,String)
            End If
            If (_Structure Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(_Structure,String)
            End If
            If (Date_Signature.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Date_Signature.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Réfferrence Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Réfferrence,String)
            End If
            If (Fichier_PDF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Fichier_PDF,Object)
            End If
            If (Commande Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Commande,String)
            End If
            If (Delai_Contractuelle Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Delai_Contractuelle,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class projet_du_contratTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "projet_du_contrat"
            tableMapping.ColumnMappings.Add("dateArriver", "dateArriver")
            tableMapping.ColumnMappings.Add("Structure", "Structure")
            tableMapping.ColumnMappings.Add("codeStructure", "codeStructure")
            tableMapping.ColumnMappings.Add("typeContrat", "typeContrat")
            tableMapping.ColumnMappings.Add("Réferrence", "Réferrence")
            tableMapping.ColumnMappings.Add("Objet_De_Demande", "Objet_De_Demande")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[projet_du_contrat] ([dateArriver], [Structure], [codeStructure"& _ 
                "], [typeContrat], [Réferrence], [Objet_De_Demande]) VALUES (@dateArriver, @Struc"& _ 
                "ture, @codeStructure, @typeContrat, @Réferrence, @Objet_De_Demande)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dateArriver", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dateArriver", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Structure", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Structure", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@codeStructure", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "codeStructure", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@typeContrat", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "typeContrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Réferrence", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Réferrence", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Objet_De_Demande", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Objet_De_Demande", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.GestionContrats.My.MySettings.Default.loginformConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT dateArriver, Structure, codeStructure, typeContrat, Réferrence, Objet_De_D"& _ 
                "emande FROM dbo.projet_du_contrat"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As loginformDataSet13.projet_du_contratDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As loginformDataSet13.projet_du_contratDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As loginformDataSet13.projet_du_contratDataTable = New loginformDataSet13.projet_du_contratDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As loginformDataSet13.projet_du_contratDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As loginformDataSet13) As Integer
            Return Me.Adapter.Update(dataSet, "projet_du_contrat")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal dateArriver As Global.System.Nullable(Of Date), ByVal _Structure As String, ByVal codeStructure As String, ByVal typeContrat As String, ByVal Réferrence As String, ByVal Objet_De_Demande As String) As Integer
            If (dateArriver.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(dateArriver.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (_Structure Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(_Structure,String)
            End If
            If (codeStructure Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(codeStructure,String)
            End If
            If (typeContrat Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(typeContrat,String)
            End If
            If (Réferrence Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Réferrence,String)
            End If
            If (Objet_De_Demande Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Objet_De_Demande,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Protocole_Accord_ClientTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Protocole_Accord_Client"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Client", "Client")
            tableMapping.ColumnMappings.Add("Montant", "Montant")
            tableMapping.ColumnMappings.Add("Date_Signature", "Date_Signature")
            tableMapping.ColumnMappings.Add("Réfferrence", "Réfferrence")
            tableMapping.ColumnMappings.Add("Objet_de_la_demande", "Objet_de_la_demande")
            tableMapping.ColumnMappings.Add("Mode_de_passation", "Mode_de_passation")
            tableMapping.ColumnMappings.Add("Durée_contrat", "Durée_contrat")
            tableMapping.ColumnMappings.Add("Type_contrat", "Type_contrat")
            tableMapping.ColumnMappings.Add("Fichier_PDF", "Fichier_PDF")
            tableMapping.ColumnMappings.Add("Commande", "Commande")
            tableMapping.ColumnMappings.Add("Delai_Contractuelle", "Delai_Contractuelle")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Protocole_Accord_Client] ([ID], [Client], [Montant], [Date_Sig"& _ 
                "nature], [Réfferrence], [Objet_de_la_demande], [Mode_de_passation], [Durée_contr"& _ 
                "at], [Type_contrat], [Fichier_PDF], [Commande], [Delai_Contractuelle]) VALUES (@"& _ 
                "ID, @Client, @Montant, @Date_Signature, @Réfferrence, @Objet_de_la_demande, @Mod"& _ 
                "e_de_passation, @Durée_contrat, @Type_contrat, @Fichier_PDF, @Commande, @Delai_C"& _ 
                "ontractuelle)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Client", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Montant", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Montant", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Date_Signature", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Date_Signature", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Réfferrence", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Réfferrence", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Objet_de_la_demande", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Objet_de_la_demande", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Mode_de_passation", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Mode_de_passation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Durée_contrat", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Durée_contrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Type_contrat", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Type_contrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fichier_PDF", Global.System.Data.SqlDbType.[Variant], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fichier_PDF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Commande", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Commande", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Delai_Contractuelle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Delai_Contractuelle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.GestionContrats.My.MySettings.Default.loginformConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, Client, Montant, Date_Signature, Réfferrence, Objet_de_la_demande, Mod"& _ 
                "e_de_passation, Durée_contrat, Type_contrat, Fichier_PDF, Commande, Delai_Contra"& _ 
                "ctuelle FROM dbo.Protocole_Accord_Client"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As loginformDataSet13.Protocole_Accord_ClientDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As loginformDataSet13.Protocole_Accord_ClientDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As loginformDataSet13.Protocole_Accord_ClientDataTable = New loginformDataSet13.Protocole_Accord_ClientDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As loginformDataSet13.Protocole_Accord_ClientDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As loginformDataSet13) As Integer
            Return Me.Adapter.Update(dataSet, "Protocole_Accord_Client")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID As Integer, ByVal Client As String, ByVal Montant As String, ByVal Date_Signature As Global.System.Nullable(Of Date), ByVal Réfferrence As String, ByVal Objet_de_la_demande As String, ByVal Mode_de_passation As String, ByVal Durée_contrat As String, ByVal Type_contrat As String, ByVal Fichier_PDF As Object, ByVal Commande As String, ByVal Delai_Contractuelle As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID,Integer)
            If (Client Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Client,String)
            End If
            If (Montant Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Montant,String)
            End If
            If (Date_Signature.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Date_Signature.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Réfferrence Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Réfferrence,String)
            End If
            If (Objet_de_la_demande Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Objet_de_la_demande,String)
            End If
            If (Mode_de_passation Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Mode_de_passation,String)
            End If
            If (Durée_contrat Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Durée_contrat,String)
            End If
            If (Type_contrat Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Type_contrat,String)
            End If
            If (Fichier_PDF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Fichier_PDF,Object)
            End If
            If (Commande Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Commande,String)
            End If
            If (Delai_Contractuelle Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Delai_Contractuelle,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Protocole_Accord_FournisseurTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Protocole_Accord_Fournisseur"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Client", "Client")
            tableMapping.ColumnMappings.Add("Montant", "Montant")
            tableMapping.ColumnMappings.Add("Date_Signature", "Date_Signature")
            tableMapping.ColumnMappings.Add("Réfferrence", "Réfferrence")
            tableMapping.ColumnMappings.Add("Objet_de_la_demande", "Objet_de_la_demande")
            tableMapping.ColumnMappings.Add("Mode_de_passation", "Mode_de_passation")
            tableMapping.ColumnMappings.Add("Durée_contrat", "Durée_contrat")
            tableMapping.ColumnMappings.Add("Type_contrat", "Type_contrat")
            tableMapping.ColumnMappings.Add("Fichier_PDF", "Fichier_PDF")
            tableMapping.ColumnMappings.Add("Commande", "Commande")
            tableMapping.ColumnMappings.Add("Delai_Contractuelle", "Delai_Contractuelle")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Protocole_Accord_Fournisseur] ([ID], [Client], [Montant], [Dat"& _ 
                "e_Signature], [Réfferrence], [Objet_de_la_demande], [Mode_de_passation], [Durée_"& _ 
                "contrat], [Type_contrat], [Fichier_PDF], [Commande], [Delai_Contractuelle]) VALU"& _ 
                "ES (@ID, @Client, @Montant, @Date_Signature, @Réfferrence, @Objet_de_la_demande,"& _ 
                " @Mode_de_passation, @Durée_contrat, @Type_contrat, @Fichier_PDF, @Commande, @De"& _ 
                "lai_Contractuelle)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Client", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Montant", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Montant", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Date_Signature", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Date_Signature", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Réfferrence", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Réfferrence", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Objet_de_la_demande", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Objet_de_la_demande", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Mode_de_passation", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Mode_de_passation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Durée_contrat", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Durée_contrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Type_contrat", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Type_contrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fichier_PDF", Global.System.Data.SqlDbType.[Variant], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fichier_PDF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Commande", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Commande", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Delai_Contractuelle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Delai_Contractuelle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.GestionContrats.My.MySettings.Default.loginformConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, Client, Montant, Date_Signature, Réfferrence, Objet_de_la_demande, Mod"& _ 
                "e_de_passation, Durée_contrat, Type_contrat, Fichier_PDF, Commande, Delai_Contra"& _ 
                "ctuelle FROM dbo.Protocole_Accord_Fournisseur"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As loginformDataSet13.Protocole_Accord_FournisseurDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As loginformDataSet13.Protocole_Accord_FournisseurDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As loginformDataSet13.Protocole_Accord_FournisseurDataTable = New loginformDataSet13.Protocole_Accord_FournisseurDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As loginformDataSet13.Protocole_Accord_FournisseurDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As loginformDataSet13) As Integer
            Return Me.Adapter.Update(dataSet, "Protocole_Accord_Fournisseur")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID As Integer, ByVal Client As String, ByVal Montant As String, ByVal Date_Signature As Global.System.Nullable(Of Date), ByVal Réfferrence As String, ByVal Objet_de_la_demande As String, ByVal Mode_de_passation As String, ByVal Durée_contrat As String, ByVal Type_contrat As String, ByVal Fichier_PDF As Object, ByVal Commande As String, ByVal Delai_Contractuelle As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID,Integer)
            If (Client Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Client,String)
            End If
            If (Montant Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Montant,String)
            End If
            If (Date_Signature.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Date_Signature.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Réfferrence Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Réfferrence,String)
            End If
            If (Objet_de_la_demande Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Objet_de_la_demande,String)
            End If
            If (Mode_de_passation Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Mode_de_passation,String)
            End If
            If (Durée_contrat Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Durée_contrat,String)
            End If
            If (Type_contrat Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Type_contrat,String)
            End If
            If (Fichier_PDF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Fichier_PDF,Object)
            End If
            If (Commande Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Commande,String)
            End If
            If (Delai_Contractuelle Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Delai_Contractuelle,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Table_ContratTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Table_Contrat"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Client", "Client")
            tableMapping.ColumnMappings.Add("Montant", "Montant")
            tableMapping.ColumnMappings.Add("Date_Signature", "Date_Signature")
            tableMapping.ColumnMappings.Add("Réfferrence", "Réfferrence")
            tableMapping.ColumnMappings.Add("Objet_de_la_demande", "Objet_de_la_demande")
            tableMapping.ColumnMappings.Add("Mode_de_passation", "Mode_de_passation")
            tableMapping.ColumnMappings.Add("Durée_contrat", "Durée_contrat")
            tableMapping.ColumnMappings.Add("Type_contrat", "Type_contrat")
            tableMapping.ColumnMappings.Add("Fichier_PDF", "Fichier_PDF")
            tableMapping.ColumnMappings.Add("Commande", "Commande")
            tableMapping.ColumnMappings.Add("Delai_Contractuelle", "Delai_Contractuelle")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Table_Contrat] ([Client], [Montant], [Date_Signature], [Réffer"& _ 
                "rence], [Objet_de_la_demande], [Mode_de_passation], [Durée_contrat], [Type_contr"& _ 
                "at], [Fichier_PDF], [Commande], [Delai_Contractuelle]) VALUES (@Client, @Montant"& _ 
                ", @Date_Signature, @Réfferrence, @Objet_de_la_demande, @Mode_de_passation, @Duré"& _ 
                "e_contrat, @Type_contrat, @Fichier_PDF, @Commande, @Delai_Contractuelle)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Client", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Client", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Montant", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Montant", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Date_Signature", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Date_Signature", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Réfferrence", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Réfferrence", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Objet_de_la_demande", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Objet_de_la_demande", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Mode_de_passation", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Mode_de_passation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Durée_contrat", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Durée_contrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Type_contrat", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Type_contrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fichier_PDF", Global.System.Data.SqlDbType.[Variant], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fichier_PDF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Commande", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Commande", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Delai_Contractuelle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Delai_Contractuelle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.GestionContrats.My.MySettings.Default.loginformConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, Client, Montant, Date_Signature, Réfferrence, Objet_de_la_demande, Mod"& _ 
                "e_de_passation, Durée_contrat, Type_contrat, Fichier_PDF, Commande, Delai_Contra"& _ 
                "ctuelle FROM dbo.Table_Contrat"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As loginformDataSet13.Table_ContratDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As loginformDataSet13.Table_ContratDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As loginformDataSet13.Table_ContratDataTable = New loginformDataSet13.Table_ContratDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As loginformDataSet13.Table_ContratDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As loginformDataSet13) As Integer
            Return Me.Adapter.Update(dataSet, "Table_Contrat")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Client As String, ByVal Montant As String, ByVal Date_Signature As Global.System.Nullable(Of Date), ByVal Réfferrence As String, ByVal Objet_de_la_demande As String, ByVal Mode_de_passation As String, ByVal Durée_contrat As String, ByVal Type_contrat As String, ByVal Fichier_PDF As Object, ByVal Commande As String, ByVal Delai_Contractuelle As String) As Integer
            If (Client Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Client,String)
            End If
            If (Montant Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Montant,String)
            End If
            If (Date_Signature.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Date_Signature.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Réfferrence Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Réfferrence,String)
            End If
            If (Objet_de_la_demande Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Objet_de_la_demande,String)
            End If
            If (Mode_de_passation Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Mode_de_passation,String)
            End If
            If (Durée_contrat Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Durée_contrat,String)
            End If
            If (Type_contrat Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Type_contrat,String)
            End If
            If (Fichier_PDF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Fichier_PDF,Object)
            End If
            If (Commande Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Commande,String)
            End If
            If (Delai_Contractuelle Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Delai_Contractuelle,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Validation_contratTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Validation_contrat"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("client", "client")
            tableMapping.ColumnMappings.Add("durée_contrat", "durée_contrat")
            tableMapping.ColumnMappings.Add("refference", "refference")
            tableMapping.ColumnMappings.Add("date_signature", "date_signature")
            tableMapping.ColumnMappings.Add("mode_passation", "mode_passation")
            tableMapping.ColumnMappings.Add("type_contrat", "type_contrat")
            tableMapping.ColumnMappings.Add("montant", "montant")
            tableMapping.ColumnMappings.Add("Objet_de_la_demande", "Objet_de_la_demande")
            tableMapping.ColumnMappings.Add("Date_validation", "Date_validation")
            tableMapping.ColumnMappings.Add("Date_Retour", "Date_Retour")
            tableMapping.ColumnMappings.Add("Fichier_PDF", "Fichier_PDF")
            tableMapping.ColumnMappings.Add("Commande", "Commande")
            tableMapping.ColumnMappings.Add("Delai_Contractuelle", "Delai_Contractuelle")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Validation_contrat] ([client], [durée_contrat], [refference], "& _ 
                "[date_signature], [mode_passation], [type_contrat], [montant], [Objet_de_la_dema"& _ 
                "nde], [Date_validation], [Date_Retour], [Fichier_PDF], [Commande], [Delai_Contra"& _ 
                "ctuelle]) VALUES (@client, @durée_contrat, @refference, @date_signature, @mode_p"& _ 
                "assation, @type_contrat, @montant, @Objet_de_la_demande, @Date_validation, @Date"& _ 
                "_Retour, @Fichier_PDF, @Commande, @Delai_Contractuelle)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@client", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "client", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@durée_contrat", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "durée_contrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@refference", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "refference", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@date_signature", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "date_signature", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@mode_passation", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "mode_passation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@type_contrat", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "type_contrat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@montant", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "montant", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Objet_de_la_demande", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Objet_de_la_demande", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Date_validation", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Date_validation", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Date_Retour", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Date_Retour", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fichier_PDF", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Fichier_PDF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Commande", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Commande", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Delai_Contractuelle", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Delai_Contractuelle", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.GestionContrats.My.MySettings.Default.loginformConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT id, client, durée_contrat, refference, date_signature, mode_passation, typ"& _ 
                "e_contrat, montant, Objet_de_la_demande, Date_validation, Date_Retour, Fichier_P"& _ 
                "DF, Commande, Delai_Contractuelle FROM dbo.Validation_contrat"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As loginformDataSet13.Validation_contratDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As loginformDataSet13.Validation_contratDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As loginformDataSet13.Validation_contratDataTable = New loginformDataSet13.Validation_contratDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As loginformDataSet13.Validation_contratDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As loginformDataSet13) As Integer
            Return Me.Adapter.Update(dataSet, "Validation_contrat")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal client As String, ByVal durée_contrat As String, ByVal refference As String, ByVal date_signature As Global.System.Nullable(Of Date), ByVal mode_passation As String, ByVal type_contrat As String, ByVal montant As String, ByVal Objet_de_la_demande As String, ByVal Date_validation As Global.System.Nullable(Of Date), ByVal Date_Retour As Global.System.Nullable(Of Date), ByVal Fichier_PDF As String, ByVal Commande As String, ByVal Delai_Contractuelle As String) As Integer
            If (client Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(client,String)
            End If
            If (durée_contrat Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(durée_contrat,String)
            End If
            If (refference Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(refference,String)
            End If
            If (date_signature.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(date_signature.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (mode_passation Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(mode_passation,String)
            End If
            If (type_contrat Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(type_contrat,String)
            End If
            If (montant Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(montant,String)
            End If
            If (Objet_de_la_demande Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Objet_de_la_demande,String)
            End If
            If (Date_validation.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Date_validation.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Date_Retour.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Date_Retour.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Fichier_PDF Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Fichier_PDF,String)
            End If
            If (Commande Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Commande,String)
            End If
            If (Delai_Contractuelle Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Delai_Contractuelle,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _cahier_des_charges1TableAdapter As Cahier_des_charges1TableAdapter
        
        Private _contratTableAdapter As ContratTableAdapter
        
        Private _contrat_Cadre_ClientTableAdapter As Contrat_Cadre_ClientTableAdapter
        
        Private _contrat_Cadre_FournisseurTableAdapter As Contrat_Cadre_FournisseurTableAdapter
        
        Private _contrat_Etranger_ClientTableAdapter As Contrat_Etranger_ClientTableAdapter
        
        Private _contrat_Etranger_FournisseurTableAdapter As Contrat_Etranger_FournisseurTableAdapter
        
        Private _contrat_FournisseurTableAdapter As Contrat_FournisseurTableAdapter
        
        Private _contrat_pour_RéviserTableAdapter As Contrat_pour_RéviserTableAdapter
        
        Private _loginTableAdapter As loginTableAdapter
        
        Private _login_1TableAdapter As login_1TableAdapter
        
        Private _note_des_Réserves_ClientTableAdapter As Note_des_Réserves_ClientTableAdapter
        
        Private _oDSTableAdapter As ODSTableAdapter
        
        Private _oDS_APR_PROGTableAdapter As ODS_APR_PROGTableAdapter
        
        Private _projet_du_contratTableAdapter As projet_du_contratTableAdapter
        
        Private _protocole_Accord_ClientTableAdapter As Protocole_Accord_ClientTableAdapter
        
        Private _protocole_Accord_FournisseurTableAdapter As Protocole_Accord_FournisseurTableAdapter
        
        Private _table_ContratTableAdapter As Table_ContratTableAdapter
        
        Private _validation_contratTableAdapter As Validation_contratTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property Cahier_des_charges1TableAdapter() As Cahier_des_charges1TableAdapter
            Get
                Return Me._cahier_des_charges1TableAdapter
            End Get
            Set
                Me._cahier_des_charges1TableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ContratTableAdapter() As ContratTableAdapter
            Get
                Return Me._contratTableAdapter
            End Get
            Set
                Me._contratTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property Contrat_Cadre_ClientTableAdapter() As Contrat_Cadre_ClientTableAdapter
            Get
                Return Me._contrat_Cadre_ClientTableAdapter
            End Get
            Set
                Me._contrat_Cadre_ClientTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property Contrat_Cadre_FournisseurTableAdapter() As Contrat_Cadre_FournisseurTableAdapter
            Get
                Return Me._contrat_Cadre_FournisseurTableAdapter
            End Get
            Set
                Me._contrat_Cadre_FournisseurTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property Contrat_Etranger_ClientTableAdapter() As Contrat_Etranger_ClientTableAdapter
            Get
                Return Me._contrat_Etranger_ClientTableAdapter
            End Get
            Set
                Me._contrat_Etranger_ClientTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property Contrat_Etranger_FournisseurTableAdapter() As Contrat_Etranger_FournisseurTableAdapter
            Get
                Return Me._contrat_Etranger_FournisseurTableAdapter
            End Get
            Set
                Me._contrat_Etranger_FournisseurTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property Contrat_FournisseurTableAdapter() As Contrat_FournisseurTableAdapter
            Get
                Return Me._contrat_FournisseurTableAdapter
            End Get
            Set
                Me._contrat_FournisseurTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property Contrat_pour_RéviserTableAdapter() As Contrat_pour_RéviserTableAdapter
            Get
                Return Me._contrat_pour_RéviserTableAdapter
            End Get
            Set
                Me._contrat_pour_RéviserTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property loginTableAdapter() As loginTableAdapter
            Get
                Return Me._loginTableAdapter
            End Get
            Set
                Me._loginTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property login_1TableAdapter() As login_1TableAdapter
            Get
                Return Me._login_1TableAdapter
            End Get
            Set
                Me._login_1TableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property Note_des_Réserves_ClientTableAdapter() As Note_des_Réserves_ClientTableAdapter
            Get
                Return Me._note_des_Réserves_ClientTableAdapter
            End Get
            Set
                Me._note_des_Réserves_ClientTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ODSTableAdapter() As ODSTableAdapter
            Get
                Return Me._oDSTableAdapter
            End Get
            Set
                Me._oDSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ODS_APR_PROGTableAdapter() As ODS_APR_PROGTableAdapter
            Get
                Return Me._oDS_APR_PROGTableAdapter
            End Get
            Set
                Me._oDS_APR_PROGTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property projet_du_contratTableAdapter() As projet_du_contratTableAdapter
            Get
                Return Me._projet_du_contratTableAdapter
            End Get
            Set
                Me._projet_du_contratTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property Protocole_Accord_ClientTableAdapter() As Protocole_Accord_ClientTableAdapter
            Get
                Return Me._protocole_Accord_ClientTableAdapter
            End Get
            Set
                Me._protocole_Accord_ClientTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property Protocole_Accord_FournisseurTableAdapter() As Protocole_Accord_FournisseurTableAdapter
            Get
                Return Me._protocole_Accord_FournisseurTableAdapter
            End Get
            Set
                Me._protocole_Accord_FournisseurTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property Table_ContratTableAdapter() As Table_ContratTableAdapter
            Get
                Return Me._table_ContratTableAdapter
            End Get
            Set
                Me._table_ContratTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property Validation_contratTableAdapter() As Validation_contratTableAdapter
            Get
                Return Me._validation_contratTableAdapter
            End Get
            Set
                Me._validation_contratTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._cahier_des_charges1TableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._cahier_des_charges1TableAdapter.Connection) Is Nothing)) Then
                    Return Me._cahier_des_charges1TableAdapter.Connection
                End If
                If ((Not (Me._contratTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._contratTableAdapter.Connection) Is Nothing)) Then
                    Return Me._contratTableAdapter.Connection
                End If
                If ((Not (Me._contrat_Cadre_ClientTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._contrat_Cadre_ClientTableAdapter.Connection) Is Nothing)) Then
                    Return Me._contrat_Cadre_ClientTableAdapter.Connection
                End If
                If ((Not (Me._contrat_Cadre_FournisseurTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._contrat_Cadre_FournisseurTableAdapter.Connection) Is Nothing)) Then
                    Return Me._contrat_Cadre_FournisseurTableAdapter.Connection
                End If
                If ((Not (Me._contrat_Etranger_ClientTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._contrat_Etranger_ClientTableAdapter.Connection) Is Nothing)) Then
                    Return Me._contrat_Etranger_ClientTableAdapter.Connection
                End If
                If ((Not (Me._contrat_Etranger_FournisseurTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._contrat_Etranger_FournisseurTableAdapter.Connection) Is Nothing)) Then
                    Return Me._contrat_Etranger_FournisseurTableAdapter.Connection
                End If
                If ((Not (Me._contrat_FournisseurTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._contrat_FournisseurTableAdapter.Connection) Is Nothing)) Then
                    Return Me._contrat_FournisseurTableAdapter.Connection
                End If
                If ((Not (Me._contrat_pour_RéviserTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._contrat_pour_RéviserTableAdapter.Connection) Is Nothing)) Then
                    Return Me._contrat_pour_RéviserTableAdapter.Connection
                End If
                If ((Not (Me._loginTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._loginTableAdapter.Connection) Is Nothing)) Then
                    Return Me._loginTableAdapter.Connection
                End If
                If ((Not (Me._login_1TableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._login_1TableAdapter.Connection) Is Nothing)) Then
                    Return Me._login_1TableAdapter.Connection
                End If
                If ((Not (Me._note_des_Réserves_ClientTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._note_des_Réserves_ClientTableAdapter.Connection) Is Nothing)) Then
                    Return Me._note_des_Réserves_ClientTableAdapter.Connection
                End If
                If ((Not (Me._oDSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._oDSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._oDSTableAdapter.Connection
                End If
                If ((Not (Me._oDS_APR_PROGTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._oDS_APR_PROGTableAdapter.Connection) Is Nothing)) Then
                    Return Me._oDS_APR_PROGTableAdapter.Connection
                End If
                If ((Not (Me._projet_du_contratTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._projet_du_contratTableAdapter.Connection) Is Nothing)) Then
                    Return Me._projet_du_contratTableAdapter.Connection
                End If
                If ((Not (Me._protocole_Accord_ClientTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._protocole_Accord_ClientTableAdapter.Connection) Is Nothing)) Then
                    Return Me._protocole_Accord_ClientTableAdapter.Connection
                End If
                If ((Not (Me._protocole_Accord_FournisseurTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._protocole_Accord_FournisseurTableAdapter.Connection) Is Nothing)) Then
                    Return Me._protocole_Accord_FournisseurTableAdapter.Connection
                End If
                If ((Not (Me._table_ContratTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._table_ContratTableAdapter.Connection) Is Nothing)) Then
                    Return Me._table_ContratTableAdapter.Connection
                End If
                If ((Not (Me._validation_contratTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._validation_contratTableAdapter.Connection) Is Nothing)) Then
                    Return Me._validation_contratTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._cahier_des_charges1TableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._contratTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._contrat_Cadre_ClientTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._contrat_Cadre_FournisseurTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._contrat_Etranger_ClientTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._contrat_Etranger_FournisseurTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._contrat_FournisseurTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._contrat_pour_RéviserTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._loginTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._login_1TableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._note_des_Réserves_ClientTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._oDSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._oDS_APR_PROGTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._projet_du_contratTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._protocole_Accord_ClientTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._protocole_Accord_FournisseurTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._table_ContratTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._validation_contratTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As loginformDataSet13, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._oDSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ODS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._oDSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._oDS_APR_PROGTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ODS_APR_PROG.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._oDS_APR_PROGTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._login_1TableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.login_1.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._login_1TableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._note_des_Réserves_ClientTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Note_des_Réserves_Client.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._note_des_Réserves_ClientTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._projet_du_contratTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.projet_du_contrat.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._projet_du_contratTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._table_ContratTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Table_Contrat.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._table_ContratTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._validation_contratTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Validation_contrat.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._validation_contratTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._protocole_Accord_ClientTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Protocole_Accord_Client.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._protocole_Accord_ClientTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._protocole_Accord_FournisseurTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Protocole_Accord_Fournisseur.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._protocole_Accord_FournisseurTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._contrat_Cadre_ClientTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Contrat_Cadre_Client.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._contrat_Cadre_ClientTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._contrat_Cadre_FournisseurTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Contrat_Cadre_Fournisseur.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._contrat_Cadre_FournisseurTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._cahier_des_charges1TableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Cahier_des_charges1.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._cahier_des_charges1TableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._contratTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Contrat.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._contratTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._contrat_Etranger_ClientTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Contrat_Etranger_Client.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._contrat_Etranger_ClientTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._contrat_pour_RéviserTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Contrat_pour_Réviser.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._contrat_pour_RéviserTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._loginTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.login.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._loginTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._contrat_Etranger_FournisseurTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Contrat_Etranger_Fournisseur.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._contrat_Etranger_FournisseurTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._contrat_FournisseurTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Contrat_Fournisseur.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._contrat_FournisseurTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As loginformDataSet13, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._oDSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ODS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._oDSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._oDS_APR_PROGTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ODS_APR_PROG.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._oDS_APR_PROGTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._login_1TableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.login_1.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._login_1TableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._note_des_Réserves_ClientTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Note_des_Réserves_Client.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._note_des_Réserves_ClientTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._projet_du_contratTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.projet_du_contrat.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._projet_du_contratTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._table_ContratTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Table_Contrat.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._table_ContratTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._validation_contratTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Validation_contrat.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._validation_contratTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._protocole_Accord_ClientTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Protocole_Accord_Client.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._protocole_Accord_ClientTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._protocole_Accord_FournisseurTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Protocole_Accord_Fournisseur.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._protocole_Accord_FournisseurTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._contrat_Cadre_ClientTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Contrat_Cadre_Client.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._contrat_Cadre_ClientTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._contrat_Cadre_FournisseurTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Contrat_Cadre_Fournisseur.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._contrat_Cadre_FournisseurTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._cahier_des_charges1TableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Cahier_des_charges1.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._cahier_des_charges1TableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._contratTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Contrat.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._contratTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._contrat_Etranger_ClientTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Contrat_Etranger_Client.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._contrat_Etranger_ClientTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._contrat_pour_RéviserTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Contrat_pour_Réviser.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._contrat_pour_RéviserTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._loginTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.login.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._loginTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._contrat_Etranger_FournisseurTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Contrat_Etranger_Fournisseur.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._contrat_Etranger_FournisseurTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._contrat_FournisseurTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Contrat_Fournisseur.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._contrat_FournisseurTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As loginformDataSet13, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._contrat_FournisseurTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Contrat_Fournisseur.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._contrat_FournisseurTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._contrat_Etranger_FournisseurTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Contrat_Etranger_Fournisseur.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._contrat_Etranger_FournisseurTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._loginTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.login.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._loginTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._contrat_pour_RéviserTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Contrat_pour_Réviser.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._contrat_pour_RéviserTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._contrat_Etranger_ClientTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Contrat_Etranger_Client.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._contrat_Etranger_ClientTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._contratTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Contrat.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._contratTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._cahier_des_charges1TableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Cahier_des_charges1.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._cahier_des_charges1TableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._contrat_Cadre_FournisseurTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Contrat_Cadre_Fournisseur.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._contrat_Cadre_FournisseurTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._contrat_Cadre_ClientTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Contrat_Cadre_Client.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._contrat_Cadre_ClientTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._protocole_Accord_FournisseurTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Protocole_Accord_Fournisseur.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._protocole_Accord_FournisseurTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._protocole_Accord_ClientTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Protocole_Accord_Client.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._protocole_Accord_ClientTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._validation_contratTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Validation_contrat.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._validation_contratTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._table_ContratTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Table_Contrat.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._table_ContratTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._projet_du_contratTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.projet_du_contrat.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._projet_du_contratTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._note_des_Réserves_ClientTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Note_des_Réserves_Client.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._note_des_Réserves_ClientTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._login_1TableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.login_1.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._login_1TableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._oDS_APR_PROGTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ODS_APR_PROG.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._oDS_APR_PROGTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._oDSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ODS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._oDSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As loginformDataSet13) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._cahier_des_charges1TableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._cahier_des_charges1TableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tous les TableAdapters managés par un TableAdapterManager doivent utiliser la mêm"& _ 
                        "e chaîne de connexion.")
            End If
            If ((Not (Me._contratTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._contratTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tous les TableAdapters managés par un TableAdapterManager doivent utiliser la mêm"& _ 
                        "e chaîne de connexion.")
            End If
            If ((Not (Me._contrat_Cadre_ClientTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._contrat_Cadre_ClientTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tous les TableAdapters managés par un TableAdapterManager doivent utiliser la mêm"& _ 
                        "e chaîne de connexion.")
            End If
            If ((Not (Me._contrat_Cadre_FournisseurTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._contrat_Cadre_FournisseurTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tous les TableAdapters managés par un TableAdapterManager doivent utiliser la mêm"& _ 
                        "e chaîne de connexion.")
            End If
            If ((Not (Me._contrat_Etranger_ClientTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._contrat_Etranger_ClientTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tous les TableAdapters managés par un TableAdapterManager doivent utiliser la mêm"& _ 
                        "e chaîne de connexion.")
            End If
            If ((Not (Me._contrat_Etranger_FournisseurTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._contrat_Etranger_FournisseurTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tous les TableAdapters managés par un TableAdapterManager doivent utiliser la mêm"& _ 
                        "e chaîne de connexion.")
            End If
            If ((Not (Me._contrat_FournisseurTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._contrat_FournisseurTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tous les TableAdapters managés par un TableAdapterManager doivent utiliser la mêm"& _ 
                        "e chaîne de connexion.")
            End If
            If ((Not (Me._contrat_pour_RéviserTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._contrat_pour_RéviserTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tous les TableAdapters managés par un TableAdapterManager doivent utiliser la mêm"& _ 
                        "e chaîne de connexion.")
            End If
            If ((Not (Me._loginTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._loginTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tous les TableAdapters managés par un TableAdapterManager doivent utiliser la mêm"& _ 
                        "e chaîne de connexion.")
            End If
            If ((Not (Me._login_1TableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._login_1TableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tous les TableAdapters managés par un TableAdapterManager doivent utiliser la mêm"& _ 
                        "e chaîne de connexion.")
            End If
            If ((Not (Me._note_des_Réserves_ClientTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._note_des_Réserves_ClientTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tous les TableAdapters managés par un TableAdapterManager doivent utiliser la mêm"& _ 
                        "e chaîne de connexion.")
            End If
            If ((Not (Me._oDSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._oDSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tous les TableAdapters managés par un TableAdapterManager doivent utiliser la mêm"& _ 
                        "e chaîne de connexion.")
            End If
            If ((Not (Me._oDS_APR_PROGTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._oDS_APR_PROGTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tous les TableAdapters managés par un TableAdapterManager doivent utiliser la mêm"& _ 
                        "e chaîne de connexion.")
            End If
            If ((Not (Me._projet_du_contratTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._projet_du_contratTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tous les TableAdapters managés par un TableAdapterManager doivent utiliser la mêm"& _ 
                        "e chaîne de connexion.")
            End If
            If ((Not (Me._protocole_Accord_ClientTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._protocole_Accord_ClientTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tous les TableAdapters managés par un TableAdapterManager doivent utiliser la mêm"& _ 
                        "e chaîne de connexion.")
            End If
            If ((Not (Me._protocole_Accord_FournisseurTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._protocole_Accord_FournisseurTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tous les TableAdapters managés par un TableAdapterManager doivent utiliser la mêm"& _ 
                        "e chaîne de connexion.")
            End If
            If ((Not (Me._table_ContratTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._table_ContratTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tous les TableAdapters managés par un TableAdapterManager doivent utiliser la mêm"& _ 
                        "e chaîne de connexion.")
            End If
            If ((Not (Me._validation_contratTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._validation_contratTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("Tous les TableAdapters managés par un TableAdapterManager doivent utiliser la mêm"& _ 
                        "e chaîne de connexion.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager ne contient pas d'informations de connexion. Définissez chaqu"& _ 
                        "e propriété TableAdapterManager TableAdapter à une instance valide de TableAdapt"& _ 
                        "er.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("La transaction ne peut pas commencer. La connexion de données actuelle ne prend p"& _ 
                        "as en charge les transactions ou l'état actuel n'autorise pas le début de la tra"& _ 
                        "nsaction.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._cahier_des_charges1TableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._cahier_des_charges1TableAdapter, Me._cahier_des_charges1TableAdapter.Connection)
                    Me._cahier_des_charges1TableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._cahier_des_charges1TableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._cahier_des_charges1TableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._cahier_des_charges1TableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._cahier_des_charges1TableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._contratTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._contratTableAdapter, Me._contratTableAdapter.Connection)
                    Me._contratTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._contratTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._contratTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._contratTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._contratTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._contrat_Cadre_ClientTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._contrat_Cadre_ClientTableAdapter, Me._contrat_Cadre_ClientTableAdapter.Connection)
                    Me._contrat_Cadre_ClientTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._contrat_Cadre_ClientTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._contrat_Cadre_ClientTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._contrat_Cadre_ClientTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._contrat_Cadre_ClientTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._contrat_Cadre_FournisseurTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._contrat_Cadre_FournisseurTableAdapter, Me._contrat_Cadre_FournisseurTableAdapter.Connection)
                    Me._contrat_Cadre_FournisseurTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._contrat_Cadre_FournisseurTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._contrat_Cadre_FournisseurTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._contrat_Cadre_FournisseurTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._contrat_Cadre_FournisseurTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._contrat_Etranger_ClientTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._contrat_Etranger_ClientTableAdapter, Me._contrat_Etranger_ClientTableAdapter.Connection)
                    Me._contrat_Etranger_ClientTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._contrat_Etranger_ClientTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._contrat_Etranger_ClientTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._contrat_Etranger_ClientTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._contrat_Etranger_ClientTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._contrat_Etranger_FournisseurTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._contrat_Etranger_FournisseurTableAdapter, Me._contrat_Etranger_FournisseurTableAdapter.Connection)
                    Me._contrat_Etranger_FournisseurTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._contrat_Etranger_FournisseurTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._contrat_Etranger_FournisseurTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._contrat_Etranger_FournisseurTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._contrat_Etranger_FournisseurTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._contrat_FournisseurTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._contrat_FournisseurTableAdapter, Me._contrat_FournisseurTableAdapter.Connection)
                    Me._contrat_FournisseurTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._contrat_FournisseurTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._contrat_FournisseurTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._contrat_FournisseurTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._contrat_FournisseurTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._contrat_pour_RéviserTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._contrat_pour_RéviserTableAdapter, Me._contrat_pour_RéviserTableAdapter.Connection)
                    Me._contrat_pour_RéviserTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._contrat_pour_RéviserTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._contrat_pour_RéviserTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._contrat_pour_RéviserTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._contrat_pour_RéviserTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._loginTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._loginTableAdapter, Me._loginTableAdapter.Connection)
                    Me._loginTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._loginTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._loginTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._loginTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._loginTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._login_1TableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._login_1TableAdapter, Me._login_1TableAdapter.Connection)
                    Me._login_1TableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._login_1TableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._login_1TableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._login_1TableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._login_1TableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._note_des_Réserves_ClientTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._note_des_Réserves_ClientTableAdapter, Me._note_des_Réserves_ClientTableAdapter.Connection)
                    Me._note_des_Réserves_ClientTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._note_des_Réserves_ClientTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._note_des_Réserves_ClientTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._note_des_Réserves_ClientTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._note_des_Réserves_ClientTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._oDSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._oDSTableAdapter, Me._oDSTableAdapter.Connection)
                    Me._oDSTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._oDSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._oDSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._oDSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._oDSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._oDS_APR_PROGTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._oDS_APR_PROGTableAdapter, Me._oDS_APR_PROGTableAdapter.Connection)
                    Me._oDS_APR_PROGTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._oDS_APR_PROGTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._oDS_APR_PROGTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._oDS_APR_PROGTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._oDS_APR_PROGTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._projet_du_contratTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._projet_du_contratTableAdapter, Me._projet_du_contratTableAdapter.Connection)
                    Me._projet_du_contratTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._projet_du_contratTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._projet_du_contratTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._projet_du_contratTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._projet_du_contratTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._protocole_Accord_ClientTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._protocole_Accord_ClientTableAdapter, Me._protocole_Accord_ClientTableAdapter.Connection)
                    Me._protocole_Accord_ClientTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._protocole_Accord_ClientTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._protocole_Accord_ClientTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._protocole_Accord_ClientTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._protocole_Accord_ClientTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._protocole_Accord_FournisseurTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._protocole_Accord_FournisseurTableAdapter, Me._protocole_Accord_FournisseurTableAdapter.Connection)
                    Me._protocole_Accord_FournisseurTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._protocole_Accord_FournisseurTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._protocole_Accord_FournisseurTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._protocole_Accord_FournisseurTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._protocole_Accord_FournisseurTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._table_ContratTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._table_ContratTableAdapter, Me._table_ContratTableAdapter.Connection)
                    Me._table_ContratTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._table_ContratTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._table_ContratTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._table_ContratTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._table_ContratTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._validation_contratTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._validation_contratTableAdapter, Me._validation_contratTableAdapter.Connection)
                    Me._validation_contratTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._validation_contratTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._validation_contratTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._validation_contratTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._validation_contratTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._cahier_des_charges1TableAdapter) Is Nothing) Then
                    Me._cahier_des_charges1TableAdapter.Connection = CType(revertConnections(Me._cahier_des_charges1TableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._cahier_des_charges1TableAdapter.Transaction = Nothing
                End If
                If (Not (Me._contratTableAdapter) Is Nothing) Then
                    Me._contratTableAdapter.Connection = CType(revertConnections(Me._contratTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._contratTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._contrat_Cadre_ClientTableAdapter) Is Nothing) Then
                    Me._contrat_Cadre_ClientTableAdapter.Connection = CType(revertConnections(Me._contrat_Cadre_ClientTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._contrat_Cadre_ClientTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._contrat_Cadre_FournisseurTableAdapter) Is Nothing) Then
                    Me._contrat_Cadre_FournisseurTableAdapter.Connection = CType(revertConnections(Me._contrat_Cadre_FournisseurTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._contrat_Cadre_FournisseurTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._contrat_Etranger_ClientTableAdapter) Is Nothing) Then
                    Me._contrat_Etranger_ClientTableAdapter.Connection = CType(revertConnections(Me._contrat_Etranger_ClientTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._contrat_Etranger_ClientTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._contrat_Etranger_FournisseurTableAdapter) Is Nothing) Then
                    Me._contrat_Etranger_FournisseurTableAdapter.Connection = CType(revertConnections(Me._contrat_Etranger_FournisseurTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._contrat_Etranger_FournisseurTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._contrat_FournisseurTableAdapter) Is Nothing) Then
                    Me._contrat_FournisseurTableAdapter.Connection = CType(revertConnections(Me._contrat_FournisseurTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._contrat_FournisseurTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._contrat_pour_RéviserTableAdapter) Is Nothing) Then
                    Me._contrat_pour_RéviserTableAdapter.Connection = CType(revertConnections(Me._contrat_pour_RéviserTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._contrat_pour_RéviserTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._loginTableAdapter) Is Nothing) Then
                    Me._loginTableAdapter.Connection = CType(revertConnections(Me._loginTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._loginTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._login_1TableAdapter) Is Nothing) Then
                    Me._login_1TableAdapter.Connection = CType(revertConnections(Me._login_1TableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._login_1TableAdapter.Transaction = Nothing
                End If
                If (Not (Me._note_des_Réserves_ClientTableAdapter) Is Nothing) Then
                    Me._note_des_Réserves_ClientTableAdapter.Connection = CType(revertConnections(Me._note_des_Réserves_ClientTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._note_des_Réserves_ClientTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._oDSTableAdapter) Is Nothing) Then
                    Me._oDSTableAdapter.Connection = CType(revertConnections(Me._oDSTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._oDSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._oDS_APR_PROGTableAdapter) Is Nothing) Then
                    Me._oDS_APR_PROGTableAdapter.Connection = CType(revertConnections(Me._oDS_APR_PROGTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._oDS_APR_PROGTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._projet_du_contratTableAdapter) Is Nothing) Then
                    Me._projet_du_contratTableAdapter.Connection = CType(revertConnections(Me._projet_du_contratTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._projet_du_contratTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._protocole_Accord_ClientTableAdapter) Is Nothing) Then
                    Me._protocole_Accord_ClientTableAdapter.Connection = CType(revertConnections(Me._protocole_Accord_ClientTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._protocole_Accord_ClientTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._protocole_Accord_FournisseurTableAdapter) Is Nothing) Then
                    Me._protocole_Accord_FournisseurTableAdapter.Connection = CType(revertConnections(Me._protocole_Accord_FournisseurTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._protocole_Accord_FournisseurTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._table_ContratTableAdapter) Is Nothing) Then
                    Me._table_ContratTableAdapter.Connection = CType(revertConnections(Me._table_ContratTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._table_ContratTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._validation_contratTableAdapter) Is Nothing) Then
                    Me._validation_contratTableAdapter.Connection = CType(revertConnections(Me._validation_contratTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._validation_contratTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
